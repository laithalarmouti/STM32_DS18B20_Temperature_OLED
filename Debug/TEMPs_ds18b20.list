
TEMPs_ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000627c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  08006420  08006420  00007420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006f40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001d4  08007114  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007114  000087e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b791  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c65  00000000  00000000  00013995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00015600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cb  00000000  00000000  000162b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006c8b  00000000  00000000  00016c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeeb  00000000  00000000  0001d906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b8d  00000000  00000000  0002c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  000bd3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c1a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006404 	.word	0x08006404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006404 	.word	0x08006404

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Delay function using TIM11 */
void delay (uint16_t time)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim11, 0);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <delay+0x30>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim11)) < time);
 8000eba:	bf00      	nop
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <delay+0x30>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3f9      	bcc.n	8000ebc <delay+0x14>
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000244 	.word	0x20000244

08000edc <Display_Temp>:

/* Display temperature on the SSD1306 OLED */
void Display_Temp (float Temp)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    char str[20] = {0};
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
    ssd1306_SetCursor(0, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 fc92 	bl	8001824 <ssd1306_SetCursor>
    sprintf(str, "TEMP:- %.2f C", Temp);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fb29 	bl	8000558 <__aeabi_f2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	f107 000c 	add.w	r0, r7, #12
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <Display_Temp+0x54>)
 8000f10:	f003 f94a 	bl	80041a8 <siprintf>
    ssd1306_WriteString(str, Font_7x10, White);
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <Display_Temp+0x58>)
 8000f16:	f107 000c 	add.w	r0, r7, #12
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f20:	f000 fc5a 	bl	80017d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000f24:	f000 fb4a 	bl	80015bc <ssd1306_UpdateScreen>
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08006420 	.word	0x08006420
 8000f34:	08006b9c 	.word	0x08006b9c

08000f38 <Set_Pin_Output>:
#define DS18B20_PORT 	GPIOA
#define DS18B20_PIN 	GPIO_PIN_1

/* Configure pin as output */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f58:	2311      	movs	r3, #17
 8000f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 ffe6 	bl	8001f38 <HAL_GPIO_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <Set_Pin_Input>:

/* Configure pin as input */
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 ffc8 	bl	8001f38 <HAL_GPIO_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DS18B20_Start>:

/* DS18B20 Start signal */
uint8_t DS18B20_Start(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); // set the pin as output
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <DS18B20_Start+0x5c>)
 8000fbe:	f7ff ffbb 	bl	8000f38 <Set_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4811      	ldr	r0, [pc, #68]	@ (800100c <DS18B20_Start+0x5c>)
 8000fc8:	f001 f952 	bl	8002270 <HAL_GPIO_WritePin>
    delay(480); // delay according to datasheet
 8000fcc:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000fd0:	f7ff ff6a 	bl	8000ea8 <delay>

    Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); // set the pin as input
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	480d      	ldr	r0, [pc, #52]	@ (800100c <DS18B20_Start+0x5c>)
 8000fd8:	f7ff ffcc 	bl	8000f74 <Set_Pin_Input>
    delay(80); // delay according to datasheet
 8000fdc:	2050      	movs	r0, #80	@ 0x50
 8000fde:	f7ff ff63 	bl	8000ea8 <delay>

    if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <DS18B20_Start+0x5c>)
 8000fe6:	f001 f92b 	bl	8002240 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <DS18B20_Start+0x46>
        Response = 1; // presence pulse detected
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	e001      	b.n	8000ffa <DS18B20_Start+0x4a>
    else
        Response = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]

    delay(400); // complete the initialization delay
 8000ffa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000ffe:	f7ff ff53 	bl	8000ea8 <delay>

    return Response;
 8001002:	79fb      	ldrb	r3, [r7, #7]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020000 	.word	0x40020000

08001010 <DS18B20_Write>:

/* DS18B20 Write byte */
void DS18B20_Write(uint8_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); // set as output
 800101a:	2102      	movs	r1, #2
 800101c:	481e      	ldr	r0, [pc, #120]	@ (8001098 <DS18B20_Write+0x88>)
 800101e:	f7ff ff8b 	bl	8000f38 <Set_Pin_Output>

    for (int i = 0; i < 8; i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e02e      	b.n	8001086 <DS18B20_Write+0x76>
    {
        if ((data & (1 << i)) != 0) // if the bit is high
 8001028:	79fa      	ldrb	r2, [r7, #7]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	fa42 f303 	asr.w	r3, r2, r3
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <DS18B20_Write+0x50>
        {
            // write 1
            Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001038:	2102      	movs	r1, #2
 800103a:	4817      	ldr	r0, [pc, #92]	@ (8001098 <DS18B20_Write+0x88>)
 800103c:	f7ff ff7c 	bl	8000f38 <Set_Pin_Output>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull low
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	4814      	ldr	r0, [pc, #80]	@ (8001098 <DS18B20_Write+0x88>)
 8001046:	f001 f913 	bl	8002270 <HAL_GPIO_WritePin>
            delay(1); // wait 1 µs
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff2c 	bl	8000ea8 <delay>
            Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); // release bus
 8001050:	2102      	movs	r1, #2
 8001052:	4811      	ldr	r0, [pc, #68]	@ (8001098 <DS18B20_Write+0x88>)
 8001054:	f7ff ff8e 	bl	8000f74 <Set_Pin_Input>
            delay(60);
 8001058:	203c      	movs	r0, #60	@ 0x3c
 800105a:	f7ff ff25 	bl	8000ea8 <delay>
 800105e:	e00f      	b.n	8001080 <DS18B20_Write+0x70>
        }
        else // if the bit is low
        {
            // write 0
            Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001060:	2102      	movs	r1, #2
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <DS18B20_Write+0x88>)
 8001064:	f7ff ff68 	bl	8000f38 <Set_Pin_Output>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull low
 8001068:	2200      	movs	r2, #0
 800106a:	2102      	movs	r1, #2
 800106c:	480a      	ldr	r0, [pc, #40]	@ (8001098 <DS18B20_Write+0x88>)
 800106e:	f001 f8ff 	bl	8002270 <HAL_GPIO_WritePin>
            delay(60);
 8001072:	203c      	movs	r0, #60	@ 0x3c
 8001074:	f7ff ff18 	bl	8000ea8 <delay>
            Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001078:	2102      	movs	r1, #2
 800107a:	4807      	ldr	r0, [pc, #28]	@ (8001098 <DS18B20_Write+0x88>)
 800107c:	f7ff ff7a 	bl	8000f74 <Set_Pin_Input>
    for (int i = 0; i < 8; i++)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b07      	cmp	r3, #7
 800108a:	ddcd      	ble.n	8001028 <DS18B20_Write+0x18>
        }
    }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000

0800109c <DS18B20_Read>:

/* DS18B20 Read byte */
uint8_t DS18B20_Read(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010a6:	2102      	movs	r1, #2
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <DS18B20_Read+0x78>)
 80010aa:	f7ff ff63 	bl	8000f74 <Set_Pin_Input>

    for (int i = 0; i < 8; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	e026      	b.n	8001102 <DS18B20_Read+0x66>
    {
        Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); // drive line low
 80010b4:	2102      	movs	r1, #2
 80010b6:	4817      	ldr	r0, [pc, #92]	@ (8001114 <DS18B20_Read+0x78>)
 80010b8:	f7ff ff3e 	bl	8000f38 <Set_Pin_Output>
        HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2102      	movs	r1, #2
 80010c0:	4814      	ldr	r0, [pc, #80]	@ (8001114 <DS18B20_Read+0x78>)
 80010c2:	f001 f8d5 	bl	8002270 <HAL_GPIO_WritePin>
        delay(2); // wait 2 µs
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff feee 	bl	8000ea8 <delay>

        Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); // release bus
 80010cc:	2102      	movs	r1, #2
 80010ce:	4811      	ldr	r0, [pc, #68]	@ (8001114 <DS18B20_Read+0x78>)
 80010d0:	f7ff ff50 	bl	8000f74 <Set_Pin_Input>
        if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80010d4:	2102      	movs	r1, #2
 80010d6:	480f      	ldr	r0, [pc, #60]	@ (8001114 <DS18B20_Read+0x78>)
 80010d8:	f001 f8b2 	bl	8002240 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d009      	beq.n	80010f6 <DS18B20_Read+0x5a>
        {
            value |= 1 << i; // read a '1'
 80010e2:	2201      	movs	r2, #1
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	71fb      	strb	r3, [r7, #7]
        }
        delay(60);
 80010f6:	203c      	movs	r0, #60	@ 0x3c
 80010f8:	f7ff fed6 	bl	8000ea8 <delay>
    for (int i = 0; i < 8; i++)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddd5      	ble.n	80010b4 <DS18B20_Read+0x18>
    }
    return value;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  float Temperature = 0;
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  uint8_t Temp_byte1 = 0, Temp_byte2 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	72fb      	strb	r3, [r7, #11]
 8001128:	2300      	movs	r3, #0
 800112a:	72bb      	strb	r3, [r7, #10]
  uint16_t TEMP = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	813b      	strh	r3, [r7, #8]
  uint8_t Presence = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 fd84 	bl	8001c40 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f856 	bl	80011e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 f90e 	bl	800135c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001140:	f000 f8ba 	bl	80012b8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8001144:	f000 f8e6 	bl	8001314 <MX_TIM11_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 8001148:	4826      	ldr	r0, [pc, #152]	@ (80011e4 <main+0xcc>)
 800114a:	f002 fa2d 	bl	80035a8 <HAL_TIM_Base_Start>

  // Initialize the SSD1306 OLED display
  ssd1306_Init();
 800114e:	f000 f9b3 	bl	80014b8 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 fa1a 	bl	800158c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001158:	f000 fa30 	bl	80015bc <ssd1306_UpdateScreen>

  /* Infinite loop */
  while (1)
  {
    /* DS18B20 Temperature Conversion */
    Presence = DS18B20_Start();
 800115c:	f7ff ff28 	bl	8000fb0 <DS18B20_Start>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fddd 	bl	8001d24 <HAL_Delay>
    DS18B20_Write(0xCC); // Skip ROM command
 800116a:	20cc      	movs	r0, #204	@ 0xcc
 800116c:	f7ff ff50 	bl	8001010 <DS18B20_Write>
    DS18B20_Write(0x44); // Start temperature conversion
 8001170:	2044      	movs	r0, #68	@ 0x44
 8001172:	f7ff ff4d 	bl	8001010 <DS18B20_Write>
    HAL_Delay(800);      // Wait for conversion
 8001176:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800117a:	f000 fdd3 	bl	8001d24 <HAL_Delay>

    Presence = DS18B20_Start();
 800117e:	f7ff ff17 	bl	8000fb0 <DS18B20_Start>
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 fdcc 	bl	8001d24 <HAL_Delay>
    DS18B20_Write(0xCC); // Skip ROM command
 800118c:	20cc      	movs	r0, #204	@ 0xcc
 800118e:	f7ff ff3f 	bl	8001010 <DS18B20_Write>
    DS18B20_Write(0xBE); // Read scratchpad
 8001192:	20be      	movs	r0, #190	@ 0xbe
 8001194:	f7ff ff3c 	bl	8001010 <DS18B20_Write>

    Temp_byte1 = DS18B20_Read();
 8001198:	f7ff ff80 	bl	800109c <DS18B20_Read>
 800119c:	4603      	mov	r3, r0
 800119e:	72fb      	strb	r3, [r7, #11]
    Temp_byte2 = DS18B20_Read();
 80011a0:	f7ff ff7c 	bl	800109c <DS18B20_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	72bb      	strb	r3, [r7, #10]
    TEMP = (Temp_byte2 << 8) | Temp_byte1;
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	813b      	strh	r3, [r7, #8]
    Temperature = (float)TEMP / 16;
 80011b8:	893b      	ldrh	r3, [r7, #8]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]

    // Display the temperature on the OLED
    Display_Temp(Temperature);
 80011ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80011d2:	f7ff fe83 	bl	8000edc <Display_Temp>

    HAL_Delay(3000);
 80011d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80011da:	f000 fda3 	bl	8001d24 <HAL_Delay>
    Presence = DS18B20_Start();
 80011de:	bf00      	nop
 80011e0:	e7bc      	b.n	800115c <main+0x44>
 80011e2:	bf00      	nop
 80011e4:	20000244 	.word	0x20000244

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	@ 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2230      	movs	r2, #48	@ 0x30
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 f839 	bl	800426e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <SystemClock_Config+0xc8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <SystemClock_Config+0xc8>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SystemClock_Config+0xc8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <SystemClock_Config+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a20      	ldr	r2, [pc, #128]	@ (80012b4 <SystemClock_Config+0xcc>)
 8001232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <SystemClock_Config+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8001248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800124e:	2302      	movs	r3, #2
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8001252:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM       = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN       = 50;
 800125c:	2332      	movs	r3, #50	@ 0x32
 800125e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ       = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fcc7 	bl	8002c00 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001278:	f000 f8de 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	60fb      	str	r3, [r7, #12]
                                     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2101      	movs	r1, #1
 8001298:	4618      	mov	r0, r3
 800129a:	f001 ff29 	bl	80030f0 <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012a4:	f000 f8c8 	bl	8001438 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3750      	adds	r7, #80	@ 0x50
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  hi2c1.Instance             = I2C1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	@ (800130c <MX_I2C1_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <MX_I2C1_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_I2C1_Init+0x50>)
 80012f6:	f000 ffd5 	bl	80022a4 <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f89a 	bl	8001438 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001f0 	.word	0x200001f0
 800130c:	40005400 	.word	0x40005400
 8001310:	000186a0 	.word	0x000186a0

08001314 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  htim11.Instance               = TIM11;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_TIM11_Init+0x40>)
 800131a:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <MX_TIM11_Init+0x44>)
 800131c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler         = 50 - 1;
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <MX_TIM11_Init+0x40>)
 8001320:	2231      	movs	r2, #49	@ 0x31
 8001322:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_TIM11_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim11.Init.Period            = 0xffff - 1;
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <MX_TIM11_Init+0x40>)
 800132c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001330:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_TIM11_Init+0x40>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_TIM11_Init+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_TIM11_Init+0x40>)
 8001340:	f002 f8e2 	bl	8003508 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800134a:	f000 f875 	bl	8001438 <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000244 	.word	0x20000244
 8001358:	40014800 	.word	0x40014800

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a2c      	ldr	r2, [pc, #176]	@ (800142c <MX_GPIO_Init+0xd0>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <MX_GPIO_Init+0xd0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a25      	ldr	r2, [pc, #148]	@ (800142c <MX_GPIO_Init+0xd0>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <MX_GPIO_Init+0xd0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level for DS18B20 pin and LED */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | LD2_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2122      	movs	r1, #34	@ 0x22
 80013e6:	4812      	ldr	r0, [pc, #72]	@ (8001430 <MX_GPIO_Init+0xd4>)
 80013e8:	f000 ff42 	bl	8002270 <HAL_GPIO_WritePin>

  /* Configure user button pin if needed (example: B1_Pin) */
  GPIO_InitStruct.Pin  = B1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	480c      	ldr	r0, [pc, #48]	@ (8001434 <MX_GPIO_Init+0xd8>)
 8001404:	f000 fd98 	bl	8001f38 <HAL_GPIO_Init>

  /* Configure DS18B20 pin and LD2 as output (DS18B20 data line will be reconfigured dynamically) */
  GPIO_InitStruct.Pin   = GPIO_PIN_1 | LD2_Pin;
 8001408:	2322      	movs	r3, #34	@ 0x22
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_GPIO_Init+0xd4>)
 8001420:	f000 fd8a 	bl	8001f38 <HAL_GPIO_Init>

  /* Additional GPIO configuration (e.g., USART) if required */
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020800 	.word	0x40020800

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af04      	add	r7, sp, #16
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	2200      	movs	r2, #0
 8001470:	2178      	movs	r1, #120	@ 0x78
 8001472:	4803      	ldr	r0, [pc, #12]	@ (8001480 <ssd1306_WriteCommand+0x2c>)
 8001474:	f001 f85a 	bl	800252c <HAL_I2C_Mem_Write>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001f0 	.word	0x200001f0

08001484 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af04      	add	r7, sp, #16
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	9202      	str	r2, [sp, #8]
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	2240      	movs	r2, #64	@ 0x40
 80014a2:	2178      	movs	r1, #120	@ 0x78
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <ssd1306_WriteData+0x30>)
 80014a6:	f001 f841 	bl	800252c <HAL_I2C_Mem_Write>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001f0 	.word	0x200001f0

080014b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80014bc:	f7ff ffc2 	bl	8001444 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80014c0:	2064      	movs	r0, #100	@ 0x64
 80014c2:	f000 fc2f 	bl	8001d24 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f9d8 	bl	800187c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014cc:	2020      	movs	r0, #32
 80014ce:	f7ff ffc1 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ffbe 	bl	8001454 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014d8:	20b0      	movs	r0, #176	@ 0xb0
 80014da:	f7ff ffbb 	bl	8001454 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014de:	20c8      	movs	r0, #200	@ 0xc8
 80014e0:	f7ff ffb8 	bl	8001454 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ffb5 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014ea:	2010      	movs	r0, #16
 80014ec:	f7ff ffb2 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014f0:	2040      	movs	r0, #64	@ 0x40
 80014f2:	f7ff ffaf 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014f6:	20ff      	movs	r0, #255	@ 0xff
 80014f8:	f000 f9ac 	bl	8001854 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014fc:	20a1      	movs	r0, #161	@ 0xa1
 80014fe:	f7ff ffa9 	bl	8001454 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001502:	20a6      	movs	r0, #166	@ 0xa6
 8001504:	f7ff ffa6 	bl	8001454 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001508:	20a8      	movs	r0, #168	@ 0xa8
 800150a:	f7ff ffa3 	bl	8001454 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800150e:	203f      	movs	r0, #63	@ 0x3f
 8001510:	f7ff ffa0 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001514:	20a4      	movs	r0, #164	@ 0xa4
 8001516:	f7ff ff9d 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800151a:	20d3      	movs	r0, #211	@ 0xd3
 800151c:	f7ff ff9a 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff97 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001526:	20d5      	movs	r0, #213	@ 0xd5
 8001528:	f7ff ff94 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800152c:	20f0      	movs	r0, #240	@ 0xf0
 800152e:	f7ff ff91 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001532:	20d9      	movs	r0, #217	@ 0xd9
 8001534:	f7ff ff8e 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001538:	2022      	movs	r0, #34	@ 0x22
 800153a:	f7ff ff8b 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800153e:	20da      	movs	r0, #218	@ 0xda
 8001540:	f7ff ff88 	bl	8001454 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001544:	2012      	movs	r0, #18
 8001546:	f7ff ff85 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800154a:	20db      	movs	r0, #219	@ 0xdb
 800154c:	f7ff ff82 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001550:	2020      	movs	r0, #32
 8001552:	f7ff ff7f 	bl	8001454 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001556:	208d      	movs	r0, #141	@ 0x8d
 8001558:	f7ff ff7c 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800155c:	2014      	movs	r0, #20
 800155e:	f7ff ff79 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001562:	2001      	movs	r0, #1
 8001564:	f000 f98a 	bl	800187c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f80f 	bl	800158c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800156e:	f000 f825 	bl	80015bc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <ssd1306_Init+0xd0>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <ssd1306_Init+0xd0>)
 800157a:	2200      	movs	r2, #0
 800157c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800157e:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <ssd1306_Init+0xd0>)
 8001580:	2201      	movs	r2, #1
 8001582:	711a      	strb	r2, [r3, #4]
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000068c 	.word	0x2000068c

0800158c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <ssd1306_Fill+0x14>
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <ssd1306_Fill+0x16>
 80015a0:	23ff      	movs	r3, #255	@ 0xff
 80015a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a6:	4619      	mov	r1, r3
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <ssd1306_Fill+0x2c>)
 80015aa:	f002 fe60 	bl	800426e <memset>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000028c 	.word	0x2000028c

080015bc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	e016      	b.n	80015f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	3b50      	subs	r3, #80	@ 0x50
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff40 	bl	8001454 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff ff3d 	bl	8001454 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015da:	2010      	movs	r0, #16
 80015dc:	f7ff ff3a 	bl	8001454 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	01db      	lsls	r3, r3, #7
 80015e4:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <ssd1306_UpdateScreen+0x4c>)
 80015e6:	4413      	add	r3, r2
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff4a 	bl	8001484 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	3301      	adds	r3, #1
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d9e5      	bls.n	80015c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000028c 	.word	0x2000028c

0800160c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
 8001616:	460b      	mov	r3, r1
 8001618:	71bb      	strb	r3, [r7, #6]
 800161a:	4613      	mov	r3, r2
 800161c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db3d      	blt.n	80016a2 <ssd1306_DrawPixel+0x96>
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	2b3f      	cmp	r3, #63	@ 0x3f
 800162a:	d83a      	bhi.n	80016a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11a      	bne.n	8001668 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	b2d8      	uxtb	r0, r3
 800163a:	4603      	mov	r3, r0
 800163c:	01db      	lsls	r3, r3, #7
 800163e:	4413      	add	r3, r2
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <ssd1306_DrawPixel+0xa4>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	b25a      	sxtb	r2, r3
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b259      	sxtb	r1, r3
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4603      	mov	r3, r0
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	4413      	add	r3, r2
 8001660:	b2c9      	uxtb	r1, r1
 8001662:	4a13      	ldr	r2, [pc, #76]	@ (80016b0 <ssd1306_DrawPixel+0xa4>)
 8001664:	54d1      	strb	r1, [r2, r3]
 8001666:	e01d      	b.n	80016a4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	b2d8      	uxtb	r0, r3
 8001670:	4603      	mov	r3, r0
 8001672:	01db      	lsls	r3, r3, #7
 8001674:	4413      	add	r3, r2
 8001676:	4a0e      	ldr	r2, [pc, #56]	@ (80016b0 <ssd1306_DrawPixel+0xa4>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	b25a      	sxtb	r2, r3
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4013      	ands	r3, r2
 8001690:	b259      	sxtb	r1, r3
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	4603      	mov	r3, r0
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4413      	add	r3, r2
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <ssd1306_DrawPixel+0xa4>)
 800169e:	54d1      	strb	r1, [r2, r3]
 80016a0:	e000      	b.n	80016a4 <ssd1306_DrawPixel+0x98>
        return;
 80016a2:	bf00      	nop
    }
}
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	2000028c 	.word	0x2000028c

080016b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4638      	mov	r0, r7
 80016be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80016c2:	4623      	mov	r3, r4
 80016c4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b1f      	cmp	r3, #31
 80016ca:	d902      	bls.n	80016d2 <ssd1306_WriteChar+0x1e>
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80016d0:	d901      	bls.n	80016d6 <ssd1306_WriteChar+0x22>
        return 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e079      	b.n	80017ca <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <ssd1306_WriteChar+0x34>
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3b20      	subs	r3, #32
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	e000      	b.n	80016ea <ssd1306_WriteChar+0x36>
 80016e8:	783b      	ldrb	r3, [r7, #0]
 80016ea:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80016ec:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	4413      	add	r3, r2
 80016f6:	2b80      	cmp	r3, #128	@ 0x80
 80016f8:	dc06      	bgt.n	8001708 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80016fa:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 80016fc:	885b      	ldrh	r3, [r3, #2]
 80016fe:	461a      	mov	r2, r3
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001704:	2b40      	cmp	r3, #64	@ 0x40
 8001706:	dd01      	ble.n	800170c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001708:	2300      	movs	r3, #0
 800170a:	e05e      	b.n	80017ca <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	e04d      	b.n	80017ae <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3b20      	subs	r3, #32
 8001718:	7879      	ldrb	r1, [r7, #1]
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4619      	mov	r1, r3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e036      	b.n	80017a0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d013      	beq.n	800176a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b2d8      	uxtb	r0, r3
 8001750:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 8001752:	885b      	ldrh	r3, [r3, #2]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff ff52 	bl	800160c <ssd1306_DrawPixel>
 8001768:	e017      	b.n	800179a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b2d9      	uxtb	r1, r3
 8001786:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf0c      	ite	eq
 800178e:	2301      	moveq	r3, #1
 8001790:	2300      	movne	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	f7ff ff39 	bl	800160c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3301      	adds	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3c4      	bcc.n	8001732 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	787b      	ldrb	r3, [r7, #1]
 80017b0:	461a      	mov	r2, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d3ac      	bcc.n	8001712 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <ssd1306_WriteChar+0x120>)
 80017c6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000068c 	.word	0x2000068c

080017d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4638      	mov	r0, r7
 80017e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80017e6:	e013      	b.n	8001810 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	7818      	ldrb	r0, [r3, #0]
 80017ec:	7e3b      	ldrb	r3, [r7, #24]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	463b      	mov	r3, r7
 80017f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f4:	f7ff ff5e 	bl	80016b4 <ssd1306_WriteChar>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d002      	beq.n	800180a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	e008      	b.n	800181c <ssd1306_WriteString+0x44>
        }
        str++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e7      	bne.n	80017e8 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <ssd1306_SetCursor+0x2c>)
 800183a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <ssd1306_SetCursor+0x2c>)
 8001842:	805a      	strh	r2, [r3, #2]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	2000068c 	.word	0x2000068c

08001854 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800185e:	2381      	movs	r3, #129	@ 0x81
 8001860:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fdf5 	bl	8001454 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdf1 	bl	8001454 <ssd1306_WriteCommand>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800188c:	23af      	movs	r3, #175	@ 0xaf
 800188e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <ssd1306_SetDisplayOn+0x38>)
 8001892:	2201      	movs	r2, #1
 8001894:	715a      	strb	r2, [r3, #5]
 8001896:	e004      	b.n	80018a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001898:	23ae      	movs	r3, #174	@ 0xae
 800189a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <ssd1306_SetDisplayOn+0x38>)
 800189e:	2200      	movs	r2, #0
 80018a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fdd5 	bl	8001454 <ssd1306_WriteCommand>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000068c 	.word	0x2000068c

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 faea 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_I2C_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12c      	bne.n	8001984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001946:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <HAL_I2C_MspInit+0x8c>)
 8001964:	f000 fae8 	bl	8001f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 8001972:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001976:	6413      	str	r3, [r2, #64]	@ 0x40
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_I2C_MspInit+0x88>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40005400 	.word	0x40005400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_TIM_Base_MspInit+0x3c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_TIM_Base_MspInit+0x40>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_TIM_Base_MspInit+0x40>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_TIM_Base_MspInit+0x40>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40014800 	.word	0x40014800
 80019d8:	40023800 	.word	0x40023800

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <MemManage_Handler+0x4>

080019f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f957 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_kill>:

int _kill(int pid, int sig)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a54:	f002 fc5e 	bl	8004314 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2216      	movs	r2, #22
 8001a5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_exit>:

void _exit (int status)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a72:	f04f 31ff 	mov.w	r1, #4294967295
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffe7 	bl	8001a4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <_exit+0x12>

08001a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e00a      	b.n	8001aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a92:	f3af 8000 	nop.w
 8001a96:	4601      	mov	r1, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf0      	blt.n	8001a92 <_read+0x12>
  }

  return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e009      	b.n	8001ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf1      	blt.n	8001acc <_write+0x12>
  }
  return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_close>:

int _close(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_isatty>:

int _isatty(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f002 fbc2 	bl	8004314 <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20020000 	.word	0x20020000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	20000694 	.word	0x20000694
 8001bc4:	200007e8 	.word	0x200007e8

08001bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf0:	f7ff ffea 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f002 fb81 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fa7b 	bl	8001118 <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c30:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8001c34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c38:	200007e8 	.word	0x200007e8

08001c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <HAL_Init+0x40>)
 8001c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_Init+0x40>)
 8001c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <HAL_Init+0x40>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f931 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f808 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fe20 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_InitTick+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_InitTick+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f93b 	bl	8001f1e <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f000 f911 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <HAL_InitTick+0x5c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000698 	.word	0x20000698

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000698 	.word	0x20000698

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff47 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff5c 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffb0 	bl	8001e8c <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e159      	b.n	8002208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8148 	bne.w	8002202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d005      	beq.n	8001f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d130      	bne.n	8001fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d017      	beq.n	8002028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	69b9      	ldr	r1, [r7, #24]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a2 	beq.w	8002202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b57      	ldr	r3, [pc, #348]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	4a56      	ldr	r2, [pc, #344]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020da:	4a52      	ldr	r2, [pc, #328]	@ (8002224 <HAL_GPIO_Init+0x2ec>)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a49      	ldr	r2, [pc, #292]	@ (8002228 <HAL_GPIO_Init+0x2f0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d019      	beq.n	800213a <HAL_GPIO_Init+0x202>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a48      	ldr	r2, [pc, #288]	@ (800222c <HAL_GPIO_Init+0x2f4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0x1fe>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a47      	ldr	r2, [pc, #284]	@ (8002230 <HAL_GPIO_Init+0x2f8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00d      	beq.n	8002132 <HAL_GPIO_Init+0x1fa>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_GPIO_Init+0x2fc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x1f6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a45      	ldr	r2, [pc, #276]	@ (8002238 <HAL_GPIO_Init+0x300>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_GPIO_Init+0x1f2>
 8002126:	2304      	movs	r3, #4
 8002128:	e008      	b.n	800213c <HAL_GPIO_Init+0x204>
 800212a:	2307      	movs	r3, #7
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x204>
 800212e:	2303      	movs	r3, #3
 8002130:	e004      	b.n	800213c <HAL_GPIO_Init+0x204>
 8002132:	2302      	movs	r3, #2
 8002134:	e002      	b.n	800213c <HAL_GPIO_Init+0x204>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_GPIO_Init+0x204>
 800213a:	2300      	movs	r3, #0
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4093      	lsls	r3, r2
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214c:	4935      	ldr	r1, [pc, #212]	@ (8002224 <HAL_GPIO_Init+0x2ec>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <HAL_GPIO_Init+0x304>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217e:	4a2f      	ldr	r2, [pc, #188]	@ (800223c <HAL_GPIO_Init+0x304>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002184:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_GPIO_Init+0x304>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a8:	4a24      	ldr	r2, [pc, #144]	@ (800223c <HAL_GPIO_Init+0x304>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <HAL_GPIO_Init+0x304>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d2:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_GPIO_Init+0x304>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d8:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_GPIO_Init+0x304>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021fc:	4a0f      	ldr	r2, [pc, #60]	@ (800223c <HAL_GPIO_Init+0x304>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	f67f aea2 	bls.w	8001f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40013800 	.word	0x40013800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40021000 	.word	0x40021000
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e12b      	b.n	800250e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fb1c 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	@ 0x24
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002308:	f001 f8ea 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a81      	ldr	r2, [pc, #516]	@ (8002518 <HAL_I2C_Init+0x274>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d807      	bhi.n	8002328 <HAL_I2C_Init+0x84>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a80      	ldr	r2, [pc, #512]	@ (800251c <HAL_I2C_Init+0x278>)
 800231c:	4293      	cmp	r3, r2
 800231e:	bf94      	ite	ls
 8002320:	2301      	movls	r3, #1
 8002322:	2300      	movhi	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e006      	b.n	8002336 <HAL_I2C_Init+0x92>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a7d      	ldr	r2, [pc, #500]	@ (8002520 <HAL_I2C_Init+0x27c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	bf94      	ite	ls
 8002330:	2301      	movls	r3, #1
 8002332:	2300      	movhi	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0e7      	b.n	800250e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a78      	ldr	r2, [pc, #480]	@ (8002524 <HAL_I2C_Init+0x280>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a6a      	ldr	r2, [pc, #424]	@ (8002518 <HAL_I2C_Init+0x274>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d802      	bhi.n	8002378 <HAL_I2C_Init+0xd4>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3301      	adds	r3, #1
 8002376:	e009      	b.n	800238c <HAL_I2C_Init+0xe8>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	4a69      	ldr	r2, [pc, #420]	@ (8002528 <HAL_I2C_Init+0x284>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	3301      	adds	r3, #1
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800239e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	495c      	ldr	r1, [pc, #368]	@ (8002518 <HAL_I2C_Init+0x274>)
 80023a8:	428b      	cmp	r3, r1
 80023aa:	d819      	bhi.n	80023e0 <HAL_I2C_Init+0x13c>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e59      	subs	r1, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023c0:	400b      	ands	r3, r1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_I2C_Init+0x138>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1e59      	subs	r1, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023da:	e051      	b.n	8002480 <HAL_I2C_Init+0x1dc>
 80023dc:	2304      	movs	r3, #4
 80023de:	e04f      	b.n	8002480 <HAL_I2C_Init+0x1dc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d111      	bne.n	800240c <HAL_I2C_Init+0x168>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1e58      	subs	r0, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e012      	b.n	8002432 <HAL_I2C_Init+0x18e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e58      	subs	r0, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	0099      	lsls	r1, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Init+0x196>
 8002436:	2301      	movs	r3, #1
 8002438:	e022      	b.n	8002480 <HAL_I2C_Init+0x1dc>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10e      	bne.n	8002460 <HAL_I2C_Init+0x1bc>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e58      	subs	r0, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	440b      	add	r3, r1
 8002450:	fbb0 f3f3 	udiv	r3, r0, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800245e:	e00f      	b.n	8002480 <HAL_I2C_Init+0x1dc>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	0099      	lsls	r1, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	6809      	ldr	r1, [r1, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69da      	ldr	r2, [r3, #28]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6911      	ldr	r1, [r2, #16]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68d2      	ldr	r2, [r2, #12]
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	000186a0 	.word	0x000186a0
 800251c:	001e847f 	.word	0x001e847f
 8002520:	003d08ff 	.word	0x003d08ff
 8002524:	431bde83 	.word	0x431bde83
 8002528:	10624dd3 	.word	0x10624dd3

0800252c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002546:	f7ff fbe1 	bl	8001d0c <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b20      	cmp	r3, #32
 8002556:	f040 80d9 	bne.w	800270c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2319      	movs	r3, #25
 8002560:	2201      	movs	r2, #1
 8002562:	496d      	ldr	r1, [pc, #436]	@ (8002718 <HAL_I2C_Mem_Write+0x1ec>)
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f971 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
 8002572:	e0cc      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Mem_Write+0x56>
 800257e:	2302      	movs	r3, #2
 8002580:	e0c5      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d007      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2221      	movs	r2, #33	@ 0x21
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	@ 0x40
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_I2C_Mem_Write+0x1f0>)
 80025e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ea:	88f8      	ldrh	r0, [r7, #6]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	8979      	ldrh	r1, [r7, #10]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4603      	mov	r3, r0
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f890 	bl	8002720 <I2C_RequestMemoryWrite>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d052      	beq.n	80026ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e081      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa36 	bl	8002a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2b04      	cmp	r3, #4
 8002620:	d107      	bne.n	8002632 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e06b      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d11b      	bne.n	80026ac <HAL_I2C_Mem_Write+0x180>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d017      	beq.n	80026ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1aa      	bne.n	800260a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fa29 	bl	8002b10 <I2C_WaitOnBTFFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e016      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	00100002 	.word	0x00100002
 800271c:	ffff0000 	.word	0xffff0000

08002720 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	4608      	mov	r0, r1
 800272a:	4611      	mov	r1, r2
 800272c:	461a      	mov	r2, r3
 800272e:	4603      	mov	r3, r0
 8002730:	817b      	strh	r3, [r7, #10]
 8002732:	460b      	mov	r3, r1
 8002734:	813b      	strh	r3, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2200      	movs	r2, #0
 8002752:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f878 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002770:	d103      	bne.n	800277a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e05f      	b.n	800283e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800278c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	492d      	ldr	r1, [pc, #180]	@ (8002848 <I2C_RequestMemoryWrite+0x128>)
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f8d3 	bl	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e04c      	b.n	800283e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f95e 	bl	8002a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d107      	bne.n	80027e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e02b      	b.n	800283e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	e021      	b.n	800283c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f938 	bl	8002a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e005      	b.n	800283e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	00010002 	.word	0x00010002

0800284c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	e048      	b.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d044      	beq.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7ff fa51 	bl	8001d0c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d139      	bne.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0c1b      	lsrs	r3, r3, #16
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10d      	bne.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	e00c      	b.n	80028bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d116      	bne.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e023      	b.n	8002938 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10d      	bne.n	8002916 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	e00c      	b.n	8002930 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	43da      	mvns	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	429a      	cmp	r2, r3
 8002934:	d093      	beq.n	800285e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294e:	e071      	b.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d123      	bne.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e067      	b.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d041      	beq.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7ff f9ac 	bl	8001d0c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d302      	bcc.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d136      	bne.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10c      	bne.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e00b      	b.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e021      	b.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0c1b      	lsrs	r3, r3, #16
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10c      	bne.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e00b      	b.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f af6d 	bne.w	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a8c:	e034      	b.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f886 	bl	8002ba0 <I2C_IsAcknowledgeFailed>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e034      	b.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d028      	beq.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7ff f931 	bl	8001d0c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11d      	bne.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b80      	cmp	r3, #128	@ 0x80
 8002ac8:	d016      	beq.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b80      	cmp	r3, #128	@ 0x80
 8002b04:	d1c3      	bne.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1c:	e034      	b.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f83e 	bl	8002ba0 <I2C_IsAcknowledgeFailed>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e034      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d028      	beq.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff f8e9 	bl	8001d0c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11d      	bne.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d016      	beq.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e007      	b.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d1c3      	bne.n	8002b1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb6:	d11b      	bne.n	8002bf0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0204 	orr.w	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e267      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d075      	beq.n	8002d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c1e:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b85      	ldr	r3, [pc, #532]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d112      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b82      	ldr	r3, [pc, #520]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05b      	beq.n	8002d08 <HAL_RCC_OscConfig+0x108>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e242      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x74>
 8002c66:	4b76      	ldr	r3, [pc, #472]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a75      	ldr	r2, [pc, #468]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b70      	ldr	r3, [pc, #448]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6f      	ldr	r2, [pc, #444]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a68      	ldr	r2, [pc, #416]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f828 	bl	8001d0c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff f824 	bl	8001d0c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e207      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f814 	bl	8001d0c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7ff f810 	bl	8001d0c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f3      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xe8>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d16:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4937      	ldr	r1, [pc, #220]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe ffc9 	bl	8001d0c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe ffc5 	bl	8001d0c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a8      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4925      	ldr	r1, [pc, #148]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe ffa8 	bl	8001d0c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe ffa4 	bl	8001d0c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e187      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe ff88 	bl	8001d0c <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe ff84 	bl	8001d0c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e167      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe ff71 	bl	8001d0c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	e00e      	b.n	8002e4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe ff6d 	bl	8001d0c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d907      	bls.n	8002e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e150      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470000 	.word	0x42470000
 8002e48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b88      	ldr	r3, [pc, #544]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ea      	bne.n	8002e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8097 	beq.w	8002f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b81      	ldr	r3, [pc, #516]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e86:	4b7a      	ldr	r3, [pc, #488]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b77      	ldr	r3, [pc, #476]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b74      	ldr	r3, [pc, #464]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe ff2d 	bl	8001d0c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe ff29 	bl	8001d0c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e10c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x2ea>
 8002edc:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a63      	ldr	r2, [pc, #396]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x30c>
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efe:	4b5c      	ldr	r3, [pc, #368]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	4a5b      	ldr	r2, [pc, #364]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002f0c:	4b58      	ldr	r3, [pc, #352]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	4a57      	ldr	r2, [pc, #348]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f18:	4b55      	ldr	r3, [pc, #340]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	4a54      	ldr	r2, [pc, #336]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe feee 	bl	8001d0c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe feea 	bl	8001d0c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0cb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	4b49      	ldr	r3, [pc, #292]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RCC_OscConfig+0x334>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fed8 	bl	8001d0c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe fed4 	bl	8001d0c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0b5      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	4b3e      	ldr	r3, [pc, #248]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a1 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d05c      	beq.n	8003064 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d141      	bne.n	8003036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fea8 	bl	8001d0c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fea4 	bl	8001d0c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e087      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	491b      	ldr	r1, [pc, #108]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fe7d 	bl	8001d0c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fe79 	bl	8001d0c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e05c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x416>
 8003034:	e054      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fe66 	bl	8001d0c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fe62 	bl	8001d0c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x444>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e038      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x4ec>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d121      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fd94 	bl	8001d0c <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fd90 	bl	8001d0c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fcf4 	bl	8001c84 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08006ba8 	.word	0x08006ba8
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b094      	sub	sp, #80	@ 0x50
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d4:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d00d      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	f200 80e1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ee:	e0db      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b73      	ldr	r3, [pc, #460]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f4:	e0db      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b73      	ldr	r3, [pc, #460]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032fa:	e0d8      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b6f      	ldr	r3, [pc, #444]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b6d      	ldr	r3, [pc, #436]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
 800332a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4651      	mov	r1, sl
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4651      	mov	r1, sl
 8003370:	ebb2 0801 	subs.w	r8, r2, r1
 8003374:	4659      	mov	r1, fp
 8003376:	eb63 0901 	sbc.w	r9, r3, r1
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338e:	4690      	mov	r8, r2
 8003390:	4699      	mov	r9, r3
 8003392:	4623      	mov	r3, r4
 8003394:	eb18 0303 	adds.w	r3, r8, r3
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	462b      	mov	r3, r5
 800339c:	eb49 0303 	adc.w	r3, r9, r3
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ae:	4629      	mov	r1, r5
 80033b0:	024b      	lsls	r3, r1, #9
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b8:	4621      	mov	r1, r4
 80033ba:	024a      	lsls	r2, r1, #9
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033cc:	f7fd fbf4 	bl	8000bb8 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d8:	e058      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	4611      	mov	r1, r2
 80033e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	0159      	lsls	r1, r3, #5
 8003402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003406:	0150      	lsls	r0, r2, #5
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4641      	mov	r1, r8
 800340e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb63 0b01 	sbc.w	fp, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800342c:	ebb2 040a 	subs.w	r4, r2, sl
 8003430:	eb63 050b 	sbc.w	r5, r3, fp
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00eb      	lsls	r3, r5, #3
 800343e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	4643      	mov	r3, r8
 800344a:	18e3      	adds	r3, r4, r3
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	464b      	mov	r3, r9
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	f7fd fb9a 	bl	8000bb8 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800349c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3750      	adds	r7, #80	@ 0x50
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	08006bb8 	.word	0x08006bb8

08003508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e041      	b.n	800359e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe fa32 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f000 f888 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d001      	beq.n	80035c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e03c      	b.n	800363a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003648 <HAL_TIM_Base_Start+0xa0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d018      	beq.n	8003604 <HAL_TIM_Base_Start+0x5c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035da:	d013      	beq.n	8003604 <HAL_TIM_Base_Start+0x5c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	@ (800364c <HAL_TIM_Base_Start+0xa4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00e      	beq.n	8003604 <HAL_TIM_Base_Start+0x5c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	@ (8003650 <HAL_TIM_Base_Start+0xa8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_Base_Start+0x5c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <HAL_TIM_Base_Start+0xac>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_Base_Start+0x5c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a16      	ldr	r2, [pc, #88]	@ (8003658 <HAL_TIM_Base_Start+0xb0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40014000 	.word	0x40014000

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3a      	ldr	r2, [pc, #232]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d00b      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a37      	ldr	r2, [pc, #220]	@ (800375c <TIM_Base_SetConfig+0x100>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a36      	ldr	r2, [pc, #216]	@ (8003760 <TIM_Base_SetConfig+0x104>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a35      	ldr	r2, [pc, #212]	@ (8003764 <TIM_Base_SetConfig+0x108>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b4:	d017      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <TIM_Base_SetConfig+0x100>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <TIM_Base_SetConfig+0x104>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a26      	ldr	r2, [pc, #152]	@ (8003764 <TIM_Base_SetConfig+0x108>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <TIM_Base_SetConfig+0x10c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a24      	ldr	r2, [pc, #144]	@ (800376c <TIM_Base_SetConfig+0x110>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <TIM_Base_SetConfig+0x114>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0e      	ldr	r2, [pc, #56]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]
  }
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800

08003774 <__cvt>:
 8003774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	ec57 6b10 	vmov	r6, r7, d0
 800377c:	2f00      	cmp	r7, #0
 800377e:	460c      	mov	r4, r1
 8003780:	4619      	mov	r1, r3
 8003782:	463b      	mov	r3, r7
 8003784:	bfbb      	ittet	lt
 8003786:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800378a:	461f      	movlt	r7, r3
 800378c:	2300      	movge	r3, #0
 800378e:	232d      	movlt	r3, #45	@ 0x2d
 8003790:	700b      	strb	r3, [r1, #0]
 8003792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003794:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003798:	4691      	mov	r9, r2
 800379a:	f023 0820 	bic.w	r8, r3, #32
 800379e:	bfbc      	itt	lt
 80037a0:	4632      	movlt	r2, r6
 80037a2:	4616      	movlt	r6, r2
 80037a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037a8:	d005      	beq.n	80037b6 <__cvt+0x42>
 80037aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80037ae:	d100      	bne.n	80037b2 <__cvt+0x3e>
 80037b0:	3401      	adds	r4, #1
 80037b2:	2102      	movs	r1, #2
 80037b4:	e000      	b.n	80037b8 <__cvt+0x44>
 80037b6:	2103      	movs	r1, #3
 80037b8:	ab03      	add	r3, sp, #12
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	ab02      	add	r3, sp, #8
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	ec47 6b10 	vmov	d0, r6, r7
 80037c4:	4653      	mov	r3, sl
 80037c6:	4622      	mov	r2, r4
 80037c8:	f000 fe6a 	bl	80044a0 <_dtoa_r>
 80037cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80037d0:	4605      	mov	r5, r0
 80037d2:	d119      	bne.n	8003808 <__cvt+0x94>
 80037d4:	f019 0f01 	tst.w	r9, #1
 80037d8:	d00e      	beq.n	80037f8 <__cvt+0x84>
 80037da:	eb00 0904 	add.w	r9, r0, r4
 80037de:	2200      	movs	r2, #0
 80037e0:	2300      	movs	r3, #0
 80037e2:	4630      	mov	r0, r6
 80037e4:	4639      	mov	r1, r7
 80037e6:	f7fd f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80037ea:	b108      	cbz	r0, 80037f0 <__cvt+0x7c>
 80037ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80037f0:	2230      	movs	r2, #48	@ 0x30
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	454b      	cmp	r3, r9
 80037f6:	d31e      	bcc.n	8003836 <__cvt+0xc2>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80037fc:	1b5b      	subs	r3, r3, r5
 80037fe:	4628      	mov	r0, r5
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	b004      	add	sp, #16
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800380c:	eb00 0904 	add.w	r9, r0, r4
 8003810:	d1e5      	bne.n	80037de <__cvt+0x6a>
 8003812:	7803      	ldrb	r3, [r0, #0]
 8003814:	2b30      	cmp	r3, #48	@ 0x30
 8003816:	d10a      	bne.n	800382e <__cvt+0xba>
 8003818:	2200      	movs	r2, #0
 800381a:	2300      	movs	r3, #0
 800381c:	4630      	mov	r0, r6
 800381e:	4639      	mov	r1, r7
 8003820:	f7fd f95a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003824:	b918      	cbnz	r0, 800382e <__cvt+0xba>
 8003826:	f1c4 0401 	rsb	r4, r4, #1
 800382a:	f8ca 4000 	str.w	r4, [sl]
 800382e:	f8da 3000 	ldr.w	r3, [sl]
 8003832:	4499      	add	r9, r3
 8003834:	e7d3      	b.n	80037de <__cvt+0x6a>
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	9103      	str	r1, [sp, #12]
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e7d9      	b.n	80037f2 <__cvt+0x7e>

0800383e <__exponent>:
 800383e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003840:	2900      	cmp	r1, #0
 8003842:	bfba      	itte	lt
 8003844:	4249      	neglt	r1, r1
 8003846:	232d      	movlt	r3, #45	@ 0x2d
 8003848:	232b      	movge	r3, #43	@ 0x2b
 800384a:	2909      	cmp	r1, #9
 800384c:	7002      	strb	r2, [r0, #0]
 800384e:	7043      	strb	r3, [r0, #1]
 8003850:	dd29      	ble.n	80038a6 <__exponent+0x68>
 8003852:	f10d 0307 	add.w	r3, sp, #7
 8003856:	461d      	mov	r5, r3
 8003858:	270a      	movs	r7, #10
 800385a:	461a      	mov	r2, r3
 800385c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003860:	fb07 1416 	mls	r4, r7, r6, r1
 8003864:	3430      	adds	r4, #48	@ 0x30
 8003866:	f802 4c01 	strb.w	r4, [r2, #-1]
 800386a:	460c      	mov	r4, r1
 800386c:	2c63      	cmp	r4, #99	@ 0x63
 800386e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003872:	4631      	mov	r1, r6
 8003874:	dcf1      	bgt.n	800385a <__exponent+0x1c>
 8003876:	3130      	adds	r1, #48	@ 0x30
 8003878:	1e94      	subs	r4, r2, #2
 800387a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800387e:	1c41      	adds	r1, r0, #1
 8003880:	4623      	mov	r3, r4
 8003882:	42ab      	cmp	r3, r5
 8003884:	d30a      	bcc.n	800389c <__exponent+0x5e>
 8003886:	f10d 0309 	add.w	r3, sp, #9
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	42ac      	cmp	r4, r5
 800388e:	bf88      	it	hi
 8003890:	2300      	movhi	r3, #0
 8003892:	3302      	adds	r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	1a18      	subs	r0, r3, r0
 8003898:	b003      	add	sp, #12
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80038a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80038a4:	e7ed      	b.n	8003882 <__exponent+0x44>
 80038a6:	2330      	movs	r3, #48	@ 0x30
 80038a8:	3130      	adds	r1, #48	@ 0x30
 80038aa:	7083      	strb	r3, [r0, #2]
 80038ac:	70c1      	strb	r1, [r0, #3]
 80038ae:	1d03      	adds	r3, r0, #4
 80038b0:	e7f1      	b.n	8003896 <__exponent+0x58>
	...

080038b4 <_printf_float>:
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b8:	b08d      	sub	sp, #52	@ 0x34
 80038ba:	460c      	mov	r4, r1
 80038bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80038c0:	4616      	mov	r6, r2
 80038c2:	461f      	mov	r7, r3
 80038c4:	4605      	mov	r5, r0
 80038c6:	f000 fcdb 	bl	8004280 <_localeconv_r>
 80038ca:	6803      	ldr	r3, [r0, #0]
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fc fcd6 	bl	8000280 <strlen>
 80038d4:	2300      	movs	r3, #0
 80038d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80038d8:	f8d8 3000 	ldr.w	r3, [r8]
 80038dc:	9005      	str	r0, [sp, #20]
 80038de:	3307      	adds	r3, #7
 80038e0:	f023 0307 	bic.w	r3, r3, #7
 80038e4:	f103 0208 	add.w	r2, r3, #8
 80038e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80038ec:	f8d4 b000 	ldr.w	fp, [r4]
 80038f0:	f8c8 2000 	str.w	r2, [r8]
 80038f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80038f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80038fc:	9307      	str	r3, [sp, #28]
 80038fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8003902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800390a:	4b9c      	ldr	r3, [pc, #624]	@ (8003b7c <_printf_float+0x2c8>)
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	f7fd f914 	bl	8000b3c <__aeabi_dcmpun>
 8003914:	bb70      	cbnz	r0, 8003974 <_printf_float+0xc0>
 8003916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800391a:	4b98      	ldr	r3, [pc, #608]	@ (8003b7c <_printf_float+0x2c8>)
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	f7fd f8ee 	bl	8000b00 <__aeabi_dcmple>
 8003924:	bb30      	cbnz	r0, 8003974 <_printf_float+0xc0>
 8003926:	2200      	movs	r2, #0
 8003928:	2300      	movs	r3, #0
 800392a:	4640      	mov	r0, r8
 800392c:	4649      	mov	r1, r9
 800392e:	f7fd f8dd 	bl	8000aec <__aeabi_dcmplt>
 8003932:	b110      	cbz	r0, 800393a <_printf_float+0x86>
 8003934:	232d      	movs	r3, #45	@ 0x2d
 8003936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800393a:	4a91      	ldr	r2, [pc, #580]	@ (8003b80 <_printf_float+0x2cc>)
 800393c:	4b91      	ldr	r3, [pc, #580]	@ (8003b84 <_printf_float+0x2d0>)
 800393e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003942:	bf94      	ite	ls
 8003944:	4690      	movls	r8, r2
 8003946:	4698      	movhi	r8, r3
 8003948:	2303      	movs	r3, #3
 800394a:	6123      	str	r3, [r4, #16]
 800394c:	f02b 0304 	bic.w	r3, fp, #4
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	f04f 0900 	mov.w	r9, #0
 8003956:	9700      	str	r7, [sp, #0]
 8003958:	4633      	mov	r3, r6
 800395a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800395c:	4621      	mov	r1, r4
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f9d2 	bl	8003d08 <_printf_common>
 8003964:	3001      	adds	r0, #1
 8003966:	f040 808d 	bne.w	8003a84 <_printf_float+0x1d0>
 800396a:	f04f 30ff 	mov.w	r0, #4294967295
 800396e:	b00d      	add	sp, #52	@ 0x34
 8003970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	4640      	mov	r0, r8
 800397a:	4649      	mov	r1, r9
 800397c:	f7fd f8de 	bl	8000b3c <__aeabi_dcmpun>
 8003980:	b140      	cbz	r0, 8003994 <_printf_float+0xe0>
 8003982:	464b      	mov	r3, r9
 8003984:	2b00      	cmp	r3, #0
 8003986:	bfbc      	itt	lt
 8003988:	232d      	movlt	r3, #45	@ 0x2d
 800398a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800398e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b88 <_printf_float+0x2d4>)
 8003990:	4b7e      	ldr	r3, [pc, #504]	@ (8003b8c <_printf_float+0x2d8>)
 8003992:	e7d4      	b.n	800393e <_printf_float+0x8a>
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800399a:	9206      	str	r2, [sp, #24]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	d13b      	bne.n	8003a18 <_printf_float+0x164>
 80039a0:	2306      	movs	r3, #6
 80039a2:	6063      	str	r3, [r4, #4]
 80039a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80039a8:	2300      	movs	r3, #0
 80039aa:	6022      	str	r2, [r4, #0]
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80039b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80039b4:	ab09      	add	r3, sp, #36	@ 0x24
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	6861      	ldr	r1, [r4, #4]
 80039ba:	ec49 8b10 	vmov	d0, r8, r9
 80039be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7ff fed6 	bl	8003774 <__cvt>
 80039c8:	9b06      	ldr	r3, [sp, #24]
 80039ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80039cc:	2b47      	cmp	r3, #71	@ 0x47
 80039ce:	4680      	mov	r8, r0
 80039d0:	d129      	bne.n	8003a26 <_printf_float+0x172>
 80039d2:	1cc8      	adds	r0, r1, #3
 80039d4:	db02      	blt.n	80039dc <_printf_float+0x128>
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	4299      	cmp	r1, r3
 80039da:	dd41      	ble.n	8003a60 <_printf_float+0x1ac>
 80039dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80039e0:	fa5f fa8a 	uxtb.w	sl, sl
 80039e4:	3901      	subs	r1, #1
 80039e6:	4652      	mov	r2, sl
 80039e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80039ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80039ee:	f7ff ff26 	bl	800383e <__exponent>
 80039f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	4681      	mov	r9, r0
 80039fa:	6123      	str	r3, [r4, #16]
 80039fc:	dc02      	bgt.n	8003a04 <_printf_float+0x150>
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	07d2      	lsls	r2, r2, #31
 8003a02:	d501      	bpl.n	8003a08 <_printf_float+0x154>
 8003a04:	3301      	adds	r3, #1
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0a2      	beq.n	8003956 <_printf_float+0xa2>
 8003a10:	232d      	movs	r3, #45	@ 0x2d
 8003a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a16:	e79e      	b.n	8003956 <_printf_float+0xa2>
 8003a18:	9a06      	ldr	r2, [sp, #24]
 8003a1a:	2a47      	cmp	r2, #71	@ 0x47
 8003a1c:	d1c2      	bne.n	80039a4 <_printf_float+0xf0>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1c0      	bne.n	80039a4 <_printf_float+0xf0>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e7bd      	b.n	80039a2 <_printf_float+0xee>
 8003a26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a2a:	d9db      	bls.n	80039e4 <_printf_float+0x130>
 8003a2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a30:	d118      	bne.n	8003a64 <_printf_float+0x1b0>
 8003a32:	2900      	cmp	r1, #0
 8003a34:	6863      	ldr	r3, [r4, #4]
 8003a36:	dd0b      	ble.n	8003a50 <_printf_float+0x19c>
 8003a38:	6121      	str	r1, [r4, #16]
 8003a3a:	b913      	cbnz	r3, 8003a42 <_printf_float+0x18e>
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	07d0      	lsls	r0, r2, #31
 8003a40:	d502      	bpl.n	8003a48 <_printf_float+0x194>
 8003a42:	3301      	adds	r3, #1
 8003a44:	440b      	add	r3, r1
 8003a46:	6123      	str	r3, [r4, #16]
 8003a48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a4a:	f04f 0900 	mov.w	r9, #0
 8003a4e:	e7db      	b.n	8003a08 <_printf_float+0x154>
 8003a50:	b913      	cbnz	r3, 8003a58 <_printf_float+0x1a4>
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	07d2      	lsls	r2, r2, #31
 8003a56:	d501      	bpl.n	8003a5c <_printf_float+0x1a8>
 8003a58:	3302      	adds	r3, #2
 8003a5a:	e7f4      	b.n	8003a46 <_printf_float+0x192>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e7f2      	b.n	8003a46 <_printf_float+0x192>
 8003a60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a66:	4299      	cmp	r1, r3
 8003a68:	db05      	blt.n	8003a76 <_printf_float+0x1c2>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	6121      	str	r1, [r4, #16]
 8003a6e:	07d8      	lsls	r0, r3, #31
 8003a70:	d5ea      	bpl.n	8003a48 <_printf_float+0x194>
 8003a72:	1c4b      	adds	r3, r1, #1
 8003a74:	e7e7      	b.n	8003a46 <_printf_float+0x192>
 8003a76:	2900      	cmp	r1, #0
 8003a78:	bfd4      	ite	le
 8003a7a:	f1c1 0202 	rsble	r2, r1, #2
 8003a7e:	2201      	movgt	r2, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	e7e0      	b.n	8003a46 <_printf_float+0x192>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	055a      	lsls	r2, r3, #21
 8003a88:	d407      	bmi.n	8003a9a <_printf_float+0x1e6>
 8003a8a:	6923      	ldr	r3, [r4, #16]
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	d12b      	bne.n	8003af0 <_printf_float+0x23c>
 8003a98:	e767      	b.n	800396a <_printf_float+0xb6>
 8003a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a9e:	f240 80dd 	bls.w	8003c5c <_printf_float+0x3a8>
 8003aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f7fd f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d033      	beq.n	8003b1a <_printf_float+0x266>
 8003ab2:	4a37      	ldr	r2, [pc, #220]	@ (8003b90 <_printf_float+0x2dc>)
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b8      	blx	r7
 8003abc:	3001      	adds	r0, #1
 8003abe:	f43f af54 	beq.w	800396a <_printf_float+0xb6>
 8003ac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ac6:	4543      	cmp	r3, r8
 8003ac8:	db02      	blt.n	8003ad0 <_printf_float+0x21c>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	07d8      	lsls	r0, r3, #31
 8003ace:	d50f      	bpl.n	8003af0 <_printf_float+0x23c>
 8003ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ad4:	4631      	mov	r1, r6
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	47b8      	blx	r7
 8003ada:	3001      	adds	r0, #1
 8003adc:	f43f af45 	beq.w	800396a <_printf_float+0xb6>
 8003ae0:	f04f 0900 	mov.w	r9, #0
 8003ae4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ae8:	f104 0a1a 	add.w	sl, r4, #26
 8003aec:	45c8      	cmp	r8, r9
 8003aee:	dc09      	bgt.n	8003b04 <_printf_float+0x250>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	079b      	lsls	r3, r3, #30
 8003af4:	f100 8103 	bmi.w	8003cfe <_printf_float+0x44a>
 8003af8:	68e0      	ldr	r0, [r4, #12]
 8003afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003afc:	4298      	cmp	r0, r3
 8003afe:	bfb8      	it	lt
 8003b00:	4618      	movlt	r0, r3
 8003b02:	e734      	b.n	800396e <_printf_float+0xba>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4652      	mov	r2, sl
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	47b8      	blx	r7
 8003b0e:	3001      	adds	r0, #1
 8003b10:	f43f af2b 	beq.w	800396a <_printf_float+0xb6>
 8003b14:	f109 0901 	add.w	r9, r9, #1
 8003b18:	e7e8      	b.n	8003aec <_printf_float+0x238>
 8003b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	dc39      	bgt.n	8003b94 <_printf_float+0x2e0>
 8003b20:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <_printf_float+0x2dc>)
 8003b22:	2301      	movs	r3, #1
 8003b24:	4631      	mov	r1, r6
 8003b26:	4628      	mov	r0, r5
 8003b28:	47b8      	blx	r7
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	f43f af1d 	beq.w	800396a <_printf_float+0xb6>
 8003b30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003b34:	ea59 0303 	orrs.w	r3, r9, r3
 8003b38:	d102      	bne.n	8003b40 <_printf_float+0x28c>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	07d9      	lsls	r1, r3, #31
 8003b3e:	d5d7      	bpl.n	8003af0 <_printf_float+0x23c>
 8003b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b44:	4631      	mov	r1, r6
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b8      	blx	r7
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f af0d 	beq.w	800396a <_printf_float+0xb6>
 8003b50:	f04f 0a00 	mov.w	sl, #0
 8003b54:	f104 0b1a 	add.w	fp, r4, #26
 8003b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b5a:	425b      	negs	r3, r3
 8003b5c:	4553      	cmp	r3, sl
 8003b5e:	dc01      	bgt.n	8003b64 <_printf_float+0x2b0>
 8003b60:	464b      	mov	r3, r9
 8003b62:	e793      	b.n	8003a8c <_printf_float+0x1d8>
 8003b64:	2301      	movs	r3, #1
 8003b66:	465a      	mov	r2, fp
 8003b68:	4631      	mov	r1, r6
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	47b8      	blx	r7
 8003b6e:	3001      	adds	r0, #1
 8003b70:	f43f aefb 	beq.w	800396a <_printf_float+0xb6>
 8003b74:	f10a 0a01 	add.w	sl, sl, #1
 8003b78:	e7ee      	b.n	8003b58 <_printf_float+0x2a4>
 8003b7a:	bf00      	nop
 8003b7c:	7fefffff 	.word	0x7fefffff
 8003b80:	08006bc0 	.word	0x08006bc0
 8003b84:	08006bc4 	.word	0x08006bc4
 8003b88:	08006bc8 	.word	0x08006bc8
 8003b8c:	08006bcc 	.word	0x08006bcc
 8003b90:	08006bd0 	.word	0x08006bd0
 8003b94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b9a:	4553      	cmp	r3, sl
 8003b9c:	bfa8      	it	ge
 8003b9e:	4653      	movge	r3, sl
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	4699      	mov	r9, r3
 8003ba4:	dc36      	bgt.n	8003c14 <_printf_float+0x360>
 8003ba6:	f04f 0b00 	mov.w	fp, #0
 8003baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bae:	f104 021a 	add.w	r2, r4, #26
 8003bb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bb4:	9306      	str	r3, [sp, #24]
 8003bb6:	eba3 0309 	sub.w	r3, r3, r9
 8003bba:	455b      	cmp	r3, fp
 8003bbc:	dc31      	bgt.n	8003c22 <_printf_float+0x36e>
 8003bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc0:	459a      	cmp	sl, r3
 8003bc2:	dc3a      	bgt.n	8003c3a <_printf_float+0x386>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	07da      	lsls	r2, r3, #31
 8003bc8:	d437      	bmi.n	8003c3a <_printf_float+0x386>
 8003bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bcc:	ebaa 0903 	sub.w	r9, sl, r3
 8003bd0:	9b06      	ldr	r3, [sp, #24]
 8003bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8003bd6:	4599      	cmp	r9, r3
 8003bd8:	bfa8      	it	ge
 8003bda:	4699      	movge	r9, r3
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	dc33      	bgt.n	8003c4a <_printf_float+0x396>
 8003be2:	f04f 0800 	mov.w	r8, #0
 8003be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bea:	f104 0b1a 	add.w	fp, r4, #26
 8003bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8003bf4:	eba3 0309 	sub.w	r3, r3, r9
 8003bf8:	4543      	cmp	r3, r8
 8003bfa:	f77f af79 	ble.w	8003af0 <_printf_float+0x23c>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	465a      	mov	r2, fp
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	47b8      	blx	r7
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f43f aeae 	beq.w	800396a <_printf_float+0xb6>
 8003c0e:	f108 0801 	add.w	r8, r8, #1
 8003c12:	e7ec      	b.n	8003bee <_printf_float+0x33a>
 8003c14:	4642      	mov	r2, r8
 8003c16:	4631      	mov	r1, r6
 8003c18:	4628      	mov	r0, r5
 8003c1a:	47b8      	blx	r7
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d1c2      	bne.n	8003ba6 <_printf_float+0x2f2>
 8003c20:	e6a3      	b.n	800396a <_printf_float+0xb6>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4631      	mov	r1, r6
 8003c26:	4628      	mov	r0, r5
 8003c28:	9206      	str	r2, [sp, #24]
 8003c2a:	47b8      	blx	r7
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	f43f ae9c 	beq.w	800396a <_printf_float+0xb6>
 8003c32:	9a06      	ldr	r2, [sp, #24]
 8003c34:	f10b 0b01 	add.w	fp, fp, #1
 8003c38:	e7bb      	b.n	8003bb2 <_printf_float+0x2fe>
 8003c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c3e:	4631      	mov	r1, r6
 8003c40:	4628      	mov	r0, r5
 8003c42:	47b8      	blx	r7
 8003c44:	3001      	adds	r0, #1
 8003c46:	d1c0      	bne.n	8003bca <_printf_float+0x316>
 8003c48:	e68f      	b.n	800396a <_printf_float+0xb6>
 8003c4a:	9a06      	ldr	r2, [sp, #24]
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	4442      	add	r2, r8
 8003c50:	4631      	mov	r1, r6
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b8      	blx	r7
 8003c56:	3001      	adds	r0, #1
 8003c58:	d1c3      	bne.n	8003be2 <_printf_float+0x32e>
 8003c5a:	e686      	b.n	800396a <_printf_float+0xb6>
 8003c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c60:	f1ba 0f01 	cmp.w	sl, #1
 8003c64:	dc01      	bgt.n	8003c6a <_printf_float+0x3b6>
 8003c66:	07db      	lsls	r3, r3, #31
 8003c68:	d536      	bpl.n	8003cd8 <_printf_float+0x424>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4628      	mov	r0, r5
 8003c72:	47b8      	blx	r7
 8003c74:	3001      	adds	r0, #1
 8003c76:	f43f ae78 	beq.w	800396a <_printf_float+0xb6>
 8003c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b8      	blx	r7
 8003c84:	3001      	adds	r0, #1
 8003c86:	f43f ae70 	beq.w	800396a <_printf_float+0xb6>
 8003c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2300      	movs	r3, #0
 8003c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c96:	f7fc ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c9a:	b9c0      	cbnz	r0, 8003cce <_printf_float+0x41a>
 8003c9c:	4653      	mov	r3, sl
 8003c9e:	f108 0201 	add.w	r2, r8, #1
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b8      	blx	r7
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d10c      	bne.n	8003cc6 <_printf_float+0x412>
 8003cac:	e65d      	b.n	800396a <_printf_float+0xb6>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	465a      	mov	r2, fp
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	47b8      	blx	r7
 8003cb8:	3001      	adds	r0, #1
 8003cba:	f43f ae56 	beq.w	800396a <_printf_float+0xb6>
 8003cbe:	f108 0801 	add.w	r8, r8, #1
 8003cc2:	45d0      	cmp	r8, sl
 8003cc4:	dbf3      	blt.n	8003cae <_printf_float+0x3fa>
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ccc:	e6df      	b.n	8003a8e <_printf_float+0x1da>
 8003cce:	f04f 0800 	mov.w	r8, #0
 8003cd2:	f104 0b1a 	add.w	fp, r4, #26
 8003cd6:	e7f4      	b.n	8003cc2 <_printf_float+0x40e>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4642      	mov	r2, r8
 8003cdc:	e7e1      	b.n	8003ca2 <_printf_float+0x3ee>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	464a      	mov	r2, r9
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	f43f ae3e 	beq.w	800396a <_printf_float+0xb6>
 8003cee:	f108 0801 	add.w	r8, r8, #1
 8003cf2:	68e3      	ldr	r3, [r4, #12]
 8003cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003cf6:	1a5b      	subs	r3, r3, r1
 8003cf8:	4543      	cmp	r3, r8
 8003cfa:	dcf0      	bgt.n	8003cde <_printf_float+0x42a>
 8003cfc:	e6fc      	b.n	8003af8 <_printf_float+0x244>
 8003cfe:	f04f 0800 	mov.w	r8, #0
 8003d02:	f104 0919 	add.w	r9, r4, #25
 8003d06:	e7f4      	b.n	8003cf2 <_printf_float+0x43e>

08003d08 <_printf_common>:
 8003d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	4698      	mov	r8, r3
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bfb8      	it	lt
 8003d1c:	4613      	movlt	r3, r2
 8003d1e:	6033      	str	r3, [r6, #0]
 8003d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d24:	4607      	mov	r7, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	b10a      	cbz	r2, 8003d2e <_printf_common+0x26>
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	0699      	lsls	r1, r3, #26
 8003d32:	bf42      	ittt	mi
 8003d34:	6833      	ldrmi	r3, [r6, #0]
 8003d36:	3302      	addmi	r3, #2
 8003d38:	6033      	strmi	r3, [r6, #0]
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	f015 0506 	ands.w	r5, r5, #6
 8003d40:	d106      	bne.n	8003d50 <_printf_common+0x48>
 8003d42:	f104 0a19 	add.w	sl, r4, #25
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	6832      	ldr	r2, [r6, #0]
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	dc26      	bgt.n	8003d9e <_printf_common+0x96>
 8003d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	3b00      	subs	r3, #0
 8003d58:	bf18      	it	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	0692      	lsls	r2, r2, #26
 8003d5e:	d42b      	bmi.n	8003db8 <_printf_common+0xb0>
 8003d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d64:	4641      	mov	r1, r8
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c8      	blx	r9
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d01e      	beq.n	8003dac <_printf_common+0xa4>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	6922      	ldr	r2, [r4, #16]
 8003d72:	f003 0306 	and.w	r3, r3, #6
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf02      	ittt	eq
 8003d7a:	68e5      	ldreq	r5, [r4, #12]
 8003d7c:	6833      	ldreq	r3, [r6, #0]
 8003d7e:	1aed      	subeq	r5, r5, r3
 8003d80:	68a3      	ldr	r3, [r4, #8]
 8003d82:	bf0c      	ite	eq
 8003d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d88:	2500      	movne	r5, #0
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfc4      	itt	gt
 8003d8e:	1a9b      	subgt	r3, r3, r2
 8003d90:	18ed      	addgt	r5, r5, r3
 8003d92:	2600      	movs	r6, #0
 8003d94:	341a      	adds	r4, #26
 8003d96:	42b5      	cmp	r5, r6
 8003d98:	d11a      	bne.n	8003dd0 <_printf_common+0xc8>
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e008      	b.n	8003db0 <_printf_common+0xa8>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4652      	mov	r2, sl
 8003da2:	4641      	mov	r1, r8
 8003da4:	4638      	mov	r0, r7
 8003da6:	47c8      	blx	r9
 8003da8:	3001      	adds	r0, #1
 8003daa:	d103      	bne.n	8003db4 <_printf_common+0xac>
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db4:	3501      	adds	r5, #1
 8003db6:	e7c6      	b.n	8003d46 <_printf_common+0x3e>
 8003db8:	18e1      	adds	r1, r4, r3
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	2030      	movs	r0, #48	@ 0x30
 8003dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dc2:	4422      	add	r2, r4
 8003dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003dcc:	3302      	adds	r3, #2
 8003dce:	e7c7      	b.n	8003d60 <_printf_common+0x58>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c8      	blx	r9
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d0e6      	beq.n	8003dac <_printf_common+0xa4>
 8003dde:	3601      	adds	r6, #1
 8003de0:	e7d9      	b.n	8003d96 <_printf_common+0x8e>
	...

08003de4 <_printf_i>:
 8003de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	7e0f      	ldrb	r7, [r1, #24]
 8003dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dec:	2f78      	cmp	r7, #120	@ 0x78
 8003dee:	4691      	mov	r9, r2
 8003df0:	4680      	mov	r8, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	469a      	mov	sl, r3
 8003df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dfa:	d807      	bhi.n	8003e0c <_printf_i+0x28>
 8003dfc:	2f62      	cmp	r7, #98	@ 0x62
 8003dfe:	d80a      	bhi.n	8003e16 <_printf_i+0x32>
 8003e00:	2f00      	cmp	r7, #0
 8003e02:	f000 80d2 	beq.w	8003faa <_printf_i+0x1c6>
 8003e06:	2f58      	cmp	r7, #88	@ 0x58
 8003e08:	f000 80b9 	beq.w	8003f7e <_printf_i+0x19a>
 8003e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e14:	e03a      	b.n	8003e8c <_printf_i+0xa8>
 8003e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e1a:	2b15      	cmp	r3, #21
 8003e1c:	d8f6      	bhi.n	8003e0c <_printf_i+0x28>
 8003e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e24 <_printf_i+0x40>)
 8003e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003e91 	.word	0x08003e91
 8003e2c:	08003e0d 	.word	0x08003e0d
 8003e30:	08003e0d 	.word	0x08003e0d
 8003e34:	08003e0d 	.word	0x08003e0d
 8003e38:	08003e0d 	.word	0x08003e0d
 8003e3c:	08003e91 	.word	0x08003e91
 8003e40:	08003e0d 	.word	0x08003e0d
 8003e44:	08003e0d 	.word	0x08003e0d
 8003e48:	08003e0d 	.word	0x08003e0d
 8003e4c:	08003e0d 	.word	0x08003e0d
 8003e50:	08003f91 	.word	0x08003f91
 8003e54:	08003ebb 	.word	0x08003ebb
 8003e58:	08003f4b 	.word	0x08003f4b
 8003e5c:	08003e0d 	.word	0x08003e0d
 8003e60:	08003e0d 	.word	0x08003e0d
 8003e64:	08003fb3 	.word	0x08003fb3
 8003e68:	08003e0d 	.word	0x08003e0d
 8003e6c:	08003ebb 	.word	0x08003ebb
 8003e70:	08003e0d 	.word	0x08003e0d
 8003e74:	08003e0d 	.word	0x08003e0d
 8003e78:	08003f53 	.word	0x08003f53
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	1d1a      	adds	r2, r3, #4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6032      	str	r2, [r6, #0]
 8003e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e09d      	b.n	8003fcc <_printf_i+0x1e8>
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	6031      	str	r1, [r6, #0]
 8003e98:	0606      	lsls	r6, r0, #24
 8003e9a:	d501      	bpl.n	8003ea0 <_printf_i+0xbc>
 8003e9c:	681d      	ldr	r5, [r3, #0]
 8003e9e:	e003      	b.n	8003ea8 <_printf_i+0xc4>
 8003ea0:	0645      	lsls	r5, r0, #25
 8003ea2:	d5fb      	bpl.n	8003e9c <_printf_i+0xb8>
 8003ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ea8:	2d00      	cmp	r5, #0
 8003eaa:	da03      	bge.n	8003eb4 <_printf_i+0xd0>
 8003eac:	232d      	movs	r3, #45	@ 0x2d
 8003eae:	426d      	negs	r5, r5
 8003eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb4:	4859      	ldr	r0, [pc, #356]	@ (800401c <_printf_i+0x238>)
 8003eb6:	230a      	movs	r3, #10
 8003eb8:	e011      	b.n	8003ede <_printf_i+0xfa>
 8003eba:	6821      	ldr	r1, [r4, #0]
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	0608      	lsls	r0, r1, #24
 8003ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ec4:	d402      	bmi.n	8003ecc <_printf_i+0xe8>
 8003ec6:	0649      	lsls	r1, r1, #25
 8003ec8:	bf48      	it	mi
 8003eca:	b2ad      	uxthmi	r5, r5
 8003ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ece:	4853      	ldr	r0, [pc, #332]	@ (800401c <_printf_i+0x238>)
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	bf14      	ite	ne
 8003ed4:	230a      	movne	r3, #10
 8003ed6:	2308      	moveq	r3, #8
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ede:	6866      	ldr	r6, [r4, #4]
 8003ee0:	60a6      	str	r6, [r4, #8]
 8003ee2:	2e00      	cmp	r6, #0
 8003ee4:	bfa2      	ittt	ge
 8003ee6:	6821      	ldrge	r1, [r4, #0]
 8003ee8:	f021 0104 	bicge.w	r1, r1, #4
 8003eec:	6021      	strge	r1, [r4, #0]
 8003eee:	b90d      	cbnz	r5, 8003ef4 <_printf_i+0x110>
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	d04b      	beq.n	8003f8c <_printf_i+0x1a8>
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003efa:	fb03 5711 	mls	r7, r3, r1, r5
 8003efe:	5dc7      	ldrb	r7, [r0, r7]
 8003f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f04:	462f      	mov	r7, r5
 8003f06:	42bb      	cmp	r3, r7
 8003f08:	460d      	mov	r5, r1
 8003f0a:	d9f4      	bls.n	8003ef6 <_printf_i+0x112>
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d10b      	bne.n	8003f28 <_printf_i+0x144>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	07df      	lsls	r7, r3, #31
 8003f14:	d508      	bpl.n	8003f28 <_printf_i+0x144>
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	6861      	ldr	r1, [r4, #4]
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	bfde      	ittt	le
 8003f1e:	2330      	movle	r3, #48	@ 0x30
 8003f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f28:	1b92      	subs	r2, r2, r6
 8003f2a:	6122      	str	r2, [r4, #16]
 8003f2c:	f8cd a000 	str.w	sl, [sp]
 8003f30:	464b      	mov	r3, r9
 8003f32:	aa03      	add	r2, sp, #12
 8003f34:	4621      	mov	r1, r4
 8003f36:	4640      	mov	r0, r8
 8003f38:	f7ff fee6 	bl	8003d08 <_printf_common>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d14a      	bne.n	8003fd6 <_printf_i+0x1f2>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	b004      	add	sp, #16
 8003f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	f043 0320 	orr.w	r3, r3, #32
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	4833      	ldr	r0, [pc, #204]	@ (8004020 <_printf_i+0x23c>)
 8003f54:	2778      	movs	r7, #120	@ 0x78
 8003f56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	6831      	ldr	r1, [r6, #0]
 8003f5e:	061f      	lsls	r7, r3, #24
 8003f60:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f64:	d402      	bmi.n	8003f6c <_printf_i+0x188>
 8003f66:	065f      	lsls	r7, r3, #25
 8003f68:	bf48      	it	mi
 8003f6a:	b2ad      	uxthmi	r5, r5
 8003f6c:	6031      	str	r1, [r6, #0]
 8003f6e:	07d9      	lsls	r1, r3, #31
 8003f70:	bf44      	itt	mi
 8003f72:	f043 0320 	orrmi.w	r3, r3, #32
 8003f76:	6023      	strmi	r3, [r4, #0]
 8003f78:	b11d      	cbz	r5, 8003f82 <_printf_i+0x19e>
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	e7ac      	b.n	8003ed8 <_printf_i+0xf4>
 8003f7e:	4827      	ldr	r0, [pc, #156]	@ (800401c <_printf_i+0x238>)
 8003f80:	e7e9      	b.n	8003f56 <_printf_i+0x172>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f023 0320 	bic.w	r3, r3, #32
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	e7f6      	b.n	8003f7a <_printf_i+0x196>
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	e7bd      	b.n	8003f0c <_printf_i+0x128>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	6825      	ldr	r5, [r4, #0]
 8003f94:	6961      	ldr	r1, [r4, #20]
 8003f96:	1d18      	adds	r0, r3, #4
 8003f98:	6030      	str	r0, [r6, #0]
 8003f9a:	062e      	lsls	r6, r5, #24
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	d501      	bpl.n	8003fa4 <_printf_i+0x1c0>
 8003fa0:	6019      	str	r1, [r3, #0]
 8003fa2:	e002      	b.n	8003faa <_printf_i+0x1c6>
 8003fa4:	0668      	lsls	r0, r5, #25
 8003fa6:	d5fb      	bpl.n	8003fa0 <_printf_i+0x1bc>
 8003fa8:	8019      	strh	r1, [r3, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	4616      	mov	r6, r2
 8003fb0:	e7bc      	b.n	8003f2c <_printf_i+0x148>
 8003fb2:	6833      	ldr	r3, [r6, #0]
 8003fb4:	1d1a      	adds	r2, r3, #4
 8003fb6:	6032      	str	r2, [r6, #0]
 8003fb8:	681e      	ldr	r6, [r3, #0]
 8003fba:	6862      	ldr	r2, [r4, #4]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7fc f90e 	bl	80001e0 <memchr>
 8003fc4:	b108      	cbz	r0, 8003fca <_printf_i+0x1e6>
 8003fc6:	1b80      	subs	r0, r0, r6
 8003fc8:	6060      	str	r0, [r4, #4]
 8003fca:	6863      	ldr	r3, [r4, #4]
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fd4:	e7aa      	b.n	8003f2c <_printf_i+0x148>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	47d0      	blx	sl
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d0ad      	beq.n	8003f40 <_printf_i+0x15c>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	079b      	lsls	r3, r3, #30
 8003fe8:	d413      	bmi.n	8004012 <_printf_i+0x22e>
 8003fea:	68e0      	ldr	r0, [r4, #12]
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	4298      	cmp	r0, r3
 8003ff0:	bfb8      	it	lt
 8003ff2:	4618      	movlt	r0, r3
 8003ff4:	e7a6      	b.n	8003f44 <_printf_i+0x160>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	47d0      	blx	sl
 8004000:	3001      	adds	r0, #1
 8004002:	d09d      	beq.n	8003f40 <_printf_i+0x15c>
 8004004:	3501      	adds	r5, #1
 8004006:	68e3      	ldr	r3, [r4, #12]
 8004008:	9903      	ldr	r1, [sp, #12]
 800400a:	1a5b      	subs	r3, r3, r1
 800400c:	42ab      	cmp	r3, r5
 800400e:	dcf2      	bgt.n	8003ff6 <_printf_i+0x212>
 8004010:	e7eb      	b.n	8003fea <_printf_i+0x206>
 8004012:	2500      	movs	r5, #0
 8004014:	f104 0619 	add.w	r6, r4, #25
 8004018:	e7f5      	b.n	8004006 <_printf_i+0x222>
 800401a:	bf00      	nop
 800401c:	08006bd2 	.word	0x08006bd2
 8004020:	08006be3 	.word	0x08006be3

08004024 <std>:
 8004024:	2300      	movs	r3, #0
 8004026:	b510      	push	{r4, lr}
 8004028:	4604      	mov	r4, r0
 800402a:	e9c0 3300 	strd	r3, r3, [r0]
 800402e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004032:	6083      	str	r3, [r0, #8]
 8004034:	8181      	strh	r1, [r0, #12]
 8004036:	6643      	str	r3, [r0, #100]	@ 0x64
 8004038:	81c2      	strh	r2, [r0, #14]
 800403a:	6183      	str	r3, [r0, #24]
 800403c:	4619      	mov	r1, r3
 800403e:	2208      	movs	r2, #8
 8004040:	305c      	adds	r0, #92	@ 0x5c
 8004042:	f000 f914 	bl	800426e <memset>
 8004046:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <std+0x58>)
 8004048:	6263      	str	r3, [r4, #36]	@ 0x24
 800404a:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <std+0x5c>)
 800404c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <std+0x60>)
 8004050:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <std+0x64>)
 8004054:	6323      	str	r3, [r4, #48]	@ 0x30
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <std+0x68>)
 8004058:	6224      	str	r4, [r4, #32]
 800405a:	429c      	cmp	r4, r3
 800405c:	d006      	beq.n	800406c <std+0x48>
 800405e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004062:	4294      	cmp	r4, r2
 8004064:	d002      	beq.n	800406c <std+0x48>
 8004066:	33d0      	adds	r3, #208	@ 0xd0
 8004068:	429c      	cmp	r4, r3
 800406a:	d105      	bne.n	8004078 <std+0x54>
 800406c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004074:	f000 b978 	b.w	8004368 <__retarget_lock_init_recursive>
 8004078:	bd10      	pop	{r4, pc}
 800407a:	bf00      	nop
 800407c:	080041e9 	.word	0x080041e9
 8004080:	0800420b 	.word	0x0800420b
 8004084:	08004243 	.word	0x08004243
 8004088:	08004267 	.word	0x08004267
 800408c:	2000069c 	.word	0x2000069c

08004090 <stdio_exit_handler>:
 8004090:	4a02      	ldr	r2, [pc, #8]	@ (800409c <stdio_exit_handler+0xc>)
 8004092:	4903      	ldr	r1, [pc, #12]	@ (80040a0 <stdio_exit_handler+0x10>)
 8004094:	4803      	ldr	r0, [pc, #12]	@ (80040a4 <stdio_exit_handler+0x14>)
 8004096:	f000 b869 	b.w	800416c <_fwalk_sglue>
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c
 80040a0:	08005ce5 	.word	0x08005ce5
 80040a4:	2000001c 	.word	0x2000001c

080040a8 <cleanup_stdio>:
 80040a8:	6841      	ldr	r1, [r0, #4]
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <cleanup_stdio+0x34>)
 80040ac:	4299      	cmp	r1, r3
 80040ae:	b510      	push	{r4, lr}
 80040b0:	4604      	mov	r4, r0
 80040b2:	d001      	beq.n	80040b8 <cleanup_stdio+0x10>
 80040b4:	f001 fe16 	bl	8005ce4 <_fflush_r>
 80040b8:	68a1      	ldr	r1, [r4, #8]
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <cleanup_stdio+0x38>)
 80040bc:	4299      	cmp	r1, r3
 80040be:	d002      	beq.n	80040c6 <cleanup_stdio+0x1e>
 80040c0:	4620      	mov	r0, r4
 80040c2:	f001 fe0f 	bl	8005ce4 <_fflush_r>
 80040c6:	68e1      	ldr	r1, [r4, #12]
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <cleanup_stdio+0x3c>)
 80040ca:	4299      	cmp	r1, r3
 80040cc:	d004      	beq.n	80040d8 <cleanup_stdio+0x30>
 80040ce:	4620      	mov	r0, r4
 80040d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d4:	f001 be06 	b.w	8005ce4 <_fflush_r>
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	2000069c 	.word	0x2000069c
 80040e0:	20000704 	.word	0x20000704
 80040e4:	2000076c 	.word	0x2000076c

080040e8 <global_stdio_init.part.0>:
 80040e8:	b510      	push	{r4, lr}
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <global_stdio_init.part.0+0x30>)
 80040ec:	4c0b      	ldr	r4, [pc, #44]	@ (800411c <global_stdio_init.part.0+0x34>)
 80040ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004120 <global_stdio_init.part.0+0x38>)
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	4620      	mov	r0, r4
 80040f4:	2200      	movs	r2, #0
 80040f6:	2104      	movs	r1, #4
 80040f8:	f7ff ff94 	bl	8004024 <std>
 80040fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004100:	2201      	movs	r2, #1
 8004102:	2109      	movs	r1, #9
 8004104:	f7ff ff8e 	bl	8004024 <std>
 8004108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800410c:	2202      	movs	r2, #2
 800410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004112:	2112      	movs	r1, #18
 8004114:	f7ff bf86 	b.w	8004024 <std>
 8004118:	200007d4 	.word	0x200007d4
 800411c:	2000069c 	.word	0x2000069c
 8004120:	08004091 	.word	0x08004091

08004124 <__sfp_lock_acquire>:
 8004124:	4801      	ldr	r0, [pc, #4]	@ (800412c <__sfp_lock_acquire+0x8>)
 8004126:	f000 b920 	b.w	800436a <__retarget_lock_acquire_recursive>
 800412a:	bf00      	nop
 800412c:	200007dd 	.word	0x200007dd

08004130 <__sfp_lock_release>:
 8004130:	4801      	ldr	r0, [pc, #4]	@ (8004138 <__sfp_lock_release+0x8>)
 8004132:	f000 b91b 	b.w	800436c <__retarget_lock_release_recursive>
 8004136:	bf00      	nop
 8004138:	200007dd 	.word	0x200007dd

0800413c <__sinit>:
 800413c:	b510      	push	{r4, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	f7ff fff0 	bl	8004124 <__sfp_lock_acquire>
 8004144:	6a23      	ldr	r3, [r4, #32]
 8004146:	b11b      	cbz	r3, 8004150 <__sinit+0x14>
 8004148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414c:	f7ff bff0 	b.w	8004130 <__sfp_lock_release>
 8004150:	4b04      	ldr	r3, [pc, #16]	@ (8004164 <__sinit+0x28>)
 8004152:	6223      	str	r3, [r4, #32]
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <__sinit+0x2c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f5      	bne.n	8004148 <__sinit+0xc>
 800415c:	f7ff ffc4 	bl	80040e8 <global_stdio_init.part.0>
 8004160:	e7f2      	b.n	8004148 <__sinit+0xc>
 8004162:	bf00      	nop
 8004164:	080040a9 	.word	0x080040a9
 8004168:	200007d4 	.word	0x200007d4

0800416c <_fwalk_sglue>:
 800416c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004170:	4607      	mov	r7, r0
 8004172:	4688      	mov	r8, r1
 8004174:	4614      	mov	r4, r2
 8004176:	2600      	movs	r6, #0
 8004178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800417c:	f1b9 0901 	subs.w	r9, r9, #1
 8004180:	d505      	bpl.n	800418e <_fwalk_sglue+0x22>
 8004182:	6824      	ldr	r4, [r4, #0]
 8004184:	2c00      	cmp	r4, #0
 8004186:	d1f7      	bne.n	8004178 <_fwalk_sglue+0xc>
 8004188:	4630      	mov	r0, r6
 800418a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d907      	bls.n	80041a4 <_fwalk_sglue+0x38>
 8004194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004198:	3301      	adds	r3, #1
 800419a:	d003      	beq.n	80041a4 <_fwalk_sglue+0x38>
 800419c:	4629      	mov	r1, r5
 800419e:	4638      	mov	r0, r7
 80041a0:	47c0      	blx	r8
 80041a2:	4306      	orrs	r6, r0
 80041a4:	3568      	adds	r5, #104	@ 0x68
 80041a6:	e7e9      	b.n	800417c <_fwalk_sglue+0x10>

080041a8 <siprintf>:
 80041a8:	b40e      	push	{r1, r2, r3}
 80041aa:	b500      	push	{lr}
 80041ac:	b09c      	sub	sp, #112	@ 0x70
 80041ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80041b0:	9002      	str	r0, [sp, #8]
 80041b2:	9006      	str	r0, [sp, #24]
 80041b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041b8:	4809      	ldr	r0, [pc, #36]	@ (80041e0 <siprintf+0x38>)
 80041ba:	9107      	str	r1, [sp, #28]
 80041bc:	9104      	str	r1, [sp, #16]
 80041be:	4909      	ldr	r1, [pc, #36]	@ (80041e4 <siprintf+0x3c>)
 80041c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c4:	9105      	str	r1, [sp, #20]
 80041c6:	6800      	ldr	r0, [r0, #0]
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	a902      	add	r1, sp, #8
 80041cc:	f001 fc0a 	bl	80059e4 <_svfiprintf_r>
 80041d0:	9b02      	ldr	r3, [sp, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	b01c      	add	sp, #112	@ 0x70
 80041d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041dc:	b003      	add	sp, #12
 80041de:	4770      	bx	lr
 80041e0:	20000018 	.word	0x20000018
 80041e4:	ffff0208 	.word	0xffff0208

080041e8 <__sread>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	460c      	mov	r4, r1
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	f000 f86c 	bl	80042cc <_read_r>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	bfab      	itete	ge
 80041f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041fa:	89a3      	ldrhlt	r3, [r4, #12]
 80041fc:	181b      	addge	r3, r3, r0
 80041fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004202:	bfac      	ite	ge
 8004204:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004206:	81a3      	strhlt	r3, [r4, #12]
 8004208:	bd10      	pop	{r4, pc}

0800420a <__swrite>:
 800420a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420e:	461f      	mov	r7, r3
 8004210:	898b      	ldrh	r3, [r1, #12]
 8004212:	05db      	lsls	r3, r3, #23
 8004214:	4605      	mov	r5, r0
 8004216:	460c      	mov	r4, r1
 8004218:	4616      	mov	r6, r2
 800421a:	d505      	bpl.n	8004228 <__swrite+0x1e>
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	2302      	movs	r3, #2
 8004222:	2200      	movs	r2, #0
 8004224:	f000 f840 	bl	80042a8 <_lseek_r>
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800422e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	4628      	mov	r0, r5
 800423a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800423e:	f000 b857 	b.w	80042f0 <_write_r>

08004242 <__sseek>:
 8004242:	b510      	push	{r4, lr}
 8004244:	460c      	mov	r4, r1
 8004246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800424a:	f000 f82d 	bl	80042a8 <_lseek_r>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	bf15      	itete	ne
 8004254:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004256:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800425a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800425e:	81a3      	strheq	r3, [r4, #12]
 8004260:	bf18      	it	ne
 8004262:	81a3      	strhne	r3, [r4, #12]
 8004264:	bd10      	pop	{r4, pc}

08004266 <__sclose>:
 8004266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426a:	f000 b80d 	b.w	8004288 <_close_r>

0800426e <memset>:
 800426e:	4402      	add	r2, r0
 8004270:	4603      	mov	r3, r0
 8004272:	4293      	cmp	r3, r2
 8004274:	d100      	bne.n	8004278 <memset+0xa>
 8004276:	4770      	bx	lr
 8004278:	f803 1b01 	strb.w	r1, [r3], #1
 800427c:	e7f9      	b.n	8004272 <memset+0x4>
	...

08004280 <_localeconv_r>:
 8004280:	4800      	ldr	r0, [pc, #0]	@ (8004284 <_localeconv_r+0x4>)
 8004282:	4770      	bx	lr
 8004284:	20000158 	.word	0x20000158

08004288 <_close_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4d06      	ldr	r5, [pc, #24]	@ (80042a4 <_close_r+0x1c>)
 800428c:	2300      	movs	r3, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fd fc2d 	bl	8001af2 <_close>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_close_r+0x1a>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_close_r+0x1a>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	200007d8 	.word	0x200007d8

080042a8 <_lseek_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4d07      	ldr	r5, [pc, #28]	@ (80042c8 <_lseek_r+0x20>)
 80042ac:	4604      	mov	r4, r0
 80042ae:	4608      	mov	r0, r1
 80042b0:	4611      	mov	r1, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fd fc42 	bl	8001b40 <_lseek>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_lseek_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_lseek_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	200007d8 	.word	0x200007d8

080042cc <_read_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4d07      	ldr	r5, [pc, #28]	@ (80042ec <_read_r+0x20>)
 80042d0:	4604      	mov	r4, r0
 80042d2:	4608      	mov	r0, r1
 80042d4:	4611      	mov	r1, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	602a      	str	r2, [r5, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f7fd fbd0 	bl	8001a80 <_read>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d102      	bne.n	80042ea <_read_r+0x1e>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	b103      	cbz	r3, 80042ea <_read_r+0x1e>
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	200007d8 	.word	0x200007d8

080042f0 <_write_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d07      	ldr	r5, [pc, #28]	@ (8004310 <_write_r+0x20>)
 80042f4:	4604      	mov	r4, r0
 80042f6:	4608      	mov	r0, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	602a      	str	r2, [r5, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7fd fbdb 	bl	8001aba <_write>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_write_r+0x1e>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_write_r+0x1e>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	200007d8 	.word	0x200007d8

08004314 <__errno>:
 8004314:	4b01      	ldr	r3, [pc, #4]	@ (800431c <__errno+0x8>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000018 	.word	0x20000018

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4d0d      	ldr	r5, [pc, #52]	@ (8004358 <__libc_init_array+0x38>)
 8004324:	4c0d      	ldr	r4, [pc, #52]	@ (800435c <__libc_init_array+0x3c>)
 8004326:	1b64      	subs	r4, r4, r5
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	2600      	movs	r6, #0
 800432c:	42a6      	cmp	r6, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	4d0b      	ldr	r5, [pc, #44]	@ (8004360 <__libc_init_array+0x40>)
 8004332:	4c0c      	ldr	r4, [pc, #48]	@ (8004364 <__libc_init_array+0x44>)
 8004334:	f002 f866 	bl	8006404 <_init>
 8004338:	1b64      	subs	r4, r4, r5
 800433a:	10a4      	asrs	r4, r4, #2
 800433c:	2600      	movs	r6, #0
 800433e:	42a6      	cmp	r6, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f855 3b04 	ldr.w	r3, [r5], #4
 8004348:	4798      	blx	r3
 800434a:	3601      	adds	r6, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004352:	4798      	blx	r3
 8004354:	3601      	adds	r6, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	08006f38 	.word	0x08006f38
 800435c:	08006f38 	.word	0x08006f38
 8004360:	08006f38 	.word	0x08006f38
 8004364:	08006f3c 	.word	0x08006f3c

08004368 <__retarget_lock_init_recursive>:
 8004368:	4770      	bx	lr

0800436a <__retarget_lock_acquire_recursive>:
 800436a:	4770      	bx	lr

0800436c <__retarget_lock_release_recursive>:
 800436c:	4770      	bx	lr

0800436e <memcpy>:
 800436e:	440a      	add	r2, r1
 8004370:	4291      	cmp	r1, r2
 8004372:	f100 33ff 	add.w	r3, r0, #4294967295
 8004376:	d100      	bne.n	800437a <memcpy+0xc>
 8004378:	4770      	bx	lr
 800437a:	b510      	push	{r4, lr}
 800437c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004384:	4291      	cmp	r1, r2
 8004386:	d1f9      	bne.n	800437c <memcpy+0xe>
 8004388:	bd10      	pop	{r4, pc}

0800438a <quorem>:
 800438a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438e:	6903      	ldr	r3, [r0, #16]
 8004390:	690c      	ldr	r4, [r1, #16]
 8004392:	42a3      	cmp	r3, r4
 8004394:	4607      	mov	r7, r0
 8004396:	db7e      	blt.n	8004496 <quorem+0x10c>
 8004398:	3c01      	subs	r4, #1
 800439a:	f101 0814 	add.w	r8, r1, #20
 800439e:	00a3      	lsls	r3, r4, #2
 80043a0:	f100 0514 	add.w	r5, r0, #20
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043b4:	3301      	adds	r3, #1
 80043b6:	429a      	cmp	r2, r3
 80043b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80043c0:	d32e      	bcc.n	8004420 <quorem+0x96>
 80043c2:	f04f 0a00 	mov.w	sl, #0
 80043c6:	46c4      	mov	ip, r8
 80043c8:	46ae      	mov	lr, r5
 80043ca:	46d3      	mov	fp, sl
 80043cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043d0:	b298      	uxth	r0, r3
 80043d2:	fb06 a000 	mla	r0, r6, r0, sl
 80043d6:	0c02      	lsrs	r2, r0, #16
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	fb06 2303 	mla	r3, r6, r3, r2
 80043de:	f8de 2000 	ldr.w	r2, [lr]
 80043e2:	b280      	uxth	r0, r0
 80043e4:	b292      	uxth	r2, r2
 80043e6:	1a12      	subs	r2, r2, r0
 80043e8:	445a      	add	r2, fp
 80043ea:	f8de 0000 	ldr.w	r0, [lr]
 80043ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80043f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80043fc:	b292      	uxth	r2, r2
 80043fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004402:	45e1      	cmp	r9, ip
 8004404:	f84e 2b04 	str.w	r2, [lr], #4
 8004408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800440c:	d2de      	bcs.n	80043cc <quorem+0x42>
 800440e:	9b00      	ldr	r3, [sp, #0]
 8004410:	58eb      	ldr	r3, [r5, r3]
 8004412:	b92b      	cbnz	r3, 8004420 <quorem+0x96>
 8004414:	9b01      	ldr	r3, [sp, #4]
 8004416:	3b04      	subs	r3, #4
 8004418:	429d      	cmp	r5, r3
 800441a:	461a      	mov	r2, r3
 800441c:	d32f      	bcc.n	800447e <quorem+0xf4>
 800441e:	613c      	str	r4, [r7, #16]
 8004420:	4638      	mov	r0, r7
 8004422:	f001 f97b 	bl	800571c <__mcmp>
 8004426:	2800      	cmp	r0, #0
 8004428:	db25      	blt.n	8004476 <quorem+0xec>
 800442a:	4629      	mov	r1, r5
 800442c:	2000      	movs	r0, #0
 800442e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004432:	f8d1 c000 	ldr.w	ip, [r1]
 8004436:	fa1f fe82 	uxth.w	lr, r2
 800443a:	fa1f f38c 	uxth.w	r3, ip
 800443e:	eba3 030e 	sub.w	r3, r3, lr
 8004442:	4403      	add	r3, r0
 8004444:	0c12      	lsrs	r2, r2, #16
 8004446:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800444a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800444e:	b29b      	uxth	r3, r3
 8004450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004454:	45c1      	cmp	r9, r8
 8004456:	f841 3b04 	str.w	r3, [r1], #4
 800445a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800445e:	d2e6      	bcs.n	800442e <quorem+0xa4>
 8004460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004468:	b922      	cbnz	r2, 8004474 <quorem+0xea>
 800446a:	3b04      	subs	r3, #4
 800446c:	429d      	cmp	r5, r3
 800446e:	461a      	mov	r2, r3
 8004470:	d30b      	bcc.n	800448a <quorem+0x100>
 8004472:	613c      	str	r4, [r7, #16]
 8004474:	3601      	adds	r6, #1
 8004476:	4630      	mov	r0, r6
 8004478:	b003      	add	sp, #12
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	3b04      	subs	r3, #4
 8004482:	2a00      	cmp	r2, #0
 8004484:	d1cb      	bne.n	800441e <quorem+0x94>
 8004486:	3c01      	subs	r4, #1
 8004488:	e7c6      	b.n	8004418 <quorem+0x8e>
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	3b04      	subs	r3, #4
 800448e:	2a00      	cmp	r2, #0
 8004490:	d1ef      	bne.n	8004472 <quorem+0xe8>
 8004492:	3c01      	subs	r4, #1
 8004494:	e7ea      	b.n	800446c <quorem+0xe2>
 8004496:	2000      	movs	r0, #0
 8004498:	e7ee      	b.n	8004478 <quorem+0xee>
 800449a:	0000      	movs	r0, r0
 800449c:	0000      	movs	r0, r0
	...

080044a0 <_dtoa_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	69c7      	ldr	r7, [r0, #28]
 80044a6:	b099      	sub	sp, #100	@ 0x64
 80044a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80044ac:	ec55 4b10 	vmov	r4, r5, d0
 80044b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80044b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80044b4:	4683      	mov	fp, r0
 80044b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80044b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80044ba:	b97f      	cbnz	r7, 80044dc <_dtoa_r+0x3c>
 80044bc:	2010      	movs	r0, #16
 80044be:	f000 fdfd 	bl	80050bc <malloc>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80044c8:	b920      	cbnz	r0, 80044d4 <_dtoa_r+0x34>
 80044ca:	4ba7      	ldr	r3, [pc, #668]	@ (8004768 <_dtoa_r+0x2c8>)
 80044cc:	21ef      	movs	r1, #239	@ 0xef
 80044ce:	48a7      	ldr	r0, [pc, #668]	@ (800476c <_dtoa_r+0x2cc>)
 80044d0:	f001 fc5a 	bl	8005d88 <__assert_func>
 80044d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044d8:	6007      	str	r7, [r0, #0]
 80044da:	60c7      	str	r7, [r0, #12]
 80044dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	b159      	cbz	r1, 80044fc <_dtoa_r+0x5c>
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	604a      	str	r2, [r1, #4]
 80044e8:	2301      	movs	r3, #1
 80044ea:	4093      	lsls	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
 80044ee:	4658      	mov	r0, fp
 80044f0:	f000 feda 	bl	80052a8 <_Bfree>
 80044f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	1e2b      	subs	r3, r5, #0
 80044fe:	bfb9      	ittee	lt
 8004500:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004504:	9303      	strlt	r3, [sp, #12]
 8004506:	2300      	movge	r3, #0
 8004508:	6033      	strge	r3, [r6, #0]
 800450a:	9f03      	ldr	r7, [sp, #12]
 800450c:	4b98      	ldr	r3, [pc, #608]	@ (8004770 <_dtoa_r+0x2d0>)
 800450e:	bfbc      	itt	lt
 8004510:	2201      	movlt	r2, #1
 8004512:	6032      	strlt	r2, [r6, #0]
 8004514:	43bb      	bics	r3, r7
 8004516:	d112      	bne.n	800453e <_dtoa_r+0x9e>
 8004518:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800451a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004524:	4323      	orrs	r3, r4
 8004526:	f000 854d 	beq.w	8004fc4 <_dtoa_r+0xb24>
 800452a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800452c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004784 <_dtoa_r+0x2e4>
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 854f 	beq.w	8004fd4 <_dtoa_r+0xb34>
 8004536:	f10a 0303 	add.w	r3, sl, #3
 800453a:	f000 bd49 	b.w	8004fd0 <_dtoa_r+0xb30>
 800453e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	ec51 0b17 	vmov	r0, r1, d7
 8004548:	2300      	movs	r3, #0
 800454a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800454e:	f7fc fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004552:	4680      	mov	r8, r0
 8004554:	b158      	cbz	r0, 800456e <_dtoa_r+0xce>
 8004556:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004558:	2301      	movs	r3, #1
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800455e:	b113      	cbz	r3, 8004566 <_dtoa_r+0xc6>
 8004560:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004562:	4b84      	ldr	r3, [pc, #528]	@ (8004774 <_dtoa_r+0x2d4>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004788 <_dtoa_r+0x2e8>
 800456a:	f000 bd33 	b.w	8004fd4 <_dtoa_r+0xb34>
 800456e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004572:	aa16      	add	r2, sp, #88	@ 0x58
 8004574:	a917      	add	r1, sp, #92	@ 0x5c
 8004576:	4658      	mov	r0, fp
 8004578:	f001 f980 	bl	800587c <__d2b>
 800457c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004580:	4681      	mov	r9, r0
 8004582:	2e00      	cmp	r6, #0
 8004584:	d077      	beq.n	8004676 <_dtoa_r+0x1d6>
 8004586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004588:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800458c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004594:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004598:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800459c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045a0:	4619      	mov	r1, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	4b74      	ldr	r3, [pc, #464]	@ (8004778 <_dtoa_r+0x2d8>)
 80045a6:	f7fb fe77 	bl	8000298 <__aeabi_dsub>
 80045aa:	a369      	add	r3, pc, #420	@ (adr r3, 8004750 <_dtoa_r+0x2b0>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fc f82a 	bl	8000608 <__aeabi_dmul>
 80045b4:	a368      	add	r3, pc, #416	@ (adr r3, 8004758 <_dtoa_r+0x2b8>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb fe6f 	bl	800029c <__adddf3>
 80045be:	4604      	mov	r4, r0
 80045c0:	4630      	mov	r0, r6
 80045c2:	460d      	mov	r5, r1
 80045c4:	f7fb ffb6 	bl	8000534 <__aeabi_i2d>
 80045c8:	a365      	add	r3, pc, #404	@ (adr r3, 8004760 <_dtoa_r+0x2c0>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f7fc f81b 	bl	8000608 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fe5f 	bl	800029c <__adddf3>
 80045de:	4604      	mov	r4, r0
 80045e0:	460d      	mov	r5, r1
 80045e2:	f7fc fac1 	bl	8000b68 <__aeabi_d2iz>
 80045e6:	2200      	movs	r2, #0
 80045e8:	4607      	mov	r7, r0
 80045ea:	2300      	movs	r3, #0
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fc fa7c 	bl	8000aec <__aeabi_dcmplt>
 80045f4:	b140      	cbz	r0, 8004608 <_dtoa_r+0x168>
 80045f6:	4638      	mov	r0, r7
 80045f8:	f7fb ff9c 	bl	8000534 <__aeabi_i2d>
 80045fc:	4622      	mov	r2, r4
 80045fe:	462b      	mov	r3, r5
 8004600:	f7fc fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004604:	b900      	cbnz	r0, 8004608 <_dtoa_r+0x168>
 8004606:	3f01      	subs	r7, #1
 8004608:	2f16      	cmp	r7, #22
 800460a:	d851      	bhi.n	80046b0 <_dtoa_r+0x210>
 800460c:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <_dtoa_r+0x2dc>)
 800460e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800461a:	f7fc fa67 	bl	8000aec <__aeabi_dcmplt>
 800461e:	2800      	cmp	r0, #0
 8004620:	d048      	beq.n	80046b4 <_dtoa_r+0x214>
 8004622:	3f01      	subs	r7, #1
 8004624:	2300      	movs	r3, #0
 8004626:	9312      	str	r3, [sp, #72]	@ 0x48
 8004628:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800462a:	1b9b      	subs	r3, r3, r6
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	bf44      	itt	mi
 8004630:	f1c3 0801 	rsbmi	r8, r3, #1
 8004634:	2300      	movmi	r3, #0
 8004636:	9208      	str	r2, [sp, #32]
 8004638:	bf54      	ite	pl
 800463a:	f04f 0800 	movpl.w	r8, #0
 800463e:	9308      	strmi	r3, [sp, #32]
 8004640:	2f00      	cmp	r7, #0
 8004642:	db39      	blt.n	80046b8 <_dtoa_r+0x218>
 8004644:	9b08      	ldr	r3, [sp, #32]
 8004646:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004648:	443b      	add	r3, r7
 800464a:	9308      	str	r3, [sp, #32]
 800464c:	2300      	movs	r3, #0
 800464e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004652:	2b09      	cmp	r3, #9
 8004654:	d864      	bhi.n	8004720 <_dtoa_r+0x280>
 8004656:	2b05      	cmp	r3, #5
 8004658:	bfc4      	itt	gt
 800465a:	3b04      	subgt	r3, #4
 800465c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800465e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004660:	f1a3 0302 	sub.w	r3, r3, #2
 8004664:	bfcc      	ite	gt
 8004666:	2400      	movgt	r4, #0
 8004668:	2401      	movle	r4, #1
 800466a:	2b03      	cmp	r3, #3
 800466c:	d863      	bhi.n	8004736 <_dtoa_r+0x296>
 800466e:	e8df f003 	tbb	[pc, r3]
 8004672:	372a      	.short	0x372a
 8004674:	5535      	.short	0x5535
 8004676:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800467a:	441e      	add	r6, r3
 800467c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004680:	2b20      	cmp	r3, #32
 8004682:	bfc1      	itttt	gt
 8004684:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004688:	409f      	lslgt	r7, r3
 800468a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800468e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004692:	bfd6      	itet	le
 8004694:	f1c3 0320 	rsble	r3, r3, #32
 8004698:	ea47 0003 	orrgt.w	r0, r7, r3
 800469c:	fa04 f003 	lslle.w	r0, r4, r3
 80046a0:	f7fb ff38 	bl	8000514 <__aeabi_ui2d>
 80046a4:	2201      	movs	r2, #1
 80046a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046aa:	3e01      	subs	r6, #1
 80046ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80046ae:	e777      	b.n	80045a0 <_dtoa_r+0x100>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e7b8      	b.n	8004626 <_dtoa_r+0x186>
 80046b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80046b6:	e7b7      	b.n	8004628 <_dtoa_r+0x188>
 80046b8:	427b      	negs	r3, r7
 80046ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80046bc:	2300      	movs	r3, #0
 80046be:	eba8 0807 	sub.w	r8, r8, r7
 80046c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046c4:	e7c4      	b.n	8004650 <_dtoa_r+0x1b0>
 80046c6:	2300      	movs	r3, #0
 80046c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	dc35      	bgt.n	800473c <_dtoa_r+0x29c>
 80046d0:	2301      	movs	r3, #1
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	461a      	mov	r2, r3
 80046d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80046da:	e00b      	b.n	80046f4 <_dtoa_r+0x254>
 80046dc:	2301      	movs	r3, #1
 80046de:	e7f3      	b.n	80046c8 <_dtoa_r+0x228>
 80046e0:	2300      	movs	r3, #0
 80046e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	9307      	str	r3, [sp, #28]
 80046f0:	bfb8      	it	lt
 80046f2:	2301      	movlt	r3, #1
 80046f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80046f8:	2100      	movs	r1, #0
 80046fa:	2204      	movs	r2, #4
 80046fc:	f102 0514 	add.w	r5, r2, #20
 8004700:	429d      	cmp	r5, r3
 8004702:	d91f      	bls.n	8004744 <_dtoa_r+0x2a4>
 8004704:	6041      	str	r1, [r0, #4]
 8004706:	4658      	mov	r0, fp
 8004708:	f000 fd8e 	bl	8005228 <_Balloc>
 800470c:	4682      	mov	sl, r0
 800470e:	2800      	cmp	r0, #0
 8004710:	d13c      	bne.n	800478c <_dtoa_r+0x2ec>
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <_dtoa_r+0x2e0>)
 8004714:	4602      	mov	r2, r0
 8004716:	f240 11af 	movw	r1, #431	@ 0x1af
 800471a:	e6d8      	b.n	80044ce <_dtoa_r+0x2e>
 800471c:	2301      	movs	r3, #1
 800471e:	e7e0      	b.n	80046e2 <_dtoa_r+0x242>
 8004720:	2401      	movs	r4, #1
 8004722:	2300      	movs	r3, #0
 8004724:	9309      	str	r3, [sp, #36]	@ 0x24
 8004726:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004728:	f04f 33ff 	mov.w	r3, #4294967295
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	9307      	str	r3, [sp, #28]
 8004730:	2200      	movs	r2, #0
 8004732:	2312      	movs	r3, #18
 8004734:	e7d0      	b.n	80046d8 <_dtoa_r+0x238>
 8004736:	2301      	movs	r3, #1
 8004738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800473a:	e7f5      	b.n	8004728 <_dtoa_r+0x288>
 800473c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	9307      	str	r3, [sp, #28]
 8004742:	e7d7      	b.n	80046f4 <_dtoa_r+0x254>
 8004744:	3101      	adds	r1, #1
 8004746:	0052      	lsls	r2, r2, #1
 8004748:	e7d8      	b.n	80046fc <_dtoa_r+0x25c>
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w
 8004750:	636f4361 	.word	0x636f4361
 8004754:	3fd287a7 	.word	0x3fd287a7
 8004758:	8b60c8b3 	.word	0x8b60c8b3
 800475c:	3fc68a28 	.word	0x3fc68a28
 8004760:	509f79fb 	.word	0x509f79fb
 8004764:	3fd34413 	.word	0x3fd34413
 8004768:	08006c01 	.word	0x08006c01
 800476c:	08006c18 	.word	0x08006c18
 8004770:	7ff00000 	.word	0x7ff00000
 8004774:	08006bd1 	.word	0x08006bd1
 8004778:	3ff80000 	.word	0x3ff80000
 800477c:	08006d10 	.word	0x08006d10
 8004780:	08006c70 	.word	0x08006c70
 8004784:	08006bfd 	.word	0x08006bfd
 8004788:	08006bd0 	.word	0x08006bd0
 800478c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004790:	6018      	str	r0, [r3, #0]
 8004792:	9b07      	ldr	r3, [sp, #28]
 8004794:	2b0e      	cmp	r3, #14
 8004796:	f200 80a4 	bhi.w	80048e2 <_dtoa_r+0x442>
 800479a:	2c00      	cmp	r4, #0
 800479c:	f000 80a1 	beq.w	80048e2 <_dtoa_r+0x442>
 80047a0:	2f00      	cmp	r7, #0
 80047a2:	dd33      	ble.n	800480c <_dtoa_r+0x36c>
 80047a4:	4bad      	ldr	r3, [pc, #692]	@ (8004a5c <_dtoa_r+0x5bc>)
 80047a6:	f007 020f 	and.w	r2, r7, #15
 80047aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ae:	ed93 7b00 	vldr	d7, [r3]
 80047b2:	05f8      	lsls	r0, r7, #23
 80047b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80047b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047bc:	d516      	bpl.n	80047ec <_dtoa_r+0x34c>
 80047be:	4ba8      	ldr	r3, [pc, #672]	@ (8004a60 <_dtoa_r+0x5c0>)
 80047c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047c8:	f7fc f848 	bl	800085c <__aeabi_ddiv>
 80047cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d0:	f004 040f 	and.w	r4, r4, #15
 80047d4:	2603      	movs	r6, #3
 80047d6:	4da2      	ldr	r5, [pc, #648]	@ (8004a60 <_dtoa_r+0x5c0>)
 80047d8:	b954      	cbnz	r4, 80047f0 <_dtoa_r+0x350>
 80047da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047e2:	f7fc f83b 	bl	800085c <__aeabi_ddiv>
 80047e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047ea:	e028      	b.n	800483e <_dtoa_r+0x39e>
 80047ec:	2602      	movs	r6, #2
 80047ee:	e7f2      	b.n	80047d6 <_dtoa_r+0x336>
 80047f0:	07e1      	lsls	r1, r4, #31
 80047f2:	d508      	bpl.n	8004806 <_dtoa_r+0x366>
 80047f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047fc:	f7fb ff04 	bl	8000608 <__aeabi_dmul>
 8004800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004804:	3601      	adds	r6, #1
 8004806:	1064      	asrs	r4, r4, #1
 8004808:	3508      	adds	r5, #8
 800480a:	e7e5      	b.n	80047d8 <_dtoa_r+0x338>
 800480c:	f000 80d2 	beq.w	80049b4 <_dtoa_r+0x514>
 8004810:	427c      	negs	r4, r7
 8004812:	4b92      	ldr	r3, [pc, #584]	@ (8004a5c <_dtoa_r+0x5bc>)
 8004814:	4d92      	ldr	r5, [pc, #584]	@ (8004a60 <_dtoa_r+0x5c0>)
 8004816:	f004 020f 	and.w	r2, r4, #15
 800481a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004826:	f7fb feef 	bl	8000608 <__aeabi_dmul>
 800482a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800482e:	1124      	asrs	r4, r4, #4
 8004830:	2300      	movs	r3, #0
 8004832:	2602      	movs	r6, #2
 8004834:	2c00      	cmp	r4, #0
 8004836:	f040 80b2 	bne.w	800499e <_dtoa_r+0x4fe>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1d3      	bne.n	80047e6 <_dtoa_r+0x346>
 800483e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004840:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80b7 	beq.w	80049b8 <_dtoa_r+0x518>
 800484a:	4b86      	ldr	r3, [pc, #536]	@ (8004a64 <_dtoa_r+0x5c4>)
 800484c:	2200      	movs	r2, #0
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	f7fc f94b 	bl	8000aec <__aeabi_dcmplt>
 8004856:	2800      	cmp	r0, #0
 8004858:	f000 80ae 	beq.w	80049b8 <_dtoa_r+0x518>
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80aa 	beq.w	80049b8 <_dtoa_r+0x518>
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	dd37      	ble.n	80048da <_dtoa_r+0x43a>
 800486a:	1e7b      	subs	r3, r7, #1
 800486c:	9304      	str	r3, [sp, #16]
 800486e:	4620      	mov	r0, r4
 8004870:	4b7d      	ldr	r3, [pc, #500]	@ (8004a68 <_dtoa_r+0x5c8>)
 8004872:	2200      	movs	r2, #0
 8004874:	4629      	mov	r1, r5
 8004876:	f7fb fec7 	bl	8000608 <__aeabi_dmul>
 800487a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800487e:	9c00      	ldr	r4, [sp, #0]
 8004880:	3601      	adds	r6, #1
 8004882:	4630      	mov	r0, r6
 8004884:	f7fb fe56 	bl	8000534 <__aeabi_i2d>
 8004888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800488c:	f7fb febc 	bl	8000608 <__aeabi_dmul>
 8004890:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <_dtoa_r+0x5cc>)
 8004892:	2200      	movs	r2, #0
 8004894:	f7fb fd02 	bl	800029c <__adddf3>
 8004898:	4605      	mov	r5, r0
 800489a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800489e:	2c00      	cmp	r4, #0
 80048a0:	f040 808d 	bne.w	80049be <_dtoa_r+0x51e>
 80048a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048a8:	4b71      	ldr	r3, [pc, #452]	@ (8004a70 <_dtoa_r+0x5d0>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	f7fb fcf4 	bl	8000298 <__aeabi_dsub>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048b8:	462a      	mov	r2, r5
 80048ba:	4633      	mov	r3, r6
 80048bc:	f7fc f934 	bl	8000b28 <__aeabi_dcmpgt>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	f040 828b 	bne.w	8004ddc <_dtoa_r+0x93c>
 80048c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ca:	462a      	mov	r2, r5
 80048cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048d0:	f7fc f90c 	bl	8000aec <__aeabi_dcmplt>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f040 8128 	bne.w	8004b2a <_dtoa_r+0x68a>
 80048da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80048de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80048e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f2c0 815a 	blt.w	8004b9e <_dtoa_r+0x6fe>
 80048ea:	2f0e      	cmp	r7, #14
 80048ec:	f300 8157 	bgt.w	8004b9e <_dtoa_r+0x6fe>
 80048f0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a5c <_dtoa_r+0x5bc>)
 80048f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048f6:	ed93 7b00 	vldr	d7, [r3]
 80048fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	ed8d 7b00 	vstr	d7, [sp]
 8004902:	da03      	bge.n	800490c <_dtoa_r+0x46c>
 8004904:	9b07      	ldr	r3, [sp, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f340 8101 	ble.w	8004b0e <_dtoa_r+0x66e>
 800490c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004910:	4656      	mov	r6, sl
 8004912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb ff9f 	bl	800085c <__aeabi_ddiv>
 800491e:	f7fc f923 	bl	8000b68 <__aeabi_d2iz>
 8004922:	4680      	mov	r8, r0
 8004924:	f7fb fe06 	bl	8000534 <__aeabi_i2d>
 8004928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800492c:	f7fb fe6c 	bl	8000608 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4620      	mov	r0, r4
 8004936:	4629      	mov	r1, r5
 8004938:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800493c:	f7fb fcac 	bl	8000298 <__aeabi_dsub>
 8004940:	f806 4b01 	strb.w	r4, [r6], #1
 8004944:	9d07      	ldr	r5, [sp, #28]
 8004946:	eba6 040a 	sub.w	r4, r6, sl
 800494a:	42a5      	cmp	r5, r4
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	f040 8117 	bne.w	8004b82 <_dtoa_r+0x6e2>
 8004954:	f7fb fca2 	bl	800029c <__adddf3>
 8004958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800495c:	4604      	mov	r4, r0
 800495e:	460d      	mov	r5, r1
 8004960:	f7fc f8e2 	bl	8000b28 <__aeabi_dcmpgt>
 8004964:	2800      	cmp	r0, #0
 8004966:	f040 80f9 	bne.w	8004b5c <_dtoa_r+0x6bc>
 800496a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fc f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004976:	b118      	cbz	r0, 8004980 <_dtoa_r+0x4e0>
 8004978:	f018 0f01 	tst.w	r8, #1
 800497c:	f040 80ee 	bne.w	8004b5c <_dtoa_r+0x6bc>
 8004980:	4649      	mov	r1, r9
 8004982:	4658      	mov	r0, fp
 8004984:	f000 fc90 	bl	80052a8 <_Bfree>
 8004988:	2300      	movs	r3, #0
 800498a:	7033      	strb	r3, [r6, #0]
 800498c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800498e:	3701      	adds	r7, #1
 8004990:	601f      	str	r7, [r3, #0]
 8004992:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 831d 	beq.w	8004fd4 <_dtoa_r+0xb34>
 800499a:	601e      	str	r6, [r3, #0]
 800499c:	e31a      	b.n	8004fd4 <_dtoa_r+0xb34>
 800499e:	07e2      	lsls	r2, r4, #31
 80049a0:	d505      	bpl.n	80049ae <_dtoa_r+0x50e>
 80049a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049a6:	f7fb fe2f 	bl	8000608 <__aeabi_dmul>
 80049aa:	3601      	adds	r6, #1
 80049ac:	2301      	movs	r3, #1
 80049ae:	1064      	asrs	r4, r4, #1
 80049b0:	3508      	adds	r5, #8
 80049b2:	e73f      	b.n	8004834 <_dtoa_r+0x394>
 80049b4:	2602      	movs	r6, #2
 80049b6:	e742      	b.n	800483e <_dtoa_r+0x39e>
 80049b8:	9c07      	ldr	r4, [sp, #28]
 80049ba:	9704      	str	r7, [sp, #16]
 80049bc:	e761      	b.n	8004882 <_dtoa_r+0x3e2>
 80049be:	4b27      	ldr	r3, [pc, #156]	@ (8004a5c <_dtoa_r+0x5bc>)
 80049c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049ca:	4454      	add	r4, sl
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d053      	beq.n	8004a78 <_dtoa_r+0x5d8>
 80049d0:	4928      	ldr	r1, [pc, #160]	@ (8004a74 <_dtoa_r+0x5d4>)
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7fb ff42 	bl	800085c <__aeabi_ddiv>
 80049d8:	4633      	mov	r3, r6
 80049da:	462a      	mov	r2, r5
 80049dc:	f7fb fc5c 	bl	8000298 <__aeabi_dsub>
 80049e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80049e4:	4656      	mov	r6, sl
 80049e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ea:	f7fc f8bd 	bl	8000b68 <__aeabi_d2iz>
 80049ee:	4605      	mov	r5, r0
 80049f0:	f7fb fda0 	bl	8000534 <__aeabi_i2d>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049fc:	f7fb fc4c 	bl	8000298 <__aeabi_dsub>
 8004a00:	3530      	adds	r5, #48	@ 0x30
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a0a:	f806 5b01 	strb.w	r5, [r6], #1
 8004a0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a12:	f7fc f86b 	bl	8000aec <__aeabi_dcmplt>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d171      	bne.n	8004afe <_dtoa_r+0x65e>
 8004a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a1e:	4911      	ldr	r1, [pc, #68]	@ (8004a64 <_dtoa_r+0x5c4>)
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7fb fc39 	bl	8000298 <__aeabi_dsub>
 8004a26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a2a:	f7fc f85f 	bl	8000aec <__aeabi_dcmplt>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f040 8095 	bne.w	8004b5e <_dtoa_r+0x6be>
 8004a34:	42a6      	cmp	r6, r4
 8004a36:	f43f af50 	beq.w	80048da <_dtoa_r+0x43a>
 8004a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <_dtoa_r+0x5c8>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	f7fb fde1 	bl	8000608 <__aeabi_dmul>
 8004a46:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <_dtoa_r+0x5c8>)
 8004a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a52:	f7fb fdd9 	bl	8000608 <__aeabi_dmul>
 8004a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5a:	e7c4      	b.n	80049e6 <_dtoa_r+0x546>
 8004a5c:	08006d10 	.word	0x08006d10
 8004a60:	08006ce8 	.word	0x08006ce8
 8004a64:	3ff00000 	.word	0x3ff00000
 8004a68:	40240000 	.word	0x40240000
 8004a6c:	401c0000 	.word	0x401c0000
 8004a70:	40140000 	.word	0x40140000
 8004a74:	3fe00000 	.word	0x3fe00000
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f7fb fdc4 	bl	8000608 <__aeabi_dmul>
 8004a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a84:	9415      	str	r4, [sp, #84]	@ 0x54
 8004a86:	4656      	mov	r6, sl
 8004a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a8c:	f7fc f86c 	bl	8000b68 <__aeabi_d2iz>
 8004a90:	4605      	mov	r5, r0
 8004a92:	f7fb fd4f 	bl	8000534 <__aeabi_i2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a9e:	f7fb fbfb 	bl	8000298 <__aeabi_dsub>
 8004aa2:	3530      	adds	r5, #48	@ 0x30
 8004aa4:	f806 5b01 	strb.w	r5, [r6], #1
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	42a6      	cmp	r6, r4
 8004aae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	d124      	bne.n	8004b02 <_dtoa_r+0x662>
 8004ab8:	4bac      	ldr	r3, [pc, #688]	@ (8004d6c <_dtoa_r+0x8cc>)
 8004aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004abe:	f7fb fbed 	bl	800029c <__adddf3>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aca:	f7fc f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d145      	bne.n	8004b5e <_dtoa_r+0x6be>
 8004ad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ad6:	49a5      	ldr	r1, [pc, #660]	@ (8004d6c <_dtoa_r+0x8cc>)
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fb fbdd 	bl	8000298 <__aeabi_dsub>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae6:	f7fc f801 	bl	8000aec <__aeabi_dcmplt>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f43f aef5 	beq.w	80048da <_dtoa_r+0x43a>
 8004af0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004af2:	1e73      	subs	r3, r6, #1
 8004af4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004af6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004afa:	2b30      	cmp	r3, #48	@ 0x30
 8004afc:	d0f8      	beq.n	8004af0 <_dtoa_r+0x650>
 8004afe:	9f04      	ldr	r7, [sp, #16]
 8004b00:	e73e      	b.n	8004980 <_dtoa_r+0x4e0>
 8004b02:	4b9b      	ldr	r3, [pc, #620]	@ (8004d70 <_dtoa_r+0x8d0>)
 8004b04:	f7fb fd80 	bl	8000608 <__aeabi_dmul>
 8004b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0c:	e7bc      	b.n	8004a88 <_dtoa_r+0x5e8>
 8004b0e:	d10c      	bne.n	8004b2a <_dtoa_r+0x68a>
 8004b10:	4b98      	ldr	r3, [pc, #608]	@ (8004d74 <_dtoa_r+0x8d4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b18:	f7fb fd76 	bl	8000608 <__aeabi_dmul>
 8004b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b20:	f7fb fff8 	bl	8000b14 <__aeabi_dcmpge>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f000 8157 	beq.w	8004dd8 <_dtoa_r+0x938>
 8004b2a:	2400      	movs	r4, #0
 8004b2c:	4625      	mov	r5, r4
 8004b2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b30:	43db      	mvns	r3, r3
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	4656      	mov	r6, sl
 8004b36:	2700      	movs	r7, #0
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4658      	mov	r0, fp
 8004b3c:	f000 fbb4 	bl	80052a8 <_Bfree>
 8004b40:	2d00      	cmp	r5, #0
 8004b42:	d0dc      	beq.n	8004afe <_dtoa_r+0x65e>
 8004b44:	b12f      	cbz	r7, 8004b52 <_dtoa_r+0x6b2>
 8004b46:	42af      	cmp	r7, r5
 8004b48:	d003      	beq.n	8004b52 <_dtoa_r+0x6b2>
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4658      	mov	r0, fp
 8004b4e:	f000 fbab 	bl	80052a8 <_Bfree>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4658      	mov	r0, fp
 8004b56:	f000 fba7 	bl	80052a8 <_Bfree>
 8004b5a:	e7d0      	b.n	8004afe <_dtoa_r+0x65e>
 8004b5c:	9704      	str	r7, [sp, #16]
 8004b5e:	4633      	mov	r3, r6
 8004b60:	461e      	mov	r6, r3
 8004b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b66:	2a39      	cmp	r2, #57	@ 0x39
 8004b68:	d107      	bne.n	8004b7a <_dtoa_r+0x6da>
 8004b6a:	459a      	cmp	sl, r3
 8004b6c:	d1f8      	bne.n	8004b60 <_dtoa_r+0x6c0>
 8004b6e:	9a04      	ldr	r2, [sp, #16]
 8004b70:	3201      	adds	r2, #1
 8004b72:	9204      	str	r2, [sp, #16]
 8004b74:	2230      	movs	r2, #48	@ 0x30
 8004b76:	f88a 2000 	strb.w	r2, [sl]
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	3201      	adds	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e7bd      	b.n	8004afe <_dtoa_r+0x65e>
 8004b82:	4b7b      	ldr	r3, [pc, #492]	@ (8004d70 <_dtoa_r+0x8d0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	f7fb fd3f 	bl	8000608 <__aeabi_dmul>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	460d      	mov	r5, r1
 8004b92:	f7fb ffa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f43f aebb 	beq.w	8004912 <_dtoa_r+0x472>
 8004b9c:	e6f0      	b.n	8004980 <_dtoa_r+0x4e0>
 8004b9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	f000 80db 	beq.w	8004d5c <_dtoa_r+0x8bc>
 8004ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ba8:	2a01      	cmp	r2, #1
 8004baa:	f300 80bf 	bgt.w	8004d2c <_dtoa_r+0x88c>
 8004bae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	f000 80b7 	beq.w	8004d24 <_dtoa_r+0x884>
 8004bb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bbc:	4646      	mov	r6, r8
 8004bbe:	9a08      	ldr	r2, [sp, #32]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	441a      	add	r2, r3
 8004bc4:	4658      	mov	r0, fp
 8004bc6:	4498      	add	r8, r3
 8004bc8:	9208      	str	r2, [sp, #32]
 8004bca:	f000 fc21 	bl	8005410 <__i2b>
 8004bce:	4605      	mov	r5, r0
 8004bd0:	b15e      	cbz	r6, 8004bea <_dtoa_r+0x74a>
 8004bd2:	9b08      	ldr	r3, [sp, #32]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd08      	ble.n	8004bea <_dtoa_r+0x74a>
 8004bd8:	42b3      	cmp	r3, r6
 8004bda:	9a08      	ldr	r2, [sp, #32]
 8004bdc:	bfa8      	it	ge
 8004bde:	4633      	movge	r3, r6
 8004be0:	eba8 0803 	sub.w	r8, r8, r3
 8004be4:	1af6      	subs	r6, r6, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	9308      	str	r3, [sp, #32]
 8004bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bec:	b1f3      	cbz	r3, 8004c2c <_dtoa_r+0x78c>
 8004bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80b7 	beq.w	8004d64 <_dtoa_r+0x8c4>
 8004bf6:	b18c      	cbz	r4, 8004c1c <_dtoa_r+0x77c>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	f000 fcc7 	bl	8005590 <__pow5mult>
 8004c02:	464a      	mov	r2, r9
 8004c04:	4601      	mov	r1, r0
 8004c06:	4605      	mov	r5, r0
 8004c08:	4658      	mov	r0, fp
 8004c0a:	f000 fc17 	bl	800543c <__multiply>
 8004c0e:	4649      	mov	r1, r9
 8004c10:	9004      	str	r0, [sp, #16]
 8004c12:	4658      	mov	r0, fp
 8004c14:	f000 fb48 	bl	80052a8 <_Bfree>
 8004c18:	9b04      	ldr	r3, [sp, #16]
 8004c1a:	4699      	mov	r9, r3
 8004c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c1e:	1b1a      	subs	r2, r3, r4
 8004c20:	d004      	beq.n	8004c2c <_dtoa_r+0x78c>
 8004c22:	4649      	mov	r1, r9
 8004c24:	4658      	mov	r0, fp
 8004c26:	f000 fcb3 	bl	8005590 <__pow5mult>
 8004c2a:	4681      	mov	r9, r0
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4658      	mov	r0, fp
 8004c30:	f000 fbee 	bl	8005410 <__i2b>
 8004c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c36:	4604      	mov	r4, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 81cf 	beq.w	8004fdc <_dtoa_r+0xb3c>
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4601      	mov	r1, r0
 8004c42:	4658      	mov	r0, fp
 8004c44:	f000 fca4 	bl	8005590 <__pow5mult>
 8004c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	f300 8095 	bgt.w	8004d7c <_dtoa_r+0x8dc>
 8004c52:	9b02      	ldr	r3, [sp, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8087 	bne.w	8004d68 <_dtoa_r+0x8c8>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 8089 	bne.w	8004d78 <_dtoa_r+0x8d8>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c6c:	0d1b      	lsrs	r3, r3, #20
 8004c6e:	051b      	lsls	r3, r3, #20
 8004c70:	b12b      	cbz	r3, 8004c7e <_dtoa_r+0x7de>
 8004c72:	9b08      	ldr	r3, [sp, #32]
 8004c74:	3301      	adds	r3, #1
 8004c76:	9308      	str	r3, [sp, #32]
 8004c78:	f108 0801 	add.w	r8, r8, #1
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 81b0 	beq.w	8004fe8 <_dtoa_r+0xb48>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c8e:	6918      	ldr	r0, [r3, #16]
 8004c90:	f000 fb72 	bl	8005378 <__hi0bits>
 8004c94:	f1c0 0020 	rsb	r0, r0, #32
 8004c98:	9b08      	ldr	r3, [sp, #32]
 8004c9a:	4418      	add	r0, r3
 8004c9c:	f010 001f 	ands.w	r0, r0, #31
 8004ca0:	d077      	beq.n	8004d92 <_dtoa_r+0x8f2>
 8004ca2:	f1c0 0320 	rsb	r3, r0, #32
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	dd6b      	ble.n	8004d82 <_dtoa_r+0x8e2>
 8004caa:	9b08      	ldr	r3, [sp, #32]
 8004cac:	f1c0 001c 	rsb	r0, r0, #28
 8004cb0:	4403      	add	r3, r0
 8004cb2:	4480      	add	r8, r0
 8004cb4:	4406      	add	r6, r0
 8004cb6:	9308      	str	r3, [sp, #32]
 8004cb8:	f1b8 0f00 	cmp.w	r8, #0
 8004cbc:	dd05      	ble.n	8004cca <_dtoa_r+0x82a>
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f000 fcbe 	bl	8005644 <__lshift>
 8004cc8:	4681      	mov	r9, r0
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dd05      	ble.n	8004cdc <_dtoa_r+0x83c>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	f000 fcb5 	bl	8005644 <__lshift>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d059      	beq.n	8004d96 <_dtoa_r+0x8f6>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	f000 fd19 	bl	800571c <__mcmp>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	da53      	bge.n	8004d96 <_dtoa_r+0x8f6>
 8004cee:	1e7b      	subs	r3, r7, #1
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	f000 faf7 	bl	80052ec <__multadd>
 8004cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d00:	4681      	mov	r9, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8172 	beq.w	8004fec <_dtoa_r+0xb4c>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	220a      	movs	r2, #10
 8004d0e:	4658      	mov	r0, fp
 8004d10:	f000 faec 	bl	80052ec <__multadd>
 8004d14:	9b00      	ldr	r3, [sp, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	4605      	mov	r5, r0
 8004d1a:	dc67      	bgt.n	8004dec <_dtoa_r+0x94c>
 8004d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	dc41      	bgt.n	8004da6 <_dtoa_r+0x906>
 8004d22:	e063      	b.n	8004dec <_dtoa_r+0x94c>
 8004d24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004d26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d2a:	e746      	b.n	8004bba <_dtoa_r+0x71a>
 8004d2c:	9b07      	ldr	r3, [sp, #28]
 8004d2e:	1e5c      	subs	r4, r3, #1
 8004d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d32:	42a3      	cmp	r3, r4
 8004d34:	bfbf      	itttt	lt
 8004d36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004d3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d3c:	1ae3      	sublt	r3, r4, r3
 8004d3e:	bfb4      	ite	lt
 8004d40:	18d2      	addlt	r2, r2, r3
 8004d42:	1b1c      	subge	r4, r3, r4
 8004d44:	9b07      	ldr	r3, [sp, #28]
 8004d46:	bfbc      	itt	lt
 8004d48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004d4a:	2400      	movlt	r4, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bfb5      	itete	lt
 8004d50:	eba8 0603 	sublt.w	r6, r8, r3
 8004d54:	9b07      	ldrge	r3, [sp, #28]
 8004d56:	2300      	movlt	r3, #0
 8004d58:	4646      	movge	r6, r8
 8004d5a:	e730      	b.n	8004bbe <_dtoa_r+0x71e>
 8004d5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d60:	4646      	mov	r6, r8
 8004d62:	e735      	b.n	8004bd0 <_dtoa_r+0x730>
 8004d64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d66:	e75c      	b.n	8004c22 <_dtoa_r+0x782>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e788      	b.n	8004c7e <_dtoa_r+0x7de>
 8004d6c:	3fe00000 	.word	0x3fe00000
 8004d70:	40240000 	.word	0x40240000
 8004d74:	40140000 	.word	0x40140000
 8004d78:	9b02      	ldr	r3, [sp, #8]
 8004d7a:	e780      	b.n	8004c7e <_dtoa_r+0x7de>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d80:	e782      	b.n	8004c88 <_dtoa_r+0x7e8>
 8004d82:	d099      	beq.n	8004cb8 <_dtoa_r+0x818>
 8004d84:	9a08      	ldr	r2, [sp, #32]
 8004d86:	331c      	adds	r3, #28
 8004d88:	441a      	add	r2, r3
 8004d8a:	4498      	add	r8, r3
 8004d8c:	441e      	add	r6, r3
 8004d8e:	9208      	str	r2, [sp, #32]
 8004d90:	e792      	b.n	8004cb8 <_dtoa_r+0x818>
 8004d92:	4603      	mov	r3, r0
 8004d94:	e7f6      	b.n	8004d84 <_dtoa_r+0x8e4>
 8004d96:	9b07      	ldr	r3, [sp, #28]
 8004d98:	9704      	str	r7, [sp, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc20      	bgt.n	8004de0 <_dtoa_r+0x940>
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	dd1e      	ble.n	8004de4 <_dtoa_r+0x944>
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f aec0 	bne.w	8004b2e <_dtoa_r+0x68e>
 8004dae:	4621      	mov	r1, r4
 8004db0:	2205      	movs	r2, #5
 8004db2:	4658      	mov	r0, fp
 8004db4:	f000 fa9a 	bl	80052ec <__multadd>
 8004db8:	4601      	mov	r1, r0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4648      	mov	r0, r9
 8004dbe:	f000 fcad 	bl	800571c <__mcmp>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f77f aeb3 	ble.w	8004b2e <_dtoa_r+0x68e>
 8004dc8:	4656      	mov	r6, sl
 8004dca:	2331      	movs	r3, #49	@ 0x31
 8004dcc:	f806 3b01 	strb.w	r3, [r6], #1
 8004dd0:	9b04      	ldr	r3, [sp, #16]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	e6ae      	b.n	8004b36 <_dtoa_r+0x696>
 8004dd8:	9c07      	ldr	r4, [sp, #28]
 8004dda:	9704      	str	r7, [sp, #16]
 8004ddc:	4625      	mov	r5, r4
 8004dde:	e7f3      	b.n	8004dc8 <_dtoa_r+0x928>
 8004de0:	9b07      	ldr	r3, [sp, #28]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8104 	beq.w	8004ff4 <_dtoa_r+0xb54>
 8004dec:	2e00      	cmp	r6, #0
 8004dee:	dd05      	ble.n	8004dfc <_dtoa_r+0x95c>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4632      	mov	r2, r6
 8004df4:	4658      	mov	r0, fp
 8004df6:	f000 fc25 	bl	8005644 <__lshift>
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d05a      	beq.n	8004eb8 <_dtoa_r+0xa18>
 8004e02:	6869      	ldr	r1, [r5, #4]
 8004e04:	4658      	mov	r0, fp
 8004e06:	f000 fa0f 	bl	8005228 <_Balloc>
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	b928      	cbnz	r0, 8004e1a <_dtoa_r+0x97a>
 8004e0e:	4b84      	ldr	r3, [pc, #528]	@ (8005020 <_dtoa_r+0xb80>)
 8004e10:	4602      	mov	r2, r0
 8004e12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e16:	f7ff bb5a 	b.w	80044ce <_dtoa_r+0x2e>
 8004e1a:	692a      	ldr	r2, [r5, #16]
 8004e1c:	3202      	adds	r2, #2
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	f105 010c 	add.w	r1, r5, #12
 8004e24:	300c      	adds	r0, #12
 8004e26:	f7ff faa2 	bl	800436e <memcpy>
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4658      	mov	r0, fp
 8004e30:	f000 fc08 	bl	8005644 <__lshift>
 8004e34:	f10a 0301 	add.w	r3, sl, #1
 8004e38:	9307      	str	r3, [sp, #28]
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	4453      	add	r3, sl
 8004e3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	462f      	mov	r7, r5
 8004e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	4621      	mov	r1, r4
 8004e50:	3b01      	subs	r3, #1
 8004e52:	4648      	mov	r0, r9
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	f7ff fa98 	bl	800438a <quorem>
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	9002      	str	r0, [sp, #8]
 8004e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e62:	4648      	mov	r0, r9
 8004e64:	f000 fc5a 	bl	800571c <__mcmp>
 8004e68:	462a      	mov	r2, r5
 8004e6a:	9008      	str	r0, [sp, #32]
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4658      	mov	r0, fp
 8004e70:	f000 fc70 	bl	8005754 <__mdiff>
 8004e74:	68c2      	ldr	r2, [r0, #12]
 8004e76:	4606      	mov	r6, r0
 8004e78:	bb02      	cbnz	r2, 8004ebc <_dtoa_r+0xa1c>
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4648      	mov	r0, r9
 8004e7e:	f000 fc4d 	bl	800571c <__mcmp>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4631      	mov	r1, r6
 8004e86:	4658      	mov	r0, fp
 8004e88:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e8a:	f000 fa0d 	bl	80052a8 <_Bfree>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e92:	9e07      	ldr	r6, [sp, #28]
 8004e94:	ea43 0102 	orr.w	r1, r3, r2
 8004e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e9a:	4319      	orrs	r1, r3
 8004e9c:	d110      	bne.n	8004ec0 <_dtoa_r+0xa20>
 8004e9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ea2:	d029      	beq.n	8004ef8 <_dtoa_r+0xa58>
 8004ea4:	9b08      	ldr	r3, [sp, #32]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dd02      	ble.n	8004eb0 <_dtoa_r+0xa10>
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004eb0:	9b00      	ldr	r3, [sp, #0]
 8004eb2:	f883 8000 	strb.w	r8, [r3]
 8004eb6:	e63f      	b.n	8004b38 <_dtoa_r+0x698>
 8004eb8:	4628      	mov	r0, r5
 8004eba:	e7bb      	b.n	8004e34 <_dtoa_r+0x994>
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	e7e1      	b.n	8004e84 <_dtoa_r+0x9e4>
 8004ec0:	9b08      	ldr	r3, [sp, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db04      	blt.n	8004ed0 <_dtoa_r+0xa30>
 8004ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	d120      	bne.n	8004f12 <_dtoa_r+0xa72>
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	dded      	ble.n	8004eb0 <_dtoa_r+0xa10>
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4658      	mov	r0, fp
 8004eda:	f000 fbb3 	bl	8005644 <__lshift>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4681      	mov	r9, r0
 8004ee2:	f000 fc1b 	bl	800571c <__mcmp>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	dc03      	bgt.n	8004ef2 <_dtoa_r+0xa52>
 8004eea:	d1e1      	bne.n	8004eb0 <_dtoa_r+0xa10>
 8004eec:	f018 0f01 	tst.w	r8, #1
 8004ef0:	d0de      	beq.n	8004eb0 <_dtoa_r+0xa10>
 8004ef2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ef6:	d1d8      	bne.n	8004eaa <_dtoa_r+0xa0a>
 8004ef8:	9a00      	ldr	r2, [sp, #0]
 8004efa:	2339      	movs	r3, #57	@ 0x39
 8004efc:	7013      	strb	r3, [r2, #0]
 8004efe:	4633      	mov	r3, r6
 8004f00:	461e      	mov	r6, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f08:	2a39      	cmp	r2, #57	@ 0x39
 8004f0a:	d052      	beq.n	8004fb2 <_dtoa_r+0xb12>
 8004f0c:	3201      	adds	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e612      	b.n	8004b38 <_dtoa_r+0x698>
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	dd07      	ble.n	8004f26 <_dtoa_r+0xa86>
 8004f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f1a:	d0ed      	beq.n	8004ef8 <_dtoa_r+0xa58>
 8004f1c:	9a00      	ldr	r2, [sp, #0]
 8004f1e:	f108 0301 	add.w	r3, r8, #1
 8004f22:	7013      	strb	r3, [r2, #0]
 8004f24:	e608      	b.n	8004b38 <_dtoa_r+0x698>
 8004f26:	9b07      	ldr	r3, [sp, #28]
 8004f28:	9a07      	ldr	r2, [sp, #28]
 8004f2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d028      	beq.n	8004f86 <_dtoa_r+0xae6>
 8004f34:	4649      	mov	r1, r9
 8004f36:	2300      	movs	r3, #0
 8004f38:	220a      	movs	r2, #10
 8004f3a:	4658      	mov	r0, fp
 8004f3c:	f000 f9d6 	bl	80052ec <__multadd>
 8004f40:	42af      	cmp	r7, r5
 8004f42:	4681      	mov	r9, r0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	f04f 020a 	mov.w	r2, #10
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4658      	mov	r0, fp
 8004f50:	d107      	bne.n	8004f62 <_dtoa_r+0xac2>
 8004f52:	f000 f9cb 	bl	80052ec <__multadd>
 8004f56:	4607      	mov	r7, r0
 8004f58:	4605      	mov	r5, r0
 8004f5a:	9b07      	ldr	r3, [sp, #28]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	9307      	str	r3, [sp, #28]
 8004f60:	e774      	b.n	8004e4c <_dtoa_r+0x9ac>
 8004f62:	f000 f9c3 	bl	80052ec <__multadd>
 8004f66:	4629      	mov	r1, r5
 8004f68:	4607      	mov	r7, r0
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	4658      	mov	r0, fp
 8004f70:	f000 f9bc 	bl	80052ec <__multadd>
 8004f74:	4605      	mov	r5, r0
 8004f76:	e7f0      	b.n	8004f5a <_dtoa_r+0xaba>
 8004f78:	9b00      	ldr	r3, [sp, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfcc      	ite	gt
 8004f7e:	461e      	movgt	r6, r3
 8004f80:	2601      	movle	r6, #1
 8004f82:	4456      	add	r6, sl
 8004f84:	2700      	movs	r7, #0
 8004f86:	4649      	mov	r1, r9
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4658      	mov	r0, fp
 8004f8c:	f000 fb5a 	bl	8005644 <__lshift>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4681      	mov	r9, r0
 8004f94:	f000 fbc2 	bl	800571c <__mcmp>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	dcb0      	bgt.n	8004efe <_dtoa_r+0xa5e>
 8004f9c:	d102      	bne.n	8004fa4 <_dtoa_r+0xb04>
 8004f9e:	f018 0f01 	tst.w	r8, #1
 8004fa2:	d1ac      	bne.n	8004efe <_dtoa_r+0xa5e>
 8004fa4:	4633      	mov	r3, r6
 8004fa6:	461e      	mov	r6, r3
 8004fa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fac:	2a30      	cmp	r2, #48	@ 0x30
 8004fae:	d0fa      	beq.n	8004fa6 <_dtoa_r+0xb06>
 8004fb0:	e5c2      	b.n	8004b38 <_dtoa_r+0x698>
 8004fb2:	459a      	cmp	sl, r3
 8004fb4:	d1a4      	bne.n	8004f00 <_dtoa_r+0xa60>
 8004fb6:	9b04      	ldr	r3, [sp, #16]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	2331      	movs	r3, #49	@ 0x31
 8004fbe:	f88a 3000 	strb.w	r3, [sl]
 8004fc2:	e5b9      	b.n	8004b38 <_dtoa_r+0x698>
 8004fc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004fc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005024 <_dtoa_r+0xb84>
 8004fca:	b11b      	cbz	r3, 8004fd4 <_dtoa_r+0xb34>
 8004fcc:	f10a 0308 	add.w	r3, sl, #8
 8004fd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	b019      	add	sp, #100	@ 0x64
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f77f ae37 	ble.w	8004c52 <_dtoa_r+0x7b2>
 8004fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e655      	b.n	8004c98 <_dtoa_r+0x7f8>
 8004fec:	9b00      	ldr	r3, [sp, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f77f aed6 	ble.w	8004da0 <_dtoa_r+0x900>
 8004ff4:	4656      	mov	r6, sl
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	4648      	mov	r0, r9
 8004ffa:	f7ff f9c6 	bl	800438a <quorem>
 8004ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005002:	f806 8b01 	strb.w	r8, [r6], #1
 8005006:	9b00      	ldr	r3, [sp, #0]
 8005008:	eba6 020a 	sub.w	r2, r6, sl
 800500c:	4293      	cmp	r3, r2
 800500e:	ddb3      	ble.n	8004f78 <_dtoa_r+0xad8>
 8005010:	4649      	mov	r1, r9
 8005012:	2300      	movs	r3, #0
 8005014:	220a      	movs	r2, #10
 8005016:	4658      	mov	r0, fp
 8005018:	f000 f968 	bl	80052ec <__multadd>
 800501c:	4681      	mov	r9, r0
 800501e:	e7ea      	b.n	8004ff6 <_dtoa_r+0xb56>
 8005020:	08006c70 	.word	0x08006c70
 8005024:	08006bf4 	.word	0x08006bf4

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d041      	beq.n	80050b4 <_free_r+0x8c>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 f8e8 	bl	8005210 <__malloc_lock>
 8005040:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <_free_r+0x90>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	b933      	cbnz	r3, 8005054 <_free_r+0x2c>
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005050:	f000 b8e4 	b.w	800521c <__malloc_unlock>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d908      	bls.n	800506a <_free_r+0x42>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	1821      	adds	r1, r4, r0
 800505c:	428b      	cmp	r3, r1
 800505e:	bf01      	itttt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	1809      	addeq	r1, r1, r0
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	e7ed      	b.n	8005046 <_free_r+0x1e>
 800506a:	461a      	mov	r2, r3
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b10b      	cbz	r3, 8005074 <_free_r+0x4c>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d9fa      	bls.n	800506a <_free_r+0x42>
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	1850      	adds	r0, r2, r1
 8005078:	42a0      	cmp	r0, r4
 800507a:	d10b      	bne.n	8005094 <_free_r+0x6c>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	4401      	add	r1, r0
 8005080:	1850      	adds	r0, r2, r1
 8005082:	4283      	cmp	r3, r0
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	d1e0      	bne.n	800504a <_free_r+0x22>
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6053      	str	r3, [r2, #4]
 800508e:	4408      	add	r0, r1
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	e7da      	b.n	800504a <_free_r+0x22>
 8005094:	d902      	bls.n	800509c <_free_r+0x74>
 8005096:	230c      	movs	r3, #12
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	e7d6      	b.n	800504a <_free_r+0x22>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	1821      	adds	r1, r4, r0
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf04      	itt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	bf04      	itt	eq
 80050ac:	1809      	addeq	r1, r1, r0
 80050ae:	6021      	streq	r1, [r4, #0]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7ca      	b.n	800504a <_free_r+0x22>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	200007e4 	.word	0x200007e4

080050bc <malloc>:
 80050bc:	4b02      	ldr	r3, [pc, #8]	@ (80050c8 <malloc+0xc>)
 80050be:	4601      	mov	r1, r0
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	f000 b825 	b.w	8005110 <_malloc_r>
 80050c6:	bf00      	nop
 80050c8:	20000018 	.word	0x20000018

080050cc <sbrk_aligned>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4e0f      	ldr	r6, [pc, #60]	@ (800510c <sbrk_aligned+0x40>)
 80050d0:	460c      	mov	r4, r1
 80050d2:	6831      	ldr	r1, [r6, #0]
 80050d4:	4605      	mov	r5, r0
 80050d6:	b911      	cbnz	r1, 80050de <sbrk_aligned+0x12>
 80050d8:	f000 fe46 	bl	8005d68 <_sbrk_r>
 80050dc:	6030      	str	r0, [r6, #0]
 80050de:	4621      	mov	r1, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fe41 	bl	8005d68 <_sbrk_r>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	d103      	bne.n	80050f2 <sbrk_aligned+0x26>
 80050ea:	f04f 34ff 	mov.w	r4, #4294967295
 80050ee:	4620      	mov	r0, r4
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
 80050f2:	1cc4      	adds	r4, r0, #3
 80050f4:	f024 0403 	bic.w	r4, r4, #3
 80050f8:	42a0      	cmp	r0, r4
 80050fa:	d0f8      	beq.n	80050ee <sbrk_aligned+0x22>
 80050fc:	1a21      	subs	r1, r4, r0
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 fe32 	bl	8005d68 <_sbrk_r>
 8005104:	3001      	adds	r0, #1
 8005106:	d1f2      	bne.n	80050ee <sbrk_aligned+0x22>
 8005108:	e7ef      	b.n	80050ea <sbrk_aligned+0x1e>
 800510a:	bf00      	nop
 800510c:	200007e0 	.word	0x200007e0

08005110 <_malloc_r>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	1ccd      	adds	r5, r1, #3
 8005116:	f025 0503 	bic.w	r5, r5, #3
 800511a:	3508      	adds	r5, #8
 800511c:	2d0c      	cmp	r5, #12
 800511e:	bf38      	it	cc
 8005120:	250c      	movcc	r5, #12
 8005122:	2d00      	cmp	r5, #0
 8005124:	4606      	mov	r6, r0
 8005126:	db01      	blt.n	800512c <_malloc_r+0x1c>
 8005128:	42a9      	cmp	r1, r5
 800512a:	d904      	bls.n	8005136 <_malloc_r+0x26>
 800512c:	230c      	movs	r3, #12
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	2000      	movs	r0, #0
 8005132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800520c <_malloc_r+0xfc>
 800513a:	f000 f869 	bl	8005210 <__malloc_lock>
 800513e:	f8d8 3000 	ldr.w	r3, [r8]
 8005142:	461c      	mov	r4, r3
 8005144:	bb44      	cbnz	r4, 8005198 <_malloc_r+0x88>
 8005146:	4629      	mov	r1, r5
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff ffbf 	bl	80050cc <sbrk_aligned>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	4604      	mov	r4, r0
 8005152:	d158      	bne.n	8005206 <_malloc_r+0xf6>
 8005154:	f8d8 4000 	ldr.w	r4, [r8]
 8005158:	4627      	mov	r7, r4
 800515a:	2f00      	cmp	r7, #0
 800515c:	d143      	bne.n	80051e6 <_malloc_r+0xd6>
 800515e:	2c00      	cmp	r4, #0
 8005160:	d04b      	beq.n	80051fa <_malloc_r+0xea>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	4639      	mov	r1, r7
 8005166:	4630      	mov	r0, r6
 8005168:	eb04 0903 	add.w	r9, r4, r3
 800516c:	f000 fdfc 	bl	8005d68 <_sbrk_r>
 8005170:	4581      	cmp	r9, r0
 8005172:	d142      	bne.n	80051fa <_malloc_r+0xea>
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	1a6d      	subs	r5, r5, r1
 8005178:	4629      	mov	r1, r5
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff ffa6 	bl	80050cc <sbrk_aligned>
 8005180:	3001      	adds	r0, #1
 8005182:	d03a      	beq.n	80051fa <_malloc_r+0xea>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	442b      	add	r3, r5
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	f8d8 3000 	ldr.w	r3, [r8]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	bb62      	cbnz	r2, 80051ec <_malloc_r+0xdc>
 8005192:	f8c8 7000 	str.w	r7, [r8]
 8005196:	e00f      	b.n	80051b8 <_malloc_r+0xa8>
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	1b52      	subs	r2, r2, r5
 800519c:	d420      	bmi.n	80051e0 <_malloc_r+0xd0>
 800519e:	2a0b      	cmp	r2, #11
 80051a0:	d917      	bls.n	80051d2 <_malloc_r+0xc2>
 80051a2:	1961      	adds	r1, r4, r5
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	6025      	str	r5, [r4, #0]
 80051a8:	bf18      	it	ne
 80051aa:	6059      	strne	r1, [r3, #4]
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	bf08      	it	eq
 80051b0:	f8c8 1000 	streq.w	r1, [r8]
 80051b4:	5162      	str	r2, [r4, r5]
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	4630      	mov	r0, r6
 80051ba:	f000 f82f 	bl	800521c <__malloc_unlock>
 80051be:	f104 000b 	add.w	r0, r4, #11
 80051c2:	1d23      	adds	r3, r4, #4
 80051c4:	f020 0007 	bic.w	r0, r0, #7
 80051c8:	1ac2      	subs	r2, r0, r3
 80051ca:	bf1c      	itt	ne
 80051cc:	1a1b      	subne	r3, r3, r0
 80051ce:	50a3      	strne	r3, [r4, r2]
 80051d0:	e7af      	b.n	8005132 <_malloc_r+0x22>
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	bf0c      	ite	eq
 80051d8:	f8c8 2000 	streq.w	r2, [r8]
 80051dc:	605a      	strne	r2, [r3, #4]
 80051de:	e7eb      	b.n	80051b8 <_malloc_r+0xa8>
 80051e0:	4623      	mov	r3, r4
 80051e2:	6864      	ldr	r4, [r4, #4]
 80051e4:	e7ae      	b.n	8005144 <_malloc_r+0x34>
 80051e6:	463c      	mov	r4, r7
 80051e8:	687f      	ldr	r7, [r7, #4]
 80051ea:	e7b6      	b.n	800515a <_malloc_r+0x4a>
 80051ec:	461a      	mov	r2, r3
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	d1fb      	bne.n	80051ec <_malloc_r+0xdc>
 80051f4:	2300      	movs	r3, #0
 80051f6:	6053      	str	r3, [r2, #4]
 80051f8:	e7de      	b.n	80051b8 <_malloc_r+0xa8>
 80051fa:	230c      	movs	r3, #12
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 f80c 	bl	800521c <__malloc_unlock>
 8005204:	e794      	b.n	8005130 <_malloc_r+0x20>
 8005206:	6005      	str	r5, [r0, #0]
 8005208:	e7d6      	b.n	80051b8 <_malloc_r+0xa8>
 800520a:	bf00      	nop
 800520c:	200007e4 	.word	0x200007e4

08005210 <__malloc_lock>:
 8005210:	4801      	ldr	r0, [pc, #4]	@ (8005218 <__malloc_lock+0x8>)
 8005212:	f7ff b8aa 	b.w	800436a <__retarget_lock_acquire_recursive>
 8005216:	bf00      	nop
 8005218:	200007dc 	.word	0x200007dc

0800521c <__malloc_unlock>:
 800521c:	4801      	ldr	r0, [pc, #4]	@ (8005224 <__malloc_unlock+0x8>)
 800521e:	f7ff b8a5 	b.w	800436c <__retarget_lock_release_recursive>
 8005222:	bf00      	nop
 8005224:	200007dc 	.word	0x200007dc

08005228 <_Balloc>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	69c6      	ldr	r6, [r0, #28]
 800522c:	4604      	mov	r4, r0
 800522e:	460d      	mov	r5, r1
 8005230:	b976      	cbnz	r6, 8005250 <_Balloc+0x28>
 8005232:	2010      	movs	r0, #16
 8005234:	f7ff ff42 	bl	80050bc <malloc>
 8005238:	4602      	mov	r2, r0
 800523a:	61e0      	str	r0, [r4, #28]
 800523c:	b920      	cbnz	r0, 8005248 <_Balloc+0x20>
 800523e:	4b18      	ldr	r3, [pc, #96]	@ (80052a0 <_Balloc+0x78>)
 8005240:	4818      	ldr	r0, [pc, #96]	@ (80052a4 <_Balloc+0x7c>)
 8005242:	216b      	movs	r1, #107	@ 0x6b
 8005244:	f000 fda0 	bl	8005d88 <__assert_func>
 8005248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800524c:	6006      	str	r6, [r0, #0]
 800524e:	60c6      	str	r6, [r0, #12]
 8005250:	69e6      	ldr	r6, [r4, #28]
 8005252:	68f3      	ldr	r3, [r6, #12]
 8005254:	b183      	cbz	r3, 8005278 <_Balloc+0x50>
 8005256:	69e3      	ldr	r3, [r4, #28]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800525e:	b9b8      	cbnz	r0, 8005290 <_Balloc+0x68>
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f605 	lsl.w	r6, r1, r5
 8005266:	1d72      	adds	r2, r6, #5
 8005268:	0092      	lsls	r2, r2, #2
 800526a:	4620      	mov	r0, r4
 800526c:	f000 fdaa 	bl	8005dc4 <_calloc_r>
 8005270:	b160      	cbz	r0, 800528c <_Balloc+0x64>
 8005272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005276:	e00e      	b.n	8005296 <_Balloc+0x6e>
 8005278:	2221      	movs	r2, #33	@ 0x21
 800527a:	2104      	movs	r1, #4
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fda1 	bl	8005dc4 <_calloc_r>
 8005282:	69e3      	ldr	r3, [r4, #28]
 8005284:	60f0      	str	r0, [r6, #12]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e4      	bne.n	8005256 <_Balloc+0x2e>
 800528c:	2000      	movs	r0, #0
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	6802      	ldr	r2, [r0, #0]
 8005292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005296:	2300      	movs	r3, #0
 8005298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800529c:	e7f7      	b.n	800528e <_Balloc+0x66>
 800529e:	bf00      	nop
 80052a0:	08006c01 	.word	0x08006c01
 80052a4:	08006c81 	.word	0x08006c81

080052a8 <_Bfree>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	69c6      	ldr	r6, [r0, #28]
 80052ac:	4605      	mov	r5, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b976      	cbnz	r6, 80052d0 <_Bfree+0x28>
 80052b2:	2010      	movs	r0, #16
 80052b4:	f7ff ff02 	bl	80050bc <malloc>
 80052b8:	4602      	mov	r2, r0
 80052ba:	61e8      	str	r0, [r5, #28]
 80052bc:	b920      	cbnz	r0, 80052c8 <_Bfree+0x20>
 80052be:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <_Bfree+0x3c>)
 80052c0:	4809      	ldr	r0, [pc, #36]	@ (80052e8 <_Bfree+0x40>)
 80052c2:	218f      	movs	r1, #143	@ 0x8f
 80052c4:	f000 fd60 	bl	8005d88 <__assert_func>
 80052c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052cc:	6006      	str	r6, [r0, #0]
 80052ce:	60c6      	str	r6, [r0, #12]
 80052d0:	b13c      	cbz	r4, 80052e2 <_Bfree+0x3a>
 80052d2:	69eb      	ldr	r3, [r5, #28]
 80052d4:	6862      	ldr	r2, [r4, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052dc:	6021      	str	r1, [r4, #0]
 80052de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	08006c01 	.word	0x08006c01
 80052e8:	08006c81 	.word	0x08006c81

080052ec <__multadd>:
 80052ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f0:	690d      	ldr	r5, [r1, #16]
 80052f2:	4607      	mov	r7, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	461e      	mov	r6, r3
 80052f8:	f101 0c14 	add.w	ip, r1, #20
 80052fc:	2000      	movs	r0, #0
 80052fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005302:	b299      	uxth	r1, r3
 8005304:	fb02 6101 	mla	r1, r2, r1, r6
 8005308:	0c1e      	lsrs	r6, r3, #16
 800530a:	0c0b      	lsrs	r3, r1, #16
 800530c:	fb02 3306 	mla	r3, r2, r6, r3
 8005310:	b289      	uxth	r1, r1
 8005312:	3001      	adds	r0, #1
 8005314:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005318:	4285      	cmp	r5, r0
 800531a:	f84c 1b04 	str.w	r1, [ip], #4
 800531e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005322:	dcec      	bgt.n	80052fe <__multadd+0x12>
 8005324:	b30e      	cbz	r6, 800536a <__multadd+0x7e>
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	42ab      	cmp	r3, r5
 800532a:	dc19      	bgt.n	8005360 <__multadd+0x74>
 800532c:	6861      	ldr	r1, [r4, #4]
 800532e:	4638      	mov	r0, r7
 8005330:	3101      	adds	r1, #1
 8005332:	f7ff ff79 	bl	8005228 <_Balloc>
 8005336:	4680      	mov	r8, r0
 8005338:	b928      	cbnz	r0, 8005346 <__multadd+0x5a>
 800533a:	4602      	mov	r2, r0
 800533c:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <__multadd+0x84>)
 800533e:	480d      	ldr	r0, [pc, #52]	@ (8005374 <__multadd+0x88>)
 8005340:	21ba      	movs	r1, #186	@ 0xba
 8005342:	f000 fd21 	bl	8005d88 <__assert_func>
 8005346:	6922      	ldr	r2, [r4, #16]
 8005348:	3202      	adds	r2, #2
 800534a:	f104 010c 	add.w	r1, r4, #12
 800534e:	0092      	lsls	r2, r2, #2
 8005350:	300c      	adds	r0, #12
 8005352:	f7ff f80c 	bl	800436e <memcpy>
 8005356:	4621      	mov	r1, r4
 8005358:	4638      	mov	r0, r7
 800535a:	f7ff ffa5 	bl	80052a8 <_Bfree>
 800535e:	4644      	mov	r4, r8
 8005360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005364:	3501      	adds	r5, #1
 8005366:	615e      	str	r6, [r3, #20]
 8005368:	6125      	str	r5, [r4, #16]
 800536a:	4620      	mov	r0, r4
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005370:	08006c70 	.word	0x08006c70
 8005374:	08006c81 	.word	0x08006c81

08005378 <__hi0bits>:
 8005378:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800537c:	4603      	mov	r3, r0
 800537e:	bf36      	itet	cc
 8005380:	0403      	lslcc	r3, r0, #16
 8005382:	2000      	movcs	r0, #0
 8005384:	2010      	movcc	r0, #16
 8005386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800538a:	bf3c      	itt	cc
 800538c:	021b      	lslcc	r3, r3, #8
 800538e:	3008      	addcc	r0, #8
 8005390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005394:	bf3c      	itt	cc
 8005396:	011b      	lslcc	r3, r3, #4
 8005398:	3004      	addcc	r0, #4
 800539a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539e:	bf3c      	itt	cc
 80053a0:	009b      	lslcc	r3, r3, #2
 80053a2:	3002      	addcc	r0, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	db05      	blt.n	80053b4 <__hi0bits+0x3c>
 80053a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80053ac:	f100 0001 	add.w	r0, r0, #1
 80053b0:	bf08      	it	eq
 80053b2:	2020      	moveq	r0, #32
 80053b4:	4770      	bx	lr

080053b6 <__lo0bits>:
 80053b6:	6803      	ldr	r3, [r0, #0]
 80053b8:	4602      	mov	r2, r0
 80053ba:	f013 0007 	ands.w	r0, r3, #7
 80053be:	d00b      	beq.n	80053d8 <__lo0bits+0x22>
 80053c0:	07d9      	lsls	r1, r3, #31
 80053c2:	d421      	bmi.n	8005408 <__lo0bits+0x52>
 80053c4:	0798      	lsls	r0, r3, #30
 80053c6:	bf49      	itett	mi
 80053c8:	085b      	lsrmi	r3, r3, #1
 80053ca:	089b      	lsrpl	r3, r3, #2
 80053cc:	2001      	movmi	r0, #1
 80053ce:	6013      	strmi	r3, [r2, #0]
 80053d0:	bf5c      	itt	pl
 80053d2:	6013      	strpl	r3, [r2, #0]
 80053d4:	2002      	movpl	r0, #2
 80053d6:	4770      	bx	lr
 80053d8:	b299      	uxth	r1, r3
 80053da:	b909      	cbnz	r1, 80053e0 <__lo0bits+0x2a>
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	2010      	movs	r0, #16
 80053e0:	b2d9      	uxtb	r1, r3
 80053e2:	b909      	cbnz	r1, 80053e8 <__lo0bits+0x32>
 80053e4:	3008      	adds	r0, #8
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	0719      	lsls	r1, r3, #28
 80053ea:	bf04      	itt	eq
 80053ec:	091b      	lsreq	r3, r3, #4
 80053ee:	3004      	addeq	r0, #4
 80053f0:	0799      	lsls	r1, r3, #30
 80053f2:	bf04      	itt	eq
 80053f4:	089b      	lsreq	r3, r3, #2
 80053f6:	3002      	addeq	r0, #2
 80053f8:	07d9      	lsls	r1, r3, #31
 80053fa:	d403      	bmi.n	8005404 <__lo0bits+0x4e>
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	f100 0001 	add.w	r0, r0, #1
 8005402:	d003      	beq.n	800540c <__lo0bits+0x56>
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4770      	bx	lr
 8005408:	2000      	movs	r0, #0
 800540a:	4770      	bx	lr
 800540c:	2020      	movs	r0, #32
 800540e:	4770      	bx	lr

08005410 <__i2b>:
 8005410:	b510      	push	{r4, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	2101      	movs	r1, #1
 8005416:	f7ff ff07 	bl	8005228 <_Balloc>
 800541a:	4602      	mov	r2, r0
 800541c:	b928      	cbnz	r0, 800542a <__i2b+0x1a>
 800541e:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <__i2b+0x24>)
 8005420:	4805      	ldr	r0, [pc, #20]	@ (8005438 <__i2b+0x28>)
 8005422:	f240 1145 	movw	r1, #325	@ 0x145
 8005426:	f000 fcaf 	bl	8005d88 <__assert_func>
 800542a:	2301      	movs	r3, #1
 800542c:	6144      	str	r4, [r0, #20]
 800542e:	6103      	str	r3, [r0, #16]
 8005430:	bd10      	pop	{r4, pc}
 8005432:	bf00      	nop
 8005434:	08006c70 	.word	0x08006c70
 8005438:	08006c81 	.word	0x08006c81

0800543c <__multiply>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	4614      	mov	r4, r2
 8005442:	690a      	ldr	r2, [r1, #16]
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	bfa8      	it	ge
 800544a:	4623      	movge	r3, r4
 800544c:	460f      	mov	r7, r1
 800544e:	bfa4      	itt	ge
 8005450:	460c      	movge	r4, r1
 8005452:	461f      	movge	r7, r3
 8005454:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005458:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	6861      	ldr	r1, [r4, #4]
 8005460:	eb0a 0609 	add.w	r6, sl, r9
 8005464:	42b3      	cmp	r3, r6
 8005466:	b085      	sub	sp, #20
 8005468:	bfb8      	it	lt
 800546a:	3101      	addlt	r1, #1
 800546c:	f7ff fedc 	bl	8005228 <_Balloc>
 8005470:	b930      	cbnz	r0, 8005480 <__multiply+0x44>
 8005472:	4602      	mov	r2, r0
 8005474:	4b44      	ldr	r3, [pc, #272]	@ (8005588 <__multiply+0x14c>)
 8005476:	4845      	ldr	r0, [pc, #276]	@ (800558c <__multiply+0x150>)
 8005478:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800547c:	f000 fc84 	bl	8005d88 <__assert_func>
 8005480:	f100 0514 	add.w	r5, r0, #20
 8005484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005488:	462b      	mov	r3, r5
 800548a:	2200      	movs	r2, #0
 800548c:	4543      	cmp	r3, r8
 800548e:	d321      	bcc.n	80054d4 <__multiply+0x98>
 8005490:	f107 0114 	add.w	r1, r7, #20
 8005494:	f104 0214 	add.w	r2, r4, #20
 8005498:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800549c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	1b13      	subs	r3, r2, r4
 80054a4:	3b15      	subs	r3, #21
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	3304      	adds	r3, #4
 80054ac:	f104 0715 	add.w	r7, r4, #21
 80054b0:	42ba      	cmp	r2, r7
 80054b2:	bf38      	it	cc
 80054b4:	2304      	movcc	r3, #4
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	9b02      	ldr	r3, [sp, #8]
 80054ba:	9103      	str	r1, [sp, #12]
 80054bc:	428b      	cmp	r3, r1
 80054be:	d80c      	bhi.n	80054da <__multiply+0x9e>
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	dd03      	ble.n	80054cc <__multiply+0x90>
 80054c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05b      	beq.n	8005584 <__multiply+0x148>
 80054cc:	6106      	str	r6, [r0, #16]
 80054ce:	b005      	add	sp, #20
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	f843 2b04 	str.w	r2, [r3], #4
 80054d8:	e7d8      	b.n	800548c <__multiply+0x50>
 80054da:	f8b1 a000 	ldrh.w	sl, [r1]
 80054de:	f1ba 0f00 	cmp.w	sl, #0
 80054e2:	d024      	beq.n	800552e <__multiply+0xf2>
 80054e4:	f104 0e14 	add.w	lr, r4, #20
 80054e8:	46a9      	mov	r9, r5
 80054ea:	f04f 0c00 	mov.w	ip, #0
 80054ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054f2:	f8d9 3000 	ldr.w	r3, [r9]
 80054f6:	fa1f fb87 	uxth.w	fp, r7
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8005500:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005504:	f8d9 7000 	ldr.w	r7, [r9]
 8005508:	4463      	add	r3, ip
 800550a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800550e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005512:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800551c:	4572      	cmp	r2, lr
 800551e:	f849 3b04 	str.w	r3, [r9], #4
 8005522:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005526:	d8e2      	bhi.n	80054ee <__multiply+0xb2>
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	f845 c003 	str.w	ip, [r5, r3]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005534:	3104      	adds	r1, #4
 8005536:	f1b9 0f00 	cmp.w	r9, #0
 800553a:	d021      	beq.n	8005580 <__multiply+0x144>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	f104 0c14 	add.w	ip, r4, #20
 8005542:	46ae      	mov	lr, r5
 8005544:	f04f 0a00 	mov.w	sl, #0
 8005548:	f8bc b000 	ldrh.w	fp, [ip]
 800554c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005550:	fb09 770b 	mla	r7, r9, fp, r7
 8005554:	4457      	add	r7, sl
 8005556:	b29b      	uxth	r3, r3
 8005558:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800555c:	f84e 3b04 	str.w	r3, [lr], #4
 8005560:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005568:	f8be 3000 	ldrh.w	r3, [lr]
 800556c:	fb09 330a 	mla	r3, r9, sl, r3
 8005570:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005574:	4562      	cmp	r2, ip
 8005576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800557a:	d8e5      	bhi.n	8005548 <__multiply+0x10c>
 800557c:	9f01      	ldr	r7, [sp, #4]
 800557e:	51eb      	str	r3, [r5, r7]
 8005580:	3504      	adds	r5, #4
 8005582:	e799      	b.n	80054b8 <__multiply+0x7c>
 8005584:	3e01      	subs	r6, #1
 8005586:	e79b      	b.n	80054c0 <__multiply+0x84>
 8005588:	08006c70 	.word	0x08006c70
 800558c:	08006c81 	.word	0x08006c81

08005590 <__pow5mult>:
 8005590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005594:	4615      	mov	r5, r2
 8005596:	f012 0203 	ands.w	r2, r2, #3
 800559a:	4607      	mov	r7, r0
 800559c:	460e      	mov	r6, r1
 800559e:	d007      	beq.n	80055b0 <__pow5mult+0x20>
 80055a0:	4c25      	ldr	r4, [pc, #148]	@ (8005638 <__pow5mult+0xa8>)
 80055a2:	3a01      	subs	r2, #1
 80055a4:	2300      	movs	r3, #0
 80055a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055aa:	f7ff fe9f 	bl	80052ec <__multadd>
 80055ae:	4606      	mov	r6, r0
 80055b0:	10ad      	asrs	r5, r5, #2
 80055b2:	d03d      	beq.n	8005630 <__pow5mult+0xa0>
 80055b4:	69fc      	ldr	r4, [r7, #28]
 80055b6:	b97c      	cbnz	r4, 80055d8 <__pow5mult+0x48>
 80055b8:	2010      	movs	r0, #16
 80055ba:	f7ff fd7f 	bl	80050bc <malloc>
 80055be:	4602      	mov	r2, r0
 80055c0:	61f8      	str	r0, [r7, #28]
 80055c2:	b928      	cbnz	r0, 80055d0 <__pow5mult+0x40>
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <__pow5mult+0xac>)
 80055c6:	481e      	ldr	r0, [pc, #120]	@ (8005640 <__pow5mult+0xb0>)
 80055c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055cc:	f000 fbdc 	bl	8005d88 <__assert_func>
 80055d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055d4:	6004      	str	r4, [r0, #0]
 80055d6:	60c4      	str	r4, [r0, #12]
 80055d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055e0:	b94c      	cbnz	r4, 80055f6 <__pow5mult+0x66>
 80055e2:	f240 2171 	movw	r1, #625	@ 0x271
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff ff12 	bl	8005410 <__i2b>
 80055ec:	2300      	movs	r3, #0
 80055ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80055f2:	4604      	mov	r4, r0
 80055f4:	6003      	str	r3, [r0, #0]
 80055f6:	f04f 0900 	mov.w	r9, #0
 80055fa:	07eb      	lsls	r3, r5, #31
 80055fc:	d50a      	bpl.n	8005614 <__pow5mult+0x84>
 80055fe:	4631      	mov	r1, r6
 8005600:	4622      	mov	r2, r4
 8005602:	4638      	mov	r0, r7
 8005604:	f7ff ff1a 	bl	800543c <__multiply>
 8005608:	4631      	mov	r1, r6
 800560a:	4680      	mov	r8, r0
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff fe4b 	bl	80052a8 <_Bfree>
 8005612:	4646      	mov	r6, r8
 8005614:	106d      	asrs	r5, r5, #1
 8005616:	d00b      	beq.n	8005630 <__pow5mult+0xa0>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	b938      	cbnz	r0, 800562c <__pow5mult+0x9c>
 800561c:	4622      	mov	r2, r4
 800561e:	4621      	mov	r1, r4
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff ff0b 	bl	800543c <__multiply>
 8005626:	6020      	str	r0, [r4, #0]
 8005628:	f8c0 9000 	str.w	r9, [r0]
 800562c:	4604      	mov	r4, r0
 800562e:	e7e4      	b.n	80055fa <__pow5mult+0x6a>
 8005630:	4630      	mov	r0, r6
 8005632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005636:	bf00      	nop
 8005638:	08006cdc 	.word	0x08006cdc
 800563c:	08006c01 	.word	0x08006c01
 8005640:	08006c81 	.word	0x08006c81

08005644 <__lshift>:
 8005644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	6849      	ldr	r1, [r1, #4]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	4607      	mov	r7, r0
 8005656:	4691      	mov	r9, r2
 8005658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800565c:	f108 0601 	add.w	r6, r8, #1
 8005660:	42b3      	cmp	r3, r6
 8005662:	db0b      	blt.n	800567c <__lshift+0x38>
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff fddf 	bl	8005228 <_Balloc>
 800566a:	4605      	mov	r5, r0
 800566c:	b948      	cbnz	r0, 8005682 <__lshift+0x3e>
 800566e:	4602      	mov	r2, r0
 8005670:	4b28      	ldr	r3, [pc, #160]	@ (8005714 <__lshift+0xd0>)
 8005672:	4829      	ldr	r0, [pc, #164]	@ (8005718 <__lshift+0xd4>)
 8005674:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005678:	f000 fb86 	bl	8005d88 <__assert_func>
 800567c:	3101      	adds	r1, #1
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	e7ee      	b.n	8005660 <__lshift+0x1c>
 8005682:	2300      	movs	r3, #0
 8005684:	f100 0114 	add.w	r1, r0, #20
 8005688:	f100 0210 	add.w	r2, r0, #16
 800568c:	4618      	mov	r0, r3
 800568e:	4553      	cmp	r3, sl
 8005690:	db33      	blt.n	80056fa <__lshift+0xb6>
 8005692:	6920      	ldr	r0, [r4, #16]
 8005694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005698:	f104 0314 	add.w	r3, r4, #20
 800569c:	f019 091f 	ands.w	r9, r9, #31
 80056a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056a8:	d02b      	beq.n	8005702 <__lshift+0xbe>
 80056aa:	f1c9 0e20 	rsb	lr, r9, #32
 80056ae:	468a      	mov	sl, r1
 80056b0:	2200      	movs	r2, #0
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	fa00 f009 	lsl.w	r0, r0, r9
 80056b8:	4310      	orrs	r0, r2
 80056ba:	f84a 0b04 	str.w	r0, [sl], #4
 80056be:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c2:	459c      	cmp	ip, r3
 80056c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80056c8:	d8f3      	bhi.n	80056b2 <__lshift+0x6e>
 80056ca:	ebac 0304 	sub.w	r3, ip, r4
 80056ce:	3b15      	subs	r3, #21
 80056d0:	f023 0303 	bic.w	r3, r3, #3
 80056d4:	3304      	adds	r3, #4
 80056d6:	f104 0015 	add.w	r0, r4, #21
 80056da:	4584      	cmp	ip, r0
 80056dc:	bf38      	it	cc
 80056de:	2304      	movcc	r3, #4
 80056e0:	50ca      	str	r2, [r1, r3]
 80056e2:	b10a      	cbz	r2, 80056e8 <__lshift+0xa4>
 80056e4:	f108 0602 	add.w	r6, r8, #2
 80056e8:	3e01      	subs	r6, #1
 80056ea:	4638      	mov	r0, r7
 80056ec:	612e      	str	r6, [r5, #16]
 80056ee:	4621      	mov	r1, r4
 80056f0:	f7ff fdda 	bl	80052a8 <_Bfree>
 80056f4:	4628      	mov	r0, r5
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80056fe:	3301      	adds	r3, #1
 8005700:	e7c5      	b.n	800568e <__lshift+0x4a>
 8005702:	3904      	subs	r1, #4
 8005704:	f853 2b04 	ldr.w	r2, [r3], #4
 8005708:	f841 2f04 	str.w	r2, [r1, #4]!
 800570c:	459c      	cmp	ip, r3
 800570e:	d8f9      	bhi.n	8005704 <__lshift+0xc0>
 8005710:	e7ea      	b.n	80056e8 <__lshift+0xa4>
 8005712:	bf00      	nop
 8005714:	08006c70 	.word	0x08006c70
 8005718:	08006c81 	.word	0x08006c81

0800571c <__mcmp>:
 800571c:	690a      	ldr	r2, [r1, #16]
 800571e:	4603      	mov	r3, r0
 8005720:	6900      	ldr	r0, [r0, #16]
 8005722:	1a80      	subs	r0, r0, r2
 8005724:	b530      	push	{r4, r5, lr}
 8005726:	d10e      	bne.n	8005746 <__mcmp+0x2a>
 8005728:	3314      	adds	r3, #20
 800572a:	3114      	adds	r1, #20
 800572c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005730:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800573c:	4295      	cmp	r5, r2
 800573e:	d003      	beq.n	8005748 <__mcmp+0x2c>
 8005740:	d205      	bcs.n	800574e <__mcmp+0x32>
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	bd30      	pop	{r4, r5, pc}
 8005748:	42a3      	cmp	r3, r4
 800574a:	d3f3      	bcc.n	8005734 <__mcmp+0x18>
 800574c:	e7fb      	b.n	8005746 <__mcmp+0x2a>
 800574e:	2001      	movs	r0, #1
 8005750:	e7f9      	b.n	8005746 <__mcmp+0x2a>
	...

08005754 <__mdiff>:
 8005754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4689      	mov	r9, r1
 800575a:	4606      	mov	r6, r0
 800575c:	4611      	mov	r1, r2
 800575e:	4648      	mov	r0, r9
 8005760:	4614      	mov	r4, r2
 8005762:	f7ff ffdb 	bl	800571c <__mcmp>
 8005766:	1e05      	subs	r5, r0, #0
 8005768:	d112      	bne.n	8005790 <__mdiff+0x3c>
 800576a:	4629      	mov	r1, r5
 800576c:	4630      	mov	r0, r6
 800576e:	f7ff fd5b 	bl	8005228 <_Balloc>
 8005772:	4602      	mov	r2, r0
 8005774:	b928      	cbnz	r0, 8005782 <__mdiff+0x2e>
 8005776:	4b3f      	ldr	r3, [pc, #252]	@ (8005874 <__mdiff+0x120>)
 8005778:	f240 2137 	movw	r1, #567	@ 0x237
 800577c:	483e      	ldr	r0, [pc, #248]	@ (8005878 <__mdiff+0x124>)
 800577e:	f000 fb03 	bl	8005d88 <__assert_func>
 8005782:	2301      	movs	r3, #1
 8005784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005788:	4610      	mov	r0, r2
 800578a:	b003      	add	sp, #12
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	bfbc      	itt	lt
 8005792:	464b      	movlt	r3, r9
 8005794:	46a1      	movlt	r9, r4
 8005796:	4630      	mov	r0, r6
 8005798:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800579c:	bfba      	itte	lt
 800579e:	461c      	movlt	r4, r3
 80057a0:	2501      	movlt	r5, #1
 80057a2:	2500      	movge	r5, #0
 80057a4:	f7ff fd40 	bl	8005228 <_Balloc>
 80057a8:	4602      	mov	r2, r0
 80057aa:	b918      	cbnz	r0, 80057b4 <__mdiff+0x60>
 80057ac:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <__mdiff+0x120>)
 80057ae:	f240 2145 	movw	r1, #581	@ 0x245
 80057b2:	e7e3      	b.n	800577c <__mdiff+0x28>
 80057b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057b8:	6926      	ldr	r6, [r4, #16]
 80057ba:	60c5      	str	r5, [r0, #12]
 80057bc:	f109 0310 	add.w	r3, r9, #16
 80057c0:	f109 0514 	add.w	r5, r9, #20
 80057c4:	f104 0e14 	add.w	lr, r4, #20
 80057c8:	f100 0b14 	add.w	fp, r0, #20
 80057cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	46d9      	mov	r9, fp
 80057d8:	f04f 0c00 	mov.w	ip, #0
 80057dc:	9b01      	ldr	r3, [sp, #4]
 80057de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	fa1f f38a 	uxth.w	r3, sl
 80057ec:	4619      	mov	r1, r3
 80057ee:	b283      	uxth	r3, r0
 80057f0:	1acb      	subs	r3, r1, r3
 80057f2:	0c00      	lsrs	r0, r0, #16
 80057f4:	4463      	add	r3, ip
 80057f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80057fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005804:	4576      	cmp	r6, lr
 8005806:	f849 3b04 	str.w	r3, [r9], #4
 800580a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800580e:	d8e5      	bhi.n	80057dc <__mdiff+0x88>
 8005810:	1b33      	subs	r3, r6, r4
 8005812:	3b15      	subs	r3, #21
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	3415      	adds	r4, #21
 800581a:	3304      	adds	r3, #4
 800581c:	42a6      	cmp	r6, r4
 800581e:	bf38      	it	cc
 8005820:	2304      	movcc	r3, #4
 8005822:	441d      	add	r5, r3
 8005824:	445b      	add	r3, fp
 8005826:	461e      	mov	r6, r3
 8005828:	462c      	mov	r4, r5
 800582a:	4544      	cmp	r4, r8
 800582c:	d30e      	bcc.n	800584c <__mdiff+0xf8>
 800582e:	f108 0103 	add.w	r1, r8, #3
 8005832:	1b49      	subs	r1, r1, r5
 8005834:	f021 0103 	bic.w	r1, r1, #3
 8005838:	3d03      	subs	r5, #3
 800583a:	45a8      	cmp	r8, r5
 800583c:	bf38      	it	cc
 800583e:	2100      	movcc	r1, #0
 8005840:	440b      	add	r3, r1
 8005842:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005846:	b191      	cbz	r1, 800586e <__mdiff+0x11a>
 8005848:	6117      	str	r7, [r2, #16]
 800584a:	e79d      	b.n	8005788 <__mdiff+0x34>
 800584c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005850:	46e6      	mov	lr, ip
 8005852:	0c08      	lsrs	r0, r1, #16
 8005854:	fa1c fc81 	uxtah	ip, ip, r1
 8005858:	4471      	add	r1, lr
 800585a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800585e:	b289      	uxth	r1, r1
 8005860:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005864:	f846 1b04 	str.w	r1, [r6], #4
 8005868:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800586c:	e7dd      	b.n	800582a <__mdiff+0xd6>
 800586e:	3f01      	subs	r7, #1
 8005870:	e7e7      	b.n	8005842 <__mdiff+0xee>
 8005872:	bf00      	nop
 8005874:	08006c70 	.word	0x08006c70
 8005878:	08006c81 	.word	0x08006c81

0800587c <__d2b>:
 800587c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005880:	460f      	mov	r7, r1
 8005882:	2101      	movs	r1, #1
 8005884:	ec59 8b10 	vmov	r8, r9, d0
 8005888:	4616      	mov	r6, r2
 800588a:	f7ff fccd 	bl	8005228 <_Balloc>
 800588e:	4604      	mov	r4, r0
 8005890:	b930      	cbnz	r0, 80058a0 <__d2b+0x24>
 8005892:	4602      	mov	r2, r0
 8005894:	4b23      	ldr	r3, [pc, #140]	@ (8005924 <__d2b+0xa8>)
 8005896:	4824      	ldr	r0, [pc, #144]	@ (8005928 <__d2b+0xac>)
 8005898:	f240 310f 	movw	r1, #783	@ 0x30f
 800589c:	f000 fa74 	bl	8005d88 <__assert_func>
 80058a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058a8:	b10d      	cbz	r5, 80058ae <__d2b+0x32>
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	f1b8 0300 	subs.w	r3, r8, #0
 80058b4:	d023      	beq.n	80058fe <__d2b+0x82>
 80058b6:	4668      	mov	r0, sp
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	f7ff fd7c 	bl	80053b6 <__lo0bits>
 80058be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058c2:	b1d0      	cbz	r0, 80058fa <__d2b+0x7e>
 80058c4:	f1c0 0320 	rsb	r3, r0, #32
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	430b      	orrs	r3, r1
 80058ce:	40c2      	lsrs	r2, r0
 80058d0:	6163      	str	r3, [r4, #20]
 80058d2:	9201      	str	r2, [sp, #4]
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	61a3      	str	r3, [r4, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf0c      	ite	eq
 80058dc:	2201      	moveq	r2, #1
 80058de:	2202      	movne	r2, #2
 80058e0:	6122      	str	r2, [r4, #16]
 80058e2:	b1a5      	cbz	r5, 800590e <__d2b+0x92>
 80058e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058e8:	4405      	add	r5, r0
 80058ea:	603d      	str	r5, [r7, #0]
 80058ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058f0:	6030      	str	r0, [r6, #0]
 80058f2:	4620      	mov	r0, r4
 80058f4:	b003      	add	sp, #12
 80058f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058fa:	6161      	str	r1, [r4, #20]
 80058fc:	e7ea      	b.n	80058d4 <__d2b+0x58>
 80058fe:	a801      	add	r0, sp, #4
 8005900:	f7ff fd59 	bl	80053b6 <__lo0bits>
 8005904:	9b01      	ldr	r3, [sp, #4]
 8005906:	6163      	str	r3, [r4, #20]
 8005908:	3020      	adds	r0, #32
 800590a:	2201      	movs	r2, #1
 800590c:	e7e8      	b.n	80058e0 <__d2b+0x64>
 800590e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005912:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005916:	6038      	str	r0, [r7, #0]
 8005918:	6918      	ldr	r0, [r3, #16]
 800591a:	f7ff fd2d 	bl	8005378 <__hi0bits>
 800591e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005922:	e7e5      	b.n	80058f0 <__d2b+0x74>
 8005924:	08006c70 	.word	0x08006c70
 8005928:	08006c81 	.word	0x08006c81

0800592c <__ssputs_r>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	688e      	ldr	r6, [r1, #8]
 8005932:	461f      	mov	r7, r3
 8005934:	42be      	cmp	r6, r7
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	4682      	mov	sl, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4690      	mov	r8, r2
 800593e:	d82d      	bhi.n	800599c <__ssputs_r+0x70>
 8005940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005948:	d026      	beq.n	8005998 <__ssputs_r+0x6c>
 800594a:	6965      	ldr	r5, [r4, #20]
 800594c:	6909      	ldr	r1, [r1, #16]
 800594e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005952:	eba3 0901 	sub.w	r9, r3, r1
 8005956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800595a:	1c7b      	adds	r3, r7, #1
 800595c:	444b      	add	r3, r9
 800595e:	106d      	asrs	r5, r5, #1
 8005960:	429d      	cmp	r5, r3
 8005962:	bf38      	it	cc
 8005964:	461d      	movcc	r5, r3
 8005966:	0553      	lsls	r3, r2, #21
 8005968:	d527      	bpl.n	80059ba <__ssputs_r+0x8e>
 800596a:	4629      	mov	r1, r5
 800596c:	f7ff fbd0 	bl	8005110 <_malloc_r>
 8005970:	4606      	mov	r6, r0
 8005972:	b360      	cbz	r0, 80059ce <__ssputs_r+0xa2>
 8005974:	6921      	ldr	r1, [r4, #16]
 8005976:	464a      	mov	r2, r9
 8005978:	f7fe fcf9 	bl	800436e <memcpy>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	6126      	str	r6, [r4, #16]
 800598a:	6165      	str	r5, [r4, #20]
 800598c:	444e      	add	r6, r9
 800598e:	eba5 0509 	sub.w	r5, r5, r9
 8005992:	6026      	str	r6, [r4, #0]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	463e      	mov	r6, r7
 8005998:	42be      	cmp	r6, r7
 800599a:	d900      	bls.n	800599e <__ssputs_r+0x72>
 800599c:	463e      	mov	r6, r7
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	4632      	mov	r2, r6
 80059a2:	4641      	mov	r1, r8
 80059a4:	f000 f9c6 	bl	8005d34 <memmove>
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	1b9b      	subs	r3, r3, r6
 80059ac:	60a3      	str	r3, [r4, #8]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4433      	add	r3, r6
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	2000      	movs	r0, #0
 80059b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ba:	462a      	mov	r2, r5
 80059bc:	f000 fa28 	bl	8005e10 <_realloc_r>
 80059c0:	4606      	mov	r6, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d1e0      	bne.n	8005988 <__ssputs_r+0x5c>
 80059c6:	6921      	ldr	r1, [r4, #16]
 80059c8:	4650      	mov	r0, sl
 80059ca:	f7ff fb2d 	bl	8005028 <_free_r>
 80059ce:	230c      	movs	r3, #12
 80059d0:	f8ca 3000 	str.w	r3, [sl]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e7e9      	b.n	80059b6 <__ssputs_r+0x8a>
	...

080059e4 <_svfiprintf_r>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	4698      	mov	r8, r3
 80059ea:	898b      	ldrh	r3, [r1, #12]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	b09d      	sub	sp, #116	@ 0x74
 80059f0:	4607      	mov	r7, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	d510      	bpl.n	8005a1a <_svfiprintf_r+0x36>
 80059f8:	690b      	ldr	r3, [r1, #16]
 80059fa:	b973      	cbnz	r3, 8005a1a <_svfiprintf_r+0x36>
 80059fc:	2140      	movs	r1, #64	@ 0x40
 80059fe:	f7ff fb87 	bl	8005110 <_malloc_r>
 8005a02:	6028      	str	r0, [r5, #0]
 8005a04:	6128      	str	r0, [r5, #16]
 8005a06:	b930      	cbnz	r0, 8005a16 <_svfiprintf_r+0x32>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	b01d      	add	sp, #116	@ 0x74
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	2340      	movs	r3, #64	@ 0x40
 8005a18:	616b      	str	r3, [r5, #20]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1e:	2320      	movs	r3, #32
 8005a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a28:	2330      	movs	r3, #48	@ 0x30
 8005a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bc8 <_svfiprintf_r+0x1e4>
 8005a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a32:	f04f 0901 	mov.w	r9, #1
 8005a36:	4623      	mov	r3, r4
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3e:	b10a      	cbz	r2, 8005a44 <_svfiprintf_r+0x60>
 8005a40:	2a25      	cmp	r2, #37	@ 0x25
 8005a42:	d1f9      	bne.n	8005a38 <_svfiprintf_r+0x54>
 8005a44:	ebba 0b04 	subs.w	fp, sl, r4
 8005a48:	d00b      	beq.n	8005a62 <_svfiprintf_r+0x7e>
 8005a4a:	465b      	mov	r3, fp
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ff6b 	bl	800592c <__ssputs_r>
 8005a56:	3001      	adds	r0, #1
 8005a58:	f000 80a7 	beq.w	8005baa <_svfiprintf_r+0x1c6>
 8005a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a5e:	445a      	add	r2, fp
 8005a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a62:	f89a 3000 	ldrb.w	r3, [sl]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 809f 	beq.w	8005baa <_svfiprintf_r+0x1c6>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a76:	f10a 0a01 	add.w	sl, sl, #1
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	9307      	str	r3, [sp, #28]
 8005a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a84:	4654      	mov	r4, sl
 8005a86:	2205      	movs	r2, #5
 8005a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8c:	484e      	ldr	r0, [pc, #312]	@ (8005bc8 <_svfiprintf_r+0x1e4>)
 8005a8e:	f7fa fba7 	bl	80001e0 <memchr>
 8005a92:	9a04      	ldr	r2, [sp, #16]
 8005a94:	b9d8      	cbnz	r0, 8005ace <_svfiprintf_r+0xea>
 8005a96:	06d0      	lsls	r0, r2, #27
 8005a98:	bf44      	itt	mi
 8005a9a:	2320      	movmi	r3, #32
 8005a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa0:	0711      	lsls	r1, r2, #28
 8005aa2:	bf44      	itt	mi
 8005aa4:	232b      	movmi	r3, #43	@ 0x2b
 8005aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab0:	d015      	beq.n	8005ade <_svfiprintf_r+0xfa>
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	4654      	mov	r4, sl
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f04f 0c0a 	mov.w	ip, #10
 8005abc:	4621      	mov	r1, r4
 8005abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac2:	3b30      	subs	r3, #48	@ 0x30
 8005ac4:	2b09      	cmp	r3, #9
 8005ac6:	d94b      	bls.n	8005b60 <_svfiprintf_r+0x17c>
 8005ac8:	b1b0      	cbz	r0, 8005af8 <_svfiprintf_r+0x114>
 8005aca:	9207      	str	r2, [sp, #28]
 8005acc:	e014      	b.n	8005af8 <_svfiprintf_r+0x114>
 8005ace:	eba0 0308 	sub.w	r3, r0, r8
 8005ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	46a2      	mov	sl, r4
 8005adc:	e7d2      	b.n	8005a84 <_svfiprintf_r+0xa0>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	1d19      	adds	r1, r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	9103      	str	r1, [sp, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bfbb      	ittet	lt
 8005aea:	425b      	neglt	r3, r3
 8005aec:	f042 0202 	orrlt.w	r2, r2, #2
 8005af0:	9307      	strge	r3, [sp, #28]
 8005af2:	9307      	strlt	r3, [sp, #28]
 8005af4:	bfb8      	it	lt
 8005af6:	9204      	strlt	r2, [sp, #16]
 8005af8:	7823      	ldrb	r3, [r4, #0]
 8005afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005afc:	d10a      	bne.n	8005b14 <_svfiprintf_r+0x130>
 8005afe:	7863      	ldrb	r3, [r4, #1]
 8005b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b02:	d132      	bne.n	8005b6a <_svfiprintf_r+0x186>
 8005b04:	9b03      	ldr	r3, [sp, #12]
 8005b06:	1d1a      	adds	r2, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	9203      	str	r2, [sp, #12]
 8005b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b10:	3402      	adds	r4, #2
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bd8 <_svfiprintf_r+0x1f4>
 8005b18:	7821      	ldrb	r1, [r4, #0]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	f7fa fb5f 	bl	80001e0 <memchr>
 8005b22:	b138      	cbz	r0, 8005b34 <_svfiprintf_r+0x150>
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	eba0 000a 	sub.w	r0, r0, sl
 8005b2a:	2240      	movs	r2, #64	@ 0x40
 8005b2c:	4082      	lsls	r2, r0
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	3401      	adds	r4, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b38:	4824      	ldr	r0, [pc, #144]	@ (8005bcc <_svfiprintf_r+0x1e8>)
 8005b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b3e:	2206      	movs	r2, #6
 8005b40:	f7fa fb4e 	bl	80001e0 <memchr>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d036      	beq.n	8005bb6 <_svfiprintf_r+0x1d2>
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <_svfiprintf_r+0x1ec>)
 8005b4a:	bb1b      	cbnz	r3, 8005b94 <_svfiprintf_r+0x1b0>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	3307      	adds	r3, #7
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	3308      	adds	r3, #8
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5a:	4433      	add	r3, r6
 8005b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5e:	e76a      	b.n	8005a36 <_svfiprintf_r+0x52>
 8005b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b64:	460c      	mov	r4, r1
 8005b66:	2001      	movs	r0, #1
 8005b68:	e7a8      	b.n	8005abc <_svfiprintf_r+0xd8>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f04f 0c0a 	mov.w	ip, #10
 8005b76:	4620      	mov	r0, r4
 8005b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7c:	3a30      	subs	r2, #48	@ 0x30
 8005b7e:	2a09      	cmp	r2, #9
 8005b80:	d903      	bls.n	8005b8a <_svfiprintf_r+0x1a6>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c6      	beq.n	8005b14 <_svfiprintf_r+0x130>
 8005b86:	9105      	str	r1, [sp, #20]
 8005b88:	e7c4      	b.n	8005b14 <_svfiprintf_r+0x130>
 8005b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7f0      	b.n	8005b76 <_svfiprintf_r+0x192>
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <_svfiprintf_r+0x1f0>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f7fd fe88 	bl	80038b4 <_printf_float>
 8005ba4:	1c42      	adds	r2, r0, #1
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	d1d6      	bne.n	8005b58 <_svfiprintf_r+0x174>
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	065b      	lsls	r3, r3, #25
 8005bae:	f53f af2d 	bmi.w	8005a0c <_svfiprintf_r+0x28>
 8005bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bb4:	e72c      	b.n	8005a10 <_svfiprintf_r+0x2c>
 8005bb6:	ab03      	add	r3, sp, #12
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	462a      	mov	r2, r5
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <_svfiprintf_r+0x1f0>)
 8005bbe:	a904      	add	r1, sp, #16
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f7fe f90f 	bl	8003de4 <_printf_i>
 8005bc6:	e7ed      	b.n	8005ba4 <_svfiprintf_r+0x1c0>
 8005bc8:	08006dd8 	.word	0x08006dd8
 8005bcc:	08006de2 	.word	0x08006de2
 8005bd0:	080038b5 	.word	0x080038b5
 8005bd4:	0800592d 	.word	0x0800592d
 8005bd8:	08006dde 	.word	0x08006dde

08005bdc <__sflush_r>:
 8005bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be4:	0716      	lsls	r6, r2, #28
 8005be6:	4605      	mov	r5, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d454      	bmi.n	8005c96 <__sflush_r+0xba>
 8005bec:	684b      	ldr	r3, [r1, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc02      	bgt.n	8005bf8 <__sflush_r+0x1c>
 8005bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dd48      	ble.n	8005c8a <__sflush_r+0xae>
 8005bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	d045      	beq.n	8005c8a <__sflush_r+0xae>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c04:	682f      	ldr	r7, [r5, #0]
 8005c06:	6a21      	ldr	r1, [r4, #32]
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	d030      	beq.n	8005c6e <__sflush_r+0x92>
 8005c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	0759      	lsls	r1, r3, #29
 8005c12:	d505      	bpl.n	8005c20 <__sflush_r+0x44>
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c1a:	b10b      	cbz	r3, 8005c20 <__sflush_r+0x44>
 8005c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c24:	6a21      	ldr	r1, [r4, #32]
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	d106      	bne.n	8005c3e <__sflush_r+0x62>
 8005c30:	6829      	ldr	r1, [r5, #0]
 8005c32:	291d      	cmp	r1, #29
 8005c34:	d82b      	bhi.n	8005c8e <__sflush_r+0xb2>
 8005c36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <__sflush_r+0x104>)
 8005c38:	410a      	asrs	r2, r1
 8005c3a:	07d6      	lsls	r6, r2, #31
 8005c3c:	d427      	bmi.n	8005c8e <__sflush_r+0xb2>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	6062      	str	r2, [r4, #4]
 8005c42:	04d9      	lsls	r1, r3, #19
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	6022      	str	r2, [r4, #0]
 8005c48:	d504      	bpl.n	8005c54 <__sflush_r+0x78>
 8005c4a:	1c42      	adds	r2, r0, #1
 8005c4c:	d101      	bne.n	8005c52 <__sflush_r+0x76>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	b903      	cbnz	r3, 8005c54 <__sflush_r+0x78>
 8005c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c56:	602f      	str	r7, [r5, #0]
 8005c58:	b1b9      	cbz	r1, 8005c8a <__sflush_r+0xae>
 8005c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d002      	beq.n	8005c68 <__sflush_r+0x8c>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff f9e0 	bl	8005028 <_free_r>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c6c:	e00d      	b.n	8005c8a <__sflush_r+0xae>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b0      	blx	r6
 8005c74:	4602      	mov	r2, r0
 8005c76:	1c50      	adds	r0, r2, #1
 8005c78:	d1c9      	bne.n	8005c0e <__sflush_r+0x32>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0c6      	beq.n	8005c0e <__sflush_r+0x32>
 8005c80:	2b1d      	cmp	r3, #29
 8005c82:	d001      	beq.n	8005c88 <__sflush_r+0xac>
 8005c84:	2b16      	cmp	r3, #22
 8005c86:	d11e      	bne.n	8005cc6 <__sflush_r+0xea>
 8005c88:	602f      	str	r7, [r5, #0]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e022      	b.n	8005cd4 <__sflush_r+0xf8>
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c92:	b21b      	sxth	r3, r3
 8005c94:	e01b      	b.n	8005cce <__sflush_r+0xf2>
 8005c96:	690f      	ldr	r7, [r1, #16]
 8005c98:	2f00      	cmp	r7, #0
 8005c9a:	d0f6      	beq.n	8005c8a <__sflush_r+0xae>
 8005c9c:	0793      	lsls	r3, r2, #30
 8005c9e:	680e      	ldr	r6, [r1, #0]
 8005ca0:	bf08      	it	eq
 8005ca2:	694b      	ldreq	r3, [r1, #20]
 8005ca4:	600f      	str	r7, [r1, #0]
 8005ca6:	bf18      	it	ne
 8005ca8:	2300      	movne	r3, #0
 8005caa:	eba6 0807 	sub.w	r8, r6, r7
 8005cae:	608b      	str	r3, [r1, #8]
 8005cb0:	f1b8 0f00 	cmp.w	r8, #0
 8005cb4:	dde9      	ble.n	8005c8a <__sflush_r+0xae>
 8005cb6:	6a21      	ldr	r1, [r4, #32]
 8005cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cba:	4643      	mov	r3, r8
 8005cbc:	463a      	mov	r2, r7
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b0      	blx	r6
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	dc08      	bgt.n	8005cd8 <__sflush_r+0xfc>
 8005cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	4407      	add	r7, r0
 8005cda:	eba8 0800 	sub.w	r8, r8, r0
 8005cde:	e7e7      	b.n	8005cb0 <__sflush_r+0xd4>
 8005ce0:	dfbffffe 	.word	0xdfbffffe

08005ce4 <_fflush_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	4605      	mov	r5, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	b913      	cbnz	r3, 8005cf4 <_fflush_r+0x10>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	b118      	cbz	r0, 8005cfe <_fflush_r+0x1a>
 8005cf6:	6a03      	ldr	r3, [r0, #32]
 8005cf8:	b90b      	cbnz	r3, 8005cfe <_fflush_r+0x1a>
 8005cfa:	f7fe fa1f 	bl	800413c <__sinit>
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f3      	beq.n	8005cee <_fflush_r+0xa>
 8005d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d08:	07d0      	lsls	r0, r2, #31
 8005d0a:	d404      	bmi.n	8005d16 <_fflush_r+0x32>
 8005d0c:	0599      	lsls	r1, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_fflush_r+0x32>
 8005d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d12:	f7fe fb2a 	bl	800436a <__retarget_lock_acquire_recursive>
 8005d16:	4628      	mov	r0, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f7ff ff5f 	bl	8005bdc <__sflush_r>
 8005d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d20:	07da      	lsls	r2, r3, #31
 8005d22:	4605      	mov	r5, r0
 8005d24:	d4e4      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	d4e1      	bmi.n	8005cf0 <_fflush_r+0xc>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d2e:	f7fe fb1d 	bl	800436c <__retarget_lock_release_recursive>
 8005d32:	e7dd      	b.n	8005cf0 <_fflush_r+0xc>

08005d34 <memmove>:
 8005d34:	4288      	cmp	r0, r1
 8005d36:	b510      	push	{r4, lr}
 8005d38:	eb01 0402 	add.w	r4, r1, r2
 8005d3c:	d902      	bls.n	8005d44 <memmove+0x10>
 8005d3e:	4284      	cmp	r4, r0
 8005d40:	4623      	mov	r3, r4
 8005d42:	d807      	bhi.n	8005d54 <memmove+0x20>
 8005d44:	1e43      	subs	r3, r0, #1
 8005d46:	42a1      	cmp	r1, r4
 8005d48:	d008      	beq.n	8005d5c <memmove+0x28>
 8005d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d52:	e7f8      	b.n	8005d46 <memmove+0x12>
 8005d54:	4402      	add	r2, r0
 8005d56:	4601      	mov	r1, r0
 8005d58:	428a      	cmp	r2, r1
 8005d5a:	d100      	bne.n	8005d5e <memmove+0x2a>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d66:	e7f7      	b.n	8005d58 <memmove+0x24>

08005d68 <_sbrk_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d06      	ldr	r5, [pc, #24]	@ (8005d84 <_sbrk_r+0x1c>)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f7fb fef2 	bl	8001b5c <_sbrk>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_sbrk_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_sbrk_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	200007d8 	.word	0x200007d8

08005d88 <__assert_func>:
 8005d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <__assert_func+0x2c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4605      	mov	r5, r0
 8005d94:	68d8      	ldr	r0, [r3, #12]
 8005d96:	b954      	cbnz	r4, 8005dae <__assert_func+0x26>
 8005d98:	4b07      	ldr	r3, [pc, #28]	@ (8005db8 <__assert_func+0x30>)
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005da0:	9100      	str	r1, [sp, #0]
 8005da2:	462b      	mov	r3, r5
 8005da4:	4905      	ldr	r1, [pc, #20]	@ (8005dbc <__assert_func+0x34>)
 8005da6:	f000 f86f 	bl	8005e88 <fiprintf>
 8005daa:	f000 f87f 	bl	8005eac <abort>
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__assert_func+0x38>)
 8005db0:	e7f4      	b.n	8005d9c <__assert_func+0x14>
 8005db2:	bf00      	nop
 8005db4:	20000018 	.word	0x20000018
 8005db8:	08006e2e 	.word	0x08006e2e
 8005dbc:	08006e00 	.word	0x08006e00
 8005dc0:	08006df3 	.word	0x08006df3

08005dc4 <_calloc_r>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	fba1 5402 	umull	r5, r4, r1, r2
 8005dca:	b93c      	cbnz	r4, 8005ddc <_calloc_r+0x18>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f7ff f99f 	bl	8005110 <_malloc_r>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	b928      	cbnz	r0, 8005de2 <_calloc_r+0x1e>
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	4630      	mov	r0, r6
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	220c      	movs	r2, #12
 8005dde:	6002      	str	r2, [r0, #0]
 8005de0:	e7f9      	b.n	8005dd6 <_calloc_r+0x12>
 8005de2:	462a      	mov	r2, r5
 8005de4:	4621      	mov	r1, r4
 8005de6:	f7fe fa42 	bl	800426e <memset>
 8005dea:	e7f5      	b.n	8005dd8 <_calloc_r+0x14>

08005dec <__ascii_mbtowc>:
 8005dec:	b082      	sub	sp, #8
 8005dee:	b901      	cbnz	r1, 8005df2 <__ascii_mbtowc+0x6>
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	b142      	cbz	r2, 8005e06 <__ascii_mbtowc+0x1a>
 8005df4:	b14b      	cbz	r3, 8005e0a <__ascii_mbtowc+0x1e>
 8005df6:	7813      	ldrb	r3, [r2, #0]
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	1e10      	subs	r0, r2, #0
 8005dfe:	bf18      	it	ne
 8005e00:	2001      	movne	r0, #1
 8005e02:	b002      	add	sp, #8
 8005e04:	4770      	bx	lr
 8005e06:	4610      	mov	r0, r2
 8005e08:	e7fb      	b.n	8005e02 <__ascii_mbtowc+0x16>
 8005e0a:	f06f 0001 	mvn.w	r0, #1
 8005e0e:	e7f8      	b.n	8005e02 <__ascii_mbtowc+0x16>

08005e10 <_realloc_r>:
 8005e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e14:	4680      	mov	r8, r0
 8005e16:	4615      	mov	r5, r2
 8005e18:	460c      	mov	r4, r1
 8005e1a:	b921      	cbnz	r1, 8005e26 <_realloc_r+0x16>
 8005e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e20:	4611      	mov	r1, r2
 8005e22:	f7ff b975 	b.w	8005110 <_malloc_r>
 8005e26:	b92a      	cbnz	r2, 8005e34 <_realloc_r+0x24>
 8005e28:	f7ff f8fe 	bl	8005028 <_free_r>
 8005e2c:	2400      	movs	r4, #0
 8005e2e:	4620      	mov	r0, r4
 8005e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e34:	f000 f841 	bl	8005eba <_malloc_usable_size_r>
 8005e38:	4285      	cmp	r5, r0
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	d802      	bhi.n	8005e44 <_realloc_r+0x34>
 8005e3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e42:	d8f4      	bhi.n	8005e2e <_realloc_r+0x1e>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7ff f962 	bl	8005110 <_malloc_r>
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0ec      	beq.n	8005e2c <_realloc_r+0x1c>
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	462a      	mov	r2, r5
 8005e56:	4621      	mov	r1, r4
 8005e58:	bf28      	it	cs
 8005e5a:	4632      	movcs	r2, r6
 8005e5c:	f7fe fa87 	bl	800436e <memcpy>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4640      	mov	r0, r8
 8005e64:	f7ff f8e0 	bl	8005028 <_free_r>
 8005e68:	463c      	mov	r4, r7
 8005e6a:	e7e0      	b.n	8005e2e <_realloc_r+0x1e>

08005e6c <__ascii_wctomb>:
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4608      	mov	r0, r1
 8005e70:	b141      	cbz	r1, 8005e84 <__ascii_wctomb+0x18>
 8005e72:	2aff      	cmp	r2, #255	@ 0xff
 8005e74:	d904      	bls.n	8005e80 <__ascii_wctomb+0x14>
 8005e76:	228a      	movs	r2, #138	@ 0x8a
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	4770      	bx	lr
 8005e80:	700a      	strb	r2, [r1, #0]
 8005e82:	2001      	movs	r0, #1
 8005e84:	4770      	bx	lr
	...

08005e88 <fiprintf>:
 8005e88:	b40e      	push	{r1, r2, r3}
 8005e8a:	b503      	push	{r0, r1, lr}
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	ab03      	add	r3, sp, #12
 8005e90:	4805      	ldr	r0, [pc, #20]	@ (8005ea8 <fiprintf+0x20>)
 8005e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	f000 f83f 	bl	8005f1c <_vfiprintf_r>
 8005e9e:	b002      	add	sp, #8
 8005ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea4:	b003      	add	sp, #12
 8005ea6:	4770      	bx	lr
 8005ea8:	20000018 	.word	0x20000018

08005eac <abort>:
 8005eac:	b508      	push	{r3, lr}
 8005eae:	2006      	movs	r0, #6
 8005eb0:	f000 fa08 	bl	80062c4 <raise>
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	f7fb fdd8 	bl	8001a6a <_exit>

08005eba <_malloc_usable_size_r>:
 8005eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebe:	1f18      	subs	r0, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfbc      	itt	lt
 8005ec4:	580b      	ldrlt	r3, [r1, r0]
 8005ec6:	18c0      	addlt	r0, r0, r3
 8005ec8:	4770      	bx	lr

08005eca <__sfputc_r>:
 8005eca:	6893      	ldr	r3, [r2, #8]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	b410      	push	{r4}
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	da08      	bge.n	8005ee8 <__sfputc_r+0x1e>
 8005ed6:	6994      	ldr	r4, [r2, #24]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	db01      	blt.n	8005ee0 <__sfputc_r+0x16>
 8005edc:	290a      	cmp	r1, #10
 8005ede:	d103      	bne.n	8005ee8 <__sfputc_r+0x1e>
 8005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee4:	f000 b932 	b.w	800614c <__swbuf_r>
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	1c58      	adds	r0, r3, #1
 8005eec:	6010      	str	r0, [r2, #0]
 8005eee:	7019      	strb	r1, [r3, #0]
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <__sfputs_r>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	4606      	mov	r6, r0
 8005efc:	460f      	mov	r7, r1
 8005efe:	4614      	mov	r4, r2
 8005f00:	18d5      	adds	r5, r2, r3
 8005f02:	42ac      	cmp	r4, r5
 8005f04:	d101      	bne.n	8005f0a <__sfputs_r+0x12>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e007      	b.n	8005f1a <__sfputs_r+0x22>
 8005f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0e:	463a      	mov	r2, r7
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff ffda 	bl	8005eca <__sfputc_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d1f3      	bne.n	8005f02 <__sfputs_r+0xa>
 8005f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f1c <_vfiprintf_r>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	460d      	mov	r5, r1
 8005f22:	b09d      	sub	sp, #116	@ 0x74
 8005f24:	4614      	mov	r4, r2
 8005f26:	4698      	mov	r8, r3
 8005f28:	4606      	mov	r6, r0
 8005f2a:	b118      	cbz	r0, 8005f34 <_vfiprintf_r+0x18>
 8005f2c:	6a03      	ldr	r3, [r0, #32]
 8005f2e:	b90b      	cbnz	r3, 8005f34 <_vfiprintf_r+0x18>
 8005f30:	f7fe f904 	bl	800413c <__sinit>
 8005f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f36:	07d9      	lsls	r1, r3, #31
 8005f38:	d405      	bmi.n	8005f46 <_vfiprintf_r+0x2a>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	059a      	lsls	r2, r3, #22
 8005f3e:	d402      	bmi.n	8005f46 <_vfiprintf_r+0x2a>
 8005f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f42:	f7fe fa12 	bl	800436a <__retarget_lock_acquire_recursive>
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	071b      	lsls	r3, r3, #28
 8005f4a:	d501      	bpl.n	8005f50 <_vfiprintf_r+0x34>
 8005f4c:	692b      	ldr	r3, [r5, #16]
 8005f4e:	b99b      	cbnz	r3, 8005f78 <_vfiprintf_r+0x5c>
 8005f50:	4629      	mov	r1, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f938 	bl	80061c8 <__swsetup_r>
 8005f58:	b170      	cbz	r0, 8005f78 <_vfiprintf_r+0x5c>
 8005f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5c:	07dc      	lsls	r4, r3, #31
 8005f5e:	d504      	bpl.n	8005f6a <_vfiprintf_r+0x4e>
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	b01d      	add	sp, #116	@ 0x74
 8005f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	0598      	lsls	r0, r3, #22
 8005f6e:	d4f7      	bmi.n	8005f60 <_vfiprintf_r+0x44>
 8005f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f72:	f7fe f9fb 	bl	800436c <__retarget_lock_release_recursive>
 8005f76:	e7f3      	b.n	8005f60 <_vfiprintf_r+0x44>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f86:	2330      	movs	r3, #48	@ 0x30
 8005f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006138 <_vfiprintf_r+0x21c>
 8005f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f90:	f04f 0901 	mov.w	r9, #1
 8005f94:	4623      	mov	r3, r4
 8005f96:	469a      	mov	sl, r3
 8005f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_vfiprintf_r+0x86>
 8005f9e:	2a25      	cmp	r2, #37	@ 0x25
 8005fa0:	d1f9      	bne.n	8005f96 <_vfiprintf_r+0x7a>
 8005fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa6:	d00b      	beq.n	8005fc0 <_vfiprintf_r+0xa4>
 8005fa8:	465b      	mov	r3, fp
 8005faa:	4622      	mov	r2, r4
 8005fac:	4629      	mov	r1, r5
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f7ff ffa2 	bl	8005ef8 <__sfputs_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f000 80a7 	beq.w	8006108 <_vfiprintf_r+0x1ec>
 8005fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fbc:	445a      	add	r2, fp
 8005fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 809f 	beq.w	8006108 <_vfiprintf_r+0x1ec>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd4:	f10a 0a01 	add.w	sl, sl, #1
 8005fd8:	9304      	str	r3, [sp, #16]
 8005fda:	9307      	str	r3, [sp, #28]
 8005fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fe2:	4654      	mov	r4, sl
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fea:	4853      	ldr	r0, [pc, #332]	@ (8006138 <_vfiprintf_r+0x21c>)
 8005fec:	f7fa f8f8 	bl	80001e0 <memchr>
 8005ff0:	9a04      	ldr	r2, [sp, #16]
 8005ff2:	b9d8      	cbnz	r0, 800602c <_vfiprintf_r+0x110>
 8005ff4:	06d1      	lsls	r1, r2, #27
 8005ff6:	bf44      	itt	mi
 8005ff8:	2320      	movmi	r3, #32
 8005ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffe:	0713      	lsls	r3, r2, #28
 8006000:	bf44      	itt	mi
 8006002:	232b      	movmi	r3, #43	@ 0x2b
 8006004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006008:	f89a 3000 	ldrb.w	r3, [sl]
 800600c:	2b2a      	cmp	r3, #42	@ 0x2a
 800600e:	d015      	beq.n	800603c <_vfiprintf_r+0x120>
 8006010:	9a07      	ldr	r2, [sp, #28]
 8006012:	4654      	mov	r4, sl
 8006014:	2000      	movs	r0, #0
 8006016:	f04f 0c0a 	mov.w	ip, #10
 800601a:	4621      	mov	r1, r4
 800601c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006020:	3b30      	subs	r3, #48	@ 0x30
 8006022:	2b09      	cmp	r3, #9
 8006024:	d94b      	bls.n	80060be <_vfiprintf_r+0x1a2>
 8006026:	b1b0      	cbz	r0, 8006056 <_vfiprintf_r+0x13a>
 8006028:	9207      	str	r2, [sp, #28]
 800602a:	e014      	b.n	8006056 <_vfiprintf_r+0x13a>
 800602c:	eba0 0308 	sub.w	r3, r0, r8
 8006030:	fa09 f303 	lsl.w	r3, r9, r3
 8006034:	4313      	orrs	r3, r2
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	46a2      	mov	sl, r4
 800603a:	e7d2      	b.n	8005fe2 <_vfiprintf_r+0xc6>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	1d19      	adds	r1, r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	9103      	str	r1, [sp, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	bfbb      	ittet	lt
 8006048:	425b      	neglt	r3, r3
 800604a:	f042 0202 	orrlt.w	r2, r2, #2
 800604e:	9307      	strge	r3, [sp, #28]
 8006050:	9307      	strlt	r3, [sp, #28]
 8006052:	bfb8      	it	lt
 8006054:	9204      	strlt	r2, [sp, #16]
 8006056:	7823      	ldrb	r3, [r4, #0]
 8006058:	2b2e      	cmp	r3, #46	@ 0x2e
 800605a:	d10a      	bne.n	8006072 <_vfiprintf_r+0x156>
 800605c:	7863      	ldrb	r3, [r4, #1]
 800605e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006060:	d132      	bne.n	80060c8 <_vfiprintf_r+0x1ac>
 8006062:	9b03      	ldr	r3, [sp, #12]
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	9203      	str	r2, [sp, #12]
 800606a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800606e:	3402      	adds	r4, #2
 8006070:	9305      	str	r3, [sp, #20]
 8006072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006148 <_vfiprintf_r+0x22c>
 8006076:	7821      	ldrb	r1, [r4, #0]
 8006078:	2203      	movs	r2, #3
 800607a:	4650      	mov	r0, sl
 800607c:	f7fa f8b0 	bl	80001e0 <memchr>
 8006080:	b138      	cbz	r0, 8006092 <_vfiprintf_r+0x176>
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	eba0 000a 	sub.w	r0, r0, sl
 8006088:	2240      	movs	r2, #64	@ 0x40
 800608a:	4082      	lsls	r2, r0
 800608c:	4313      	orrs	r3, r2
 800608e:	3401      	adds	r4, #1
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006096:	4829      	ldr	r0, [pc, #164]	@ (800613c <_vfiprintf_r+0x220>)
 8006098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800609c:	2206      	movs	r2, #6
 800609e:	f7fa f89f 	bl	80001e0 <memchr>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d03f      	beq.n	8006126 <_vfiprintf_r+0x20a>
 80060a6:	4b26      	ldr	r3, [pc, #152]	@ (8006140 <_vfiprintf_r+0x224>)
 80060a8:	bb1b      	cbnz	r3, 80060f2 <_vfiprintf_r+0x1d6>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	3307      	adds	r3, #7
 80060ae:	f023 0307 	bic.w	r3, r3, #7
 80060b2:	3308      	adds	r3, #8
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b8:	443b      	add	r3, r7
 80060ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80060bc:	e76a      	b.n	8005f94 <_vfiprintf_r+0x78>
 80060be:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c2:	460c      	mov	r4, r1
 80060c4:	2001      	movs	r0, #1
 80060c6:	e7a8      	b.n	800601a <_vfiprintf_r+0xfe>
 80060c8:	2300      	movs	r3, #0
 80060ca:	3401      	adds	r4, #1
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 0c0a 	mov.w	ip, #10
 80060d4:	4620      	mov	r0, r4
 80060d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060da:	3a30      	subs	r2, #48	@ 0x30
 80060dc:	2a09      	cmp	r2, #9
 80060de:	d903      	bls.n	80060e8 <_vfiprintf_r+0x1cc>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0c6      	beq.n	8006072 <_vfiprintf_r+0x156>
 80060e4:	9105      	str	r1, [sp, #20]
 80060e6:	e7c4      	b.n	8006072 <_vfiprintf_r+0x156>
 80060e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80060ec:	4604      	mov	r4, r0
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7f0      	b.n	80060d4 <_vfiprintf_r+0x1b8>
 80060f2:	ab03      	add	r3, sp, #12
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	462a      	mov	r2, r5
 80060f8:	4b12      	ldr	r3, [pc, #72]	@ (8006144 <_vfiprintf_r+0x228>)
 80060fa:	a904      	add	r1, sp, #16
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7fd fbd9 	bl	80038b4 <_printf_float>
 8006102:	4607      	mov	r7, r0
 8006104:	1c78      	adds	r0, r7, #1
 8006106:	d1d6      	bne.n	80060b6 <_vfiprintf_r+0x19a>
 8006108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800610a:	07d9      	lsls	r1, r3, #31
 800610c:	d405      	bmi.n	800611a <_vfiprintf_r+0x1fe>
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	059a      	lsls	r2, r3, #22
 8006112:	d402      	bmi.n	800611a <_vfiprintf_r+0x1fe>
 8006114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006116:	f7fe f929 	bl	800436c <__retarget_lock_release_recursive>
 800611a:	89ab      	ldrh	r3, [r5, #12]
 800611c:	065b      	lsls	r3, r3, #25
 800611e:	f53f af1f 	bmi.w	8005f60 <_vfiprintf_r+0x44>
 8006122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006124:	e71e      	b.n	8005f64 <_vfiprintf_r+0x48>
 8006126:	ab03      	add	r3, sp, #12
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	462a      	mov	r2, r5
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <_vfiprintf_r+0x228>)
 800612e:	a904      	add	r1, sp, #16
 8006130:	4630      	mov	r0, r6
 8006132:	f7fd fe57 	bl	8003de4 <_printf_i>
 8006136:	e7e4      	b.n	8006102 <_vfiprintf_r+0x1e6>
 8006138:	08006dd8 	.word	0x08006dd8
 800613c:	08006de2 	.word	0x08006de2
 8006140:	080038b5 	.word	0x080038b5
 8006144:	08005ef9 	.word	0x08005ef9
 8006148:	08006dde 	.word	0x08006dde

0800614c <__swbuf_r>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	460e      	mov	r6, r1
 8006150:	4614      	mov	r4, r2
 8006152:	4605      	mov	r5, r0
 8006154:	b118      	cbz	r0, 800615e <__swbuf_r+0x12>
 8006156:	6a03      	ldr	r3, [r0, #32]
 8006158:	b90b      	cbnz	r3, 800615e <__swbuf_r+0x12>
 800615a:	f7fd ffef 	bl	800413c <__sinit>
 800615e:	69a3      	ldr	r3, [r4, #24]
 8006160:	60a3      	str	r3, [r4, #8]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	071a      	lsls	r2, r3, #28
 8006166:	d501      	bpl.n	800616c <__swbuf_r+0x20>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	b943      	cbnz	r3, 800617e <__swbuf_r+0x32>
 800616c:	4621      	mov	r1, r4
 800616e:	4628      	mov	r0, r5
 8006170:	f000 f82a 	bl	80061c8 <__swsetup_r>
 8006174:	b118      	cbz	r0, 800617e <__swbuf_r+0x32>
 8006176:	f04f 37ff 	mov.w	r7, #4294967295
 800617a:	4638      	mov	r0, r7
 800617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	1a98      	subs	r0, r3, r2
 8006184:	6963      	ldr	r3, [r4, #20]
 8006186:	b2f6      	uxtb	r6, r6
 8006188:	4283      	cmp	r3, r0
 800618a:	4637      	mov	r7, r6
 800618c:	dc05      	bgt.n	800619a <__swbuf_r+0x4e>
 800618e:	4621      	mov	r1, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f7ff fda7 	bl	8005ce4 <_fflush_r>
 8006196:	2800      	cmp	r0, #0
 8006198:	d1ed      	bne.n	8006176 <__swbuf_r+0x2a>
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60a3      	str	r3, [r4, #8]
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	701e      	strb	r6, [r3, #0]
 80061a8:	6962      	ldr	r2, [r4, #20]
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d004      	beq.n	80061ba <__swbuf_r+0x6e>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d5e1      	bpl.n	800617a <__swbuf_r+0x2e>
 80061b6:	2e0a      	cmp	r6, #10
 80061b8:	d1df      	bne.n	800617a <__swbuf_r+0x2e>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f7ff fd91 	bl	8005ce4 <_fflush_r>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0d9      	beq.n	800617a <__swbuf_r+0x2e>
 80061c6:	e7d6      	b.n	8006176 <__swbuf_r+0x2a>

080061c8 <__swsetup_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4b29      	ldr	r3, [pc, #164]	@ (8006270 <__swsetup_r+0xa8>)
 80061cc:	4605      	mov	r5, r0
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	460c      	mov	r4, r1
 80061d2:	b118      	cbz	r0, 80061dc <__swsetup_r+0x14>
 80061d4:	6a03      	ldr	r3, [r0, #32]
 80061d6:	b90b      	cbnz	r3, 80061dc <__swsetup_r+0x14>
 80061d8:	f7fd ffb0 	bl	800413c <__sinit>
 80061dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e0:	0719      	lsls	r1, r3, #28
 80061e2:	d422      	bmi.n	800622a <__swsetup_r+0x62>
 80061e4:	06da      	lsls	r2, r3, #27
 80061e6:	d407      	bmi.n	80061f8 <__swsetup_r+0x30>
 80061e8:	2209      	movs	r2, #9
 80061ea:	602a      	str	r2, [r5, #0]
 80061ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	e033      	b.n	8006260 <__swsetup_r+0x98>
 80061f8:	0758      	lsls	r0, r3, #29
 80061fa:	d512      	bpl.n	8006222 <__swsetup_r+0x5a>
 80061fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fe:	b141      	cbz	r1, 8006212 <__swsetup_r+0x4a>
 8006200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006204:	4299      	cmp	r1, r3
 8006206:	d002      	beq.n	800620e <__swsetup_r+0x46>
 8006208:	4628      	mov	r0, r5
 800620a:	f7fe ff0d 	bl	8005028 <_free_r>
 800620e:	2300      	movs	r3, #0
 8006210:	6363      	str	r3, [r4, #52]	@ 0x34
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	2300      	movs	r3, #0
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f043 0308 	orr.w	r3, r3, #8
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	b94b      	cbnz	r3, 8006242 <__swsetup_r+0x7a>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006238:	d003      	beq.n	8006242 <__swsetup_r+0x7a>
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f883 	bl	8006348 <__smakebuf_r>
 8006242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006246:	f013 0201 	ands.w	r2, r3, #1
 800624a:	d00a      	beq.n	8006262 <__swsetup_r+0x9a>
 800624c:	2200      	movs	r2, #0
 800624e:	60a2      	str	r2, [r4, #8]
 8006250:	6962      	ldr	r2, [r4, #20]
 8006252:	4252      	negs	r2, r2
 8006254:	61a2      	str	r2, [r4, #24]
 8006256:	6922      	ldr	r2, [r4, #16]
 8006258:	b942      	cbnz	r2, 800626c <__swsetup_r+0xa4>
 800625a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800625e:	d1c5      	bne.n	80061ec <__swsetup_r+0x24>
 8006260:	bd38      	pop	{r3, r4, r5, pc}
 8006262:	0799      	lsls	r1, r3, #30
 8006264:	bf58      	it	pl
 8006266:	6962      	ldrpl	r2, [r4, #20]
 8006268:	60a2      	str	r2, [r4, #8]
 800626a:	e7f4      	b.n	8006256 <__swsetup_r+0x8e>
 800626c:	2000      	movs	r0, #0
 800626e:	e7f7      	b.n	8006260 <__swsetup_r+0x98>
 8006270:	20000018 	.word	0x20000018

08006274 <_raise_r>:
 8006274:	291f      	cmp	r1, #31
 8006276:	b538      	push	{r3, r4, r5, lr}
 8006278:	4605      	mov	r5, r0
 800627a:	460c      	mov	r4, r1
 800627c:	d904      	bls.n	8006288 <_raise_r+0x14>
 800627e:	2316      	movs	r3, #22
 8006280:	6003      	str	r3, [r0, #0]
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800628a:	b112      	cbz	r2, 8006292 <_raise_r+0x1e>
 800628c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006290:	b94b      	cbnz	r3, 80062a6 <_raise_r+0x32>
 8006292:	4628      	mov	r0, r5
 8006294:	f000 f830 	bl	80062f8 <_getpid_r>
 8006298:	4622      	mov	r2, r4
 800629a:	4601      	mov	r1, r0
 800629c:	4628      	mov	r0, r5
 800629e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a2:	f000 b817 	b.w	80062d4 <_kill_r>
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d00a      	beq.n	80062c0 <_raise_r+0x4c>
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	d103      	bne.n	80062b6 <_raise_r+0x42>
 80062ae:	2316      	movs	r3, #22
 80062b0:	6003      	str	r3, [r0, #0]
 80062b2:	2001      	movs	r0, #1
 80062b4:	e7e7      	b.n	8006286 <_raise_r+0x12>
 80062b6:	2100      	movs	r1, #0
 80062b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062bc:	4620      	mov	r0, r4
 80062be:	4798      	blx	r3
 80062c0:	2000      	movs	r0, #0
 80062c2:	e7e0      	b.n	8006286 <_raise_r+0x12>

080062c4 <raise>:
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <raise+0xc>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f7ff bfd3 	b.w	8006274 <_raise_r>
 80062ce:	bf00      	nop
 80062d0:	20000018 	.word	0x20000018

080062d4 <_kill_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_kill_r+0x20>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f7fb fbb2 	bl	8001a4a <_kill>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d102      	bne.n	80062f0 <_kill_r+0x1c>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	b103      	cbz	r3, 80062f0 <_kill_r+0x1c>
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	bd38      	pop	{r3, r4, r5, pc}
 80062f2:	bf00      	nop
 80062f4:	200007d8 	.word	0x200007d8

080062f8 <_getpid_r>:
 80062f8:	f7fb bb9f 	b.w	8001a3a <_getpid>

080062fc <__swhatbuf_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	460c      	mov	r4, r1
 8006300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006304:	2900      	cmp	r1, #0
 8006306:	b096      	sub	sp, #88	@ 0x58
 8006308:	4615      	mov	r5, r2
 800630a:	461e      	mov	r6, r3
 800630c:	da0d      	bge.n	800632a <__swhatbuf_r+0x2e>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006314:	f04f 0100 	mov.w	r1, #0
 8006318:	bf14      	ite	ne
 800631a:	2340      	movne	r3, #64	@ 0x40
 800631c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006320:	2000      	movs	r0, #0
 8006322:	6031      	str	r1, [r6, #0]
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	b016      	add	sp, #88	@ 0x58
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	466a      	mov	r2, sp
 800632c:	f000 f848 	bl	80063c0 <_fstat_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	dbec      	blt.n	800630e <__swhatbuf_r+0x12>
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800633a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800633e:	4259      	negs	r1, r3
 8006340:	4159      	adcs	r1, r3
 8006342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006346:	e7eb      	b.n	8006320 <__swhatbuf_r+0x24>

08006348 <__smakebuf_r>:
 8006348:	898b      	ldrh	r3, [r1, #12]
 800634a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634c:	079d      	lsls	r5, r3, #30
 800634e:	4606      	mov	r6, r0
 8006350:	460c      	mov	r4, r1
 8006352:	d507      	bpl.n	8006364 <__smakebuf_r+0x1c>
 8006354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	2301      	movs	r3, #1
 800635e:	6163      	str	r3, [r4, #20]
 8006360:	b003      	add	sp, #12
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006364:	ab01      	add	r3, sp, #4
 8006366:	466a      	mov	r2, sp
 8006368:	f7ff ffc8 	bl	80062fc <__swhatbuf_r>
 800636c:	9f00      	ldr	r7, [sp, #0]
 800636e:	4605      	mov	r5, r0
 8006370:	4639      	mov	r1, r7
 8006372:	4630      	mov	r0, r6
 8006374:	f7fe fecc 	bl	8005110 <_malloc_r>
 8006378:	b948      	cbnz	r0, 800638e <__smakebuf_r+0x46>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	059a      	lsls	r2, r3, #22
 8006380:	d4ee      	bmi.n	8006360 <__smakebuf_r+0x18>
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	f043 0302 	orr.w	r3, r3, #2
 800638a:	81a3      	strh	r3, [r4, #12]
 800638c:	e7e2      	b.n	8006354 <__smakebuf_r+0xc>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	6020      	str	r0, [r4, #0]
 8006392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800639e:	b15b      	cbz	r3, 80063b8 <__smakebuf_r+0x70>
 80063a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f81d 	bl	80063e4 <_isatty_r>
 80063aa:	b128      	cbz	r0, 80063b8 <__smakebuf_r+0x70>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	431d      	orrs	r5, r3
 80063bc:	81a5      	strh	r5, [r4, #12]
 80063be:	e7cf      	b.n	8006360 <__smakebuf_r+0x18>

080063c0 <_fstat_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	@ (80063e0 <_fstat_r+0x20>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f7fb fb9c 	bl	8001b0a <_fstat>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_fstat_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_fstat_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	200007d8 	.word	0x200007d8

080063e4 <_isatty_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	@ (8006400 <_isatty_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fb fb9b 	bl	8001b2a <_isatty>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_isatty_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_isatty_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	200007d8 	.word	0x200007d8

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
